// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace config {
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class Gva;
struct GvaDefaultTypeInternal;
extern GvaDefaultTypeInternal _Gva_default_instance_;
class KeyBinding;
struct KeyBindingDefaultTypeInternal;
extern KeyBindingDefaultTypeInternal _KeyBinding_default_instance_;
class KeyBindingsApc;
struct KeyBindingsApcDefaultTypeInternal;
extern KeyBindingsApcDefaultTypeInternal _KeyBindingsApc_default_instance_;
class OsmScout;
struct OsmScoutDefaultTypeInternal;
extern OsmScoutDefaultTypeInternal _OsmScout_default_instance_;
class ThemeDefault;
struct ThemeDefaultDefaultTypeInternal;
extern ThemeDefaultDefaultTypeInternal _ThemeDefault_default_instance_;
class ThemeHighContrast;
struct ThemeHighContrastDefaultTypeInternal;
extern ThemeHighContrastDefaultTypeInternal _ThemeHighContrast_default_instance_;
class ThemeModernBlue;
struct ThemeModernBlueDefaultTypeInternal;
extern ThemeModernBlueDefaultTypeInternal _ThemeModernBlue_default_instance_;
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> ::config::File* Arena::CreateMaybeMessage<::config::File>(Arena*);
template<> ::config::Gva* Arena::CreateMaybeMessage<::config::Gva>(Arena*);
template<> ::config::KeyBinding* Arena::CreateMaybeMessage<::config::KeyBinding>(Arena*);
template<> ::config::KeyBindingsApc* Arena::CreateMaybeMessage<::config::KeyBindingsApc>(Arena*);
template<> ::config::OsmScout* Arena::CreateMaybeMessage<::config::OsmScout>(Arena*);
template<> ::config::ThemeDefault* Arena::CreateMaybeMessage<::config::ThemeDefault>(Arena*);
template<> ::config::ThemeHighContrast* Arena::CreateMaybeMessage<::config::ThemeHighContrast>(Arena*);
template<> ::config::ThemeModernBlue* Arena::CreateMaybeMessage<::config::ThemeModernBlue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace config {

enum Colour : int {
  kColourAmber = 16750848,
  kColourWhite = 16777215,
  kColourRed = 16711680,
  kColourGrey = 8355711,
  kColourMediumGrey = 6316128,
  kColourDarkGrey = 4210752,
  kColourGreen = 65280,
  kColourDarkGreen = 32512,
  kColourDarkGreen2 = 19200,
  kColourBlue = 255,
  kColourCyan = 65535,
  kColourDarkBlue = 3368601,
  kColourLightBlue = 3289855,
  kColourBlack = 0,
  kColourYellow = 16776960,
  kColourOrange = 16753920,
  kColourModernBlueLight = 32450,
  kColourModernBlueDark = 1327195
};
bool Colour_IsValid(int value);
constexpr Colour Colour_MIN = kColourBlack;
constexpr Colour Colour_MAX = kColourWhite;
constexpr int Colour_ARRAYSIZE = Colour_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Colour_descriptor();
template<typename T>
inline const std::string& Colour_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Colour>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Colour_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Colour_descriptor(), enum_t_value);
}
inline bool Colour_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Colour* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Colour>(
    Colour_descriptor(), name, value);
}
enum LabelStyle : int {
  kLabelSquare = 0,
  kLabelRounded = 1
};
bool LabelStyle_IsValid(int value);
constexpr LabelStyle LabelStyle_MIN = kLabelSquare;
constexpr LabelStyle LabelStyle_MAX = kLabelRounded;
constexpr int LabelStyle_ARRAYSIZE = LabelStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LabelStyle_descriptor();
template<typename T>
inline const std::string& LabelStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LabelStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LabelStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LabelStyle_descriptor(), enum_t_value);
}
inline bool LabelStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LabelStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LabelStyle>(
    LabelStyle_descriptor(), name, value);
}
enum LineStyle : int {
  kLineSolid = 0,
  kLineDashed = 1,
  kLineDotted = 2
};
bool LineStyle_IsValid(int value);
constexpr LineStyle LineStyle_MIN = kLineSolid;
constexpr LineStyle LineStyle_MAX = kLineDotted;
constexpr int LineStyle_ARRAYSIZE = LineStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineStyle_descriptor();
template<typename T>
inline const std::string& LineStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LineStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LineStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LineStyle_descriptor(), enum_t_value);
}
inline bool LineStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LineStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LineStyle>(
    LineStyle_descriptor(), name, value);
}
enum PpiStyle : int {
  kPpiClassicTankWithSight = 1,
  kPpiClassicTankWithoutSight = 2,
  kPpiClassicArrowWithSight = 3,
  kPpiClassicArrowWithoutSight = 4,
  kPpiModernTankWithSights = 5,
  kPpiModernTankWithoutSights = 6
};
bool PpiStyle_IsValid(int value);
constexpr PpiStyle PpiStyle_MIN = kPpiClassicTankWithSight;
constexpr PpiStyle PpiStyle_MAX = kPpiModernTankWithoutSights;
constexpr int PpiStyle_ARRAYSIZE = PpiStyle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PpiStyle_descriptor();
template<typename T>
inline const std::string& PpiStyle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PpiStyle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PpiStyle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PpiStyle_descriptor(), enum_t_value);
}
inline bool PpiStyle_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PpiStyle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PpiStyle>(
    PpiStyle_descriptor(), name, value);
}
enum Key : int {
  kKeyBLK = 0,
  kKeySA = 1,
  kKeyWPN = 2,
  kKeyDEF = 3,
  kKeySYS = 4,
  kKeyDRV = 5,
  kKeySTR = 6,
  kKeyCOM = 7,
  kKeyBMS = 8,
  kKeyF1 = 9,
  kKeyF2 = 10,
  kKeyF3 = 11,
  kKeyF4 = 12,
  kKeyF5 = 13,
  kKeyF6 = 14,
  kKeyF7 = 15,
  kKeyF8 = 16,
  kKeyF9 = 17,
  kKeyF10 = 18,
  kKeyF11 = 19,
  kKeyF12 = 20,
  kKeyF13 = 21,
  kKeyF14 = 22,
  kKeyF15 = 23,
  kKeyF16 = 24,
  kKeyF17 = 25,
  kKeyF18 = 26,
  kKeyF19 = 27,
  kKeyF20 = 28,
  kKeyUpArrow = 29,
  kKeyDownArrow = 30,
  kKeyRightArrow = 31,
  kKeyLeftArrow = 32
};
bool Key_IsValid(int value);
constexpr Key Key_MIN = kKeyBLK;
constexpr Key Key_MAX = kKeyLeftArrow;
constexpr int Key_ARRAYSIZE = Key_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Key_descriptor();
template<typename T>
inline const std::string& Key_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Key>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Key_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Key_descriptor(), enum_t_value);
}
inline bool Key_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Key* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Key>(
    Key_descriptor(), name, value);
}
// ===================================================================

class ThemeDefault final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.ThemeDefault) */ {
 public:
  inline ThemeDefault() : ThemeDefault(nullptr) {}
  ~ThemeDefault() override;
  explicit PROTOBUF_CONSTEXPR ThemeDefault(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeDefault(const ThemeDefault& from);
  ThemeDefault(ThemeDefault&& from) noexcept
    : ThemeDefault() {
    *this = ::std::move(from);
  }

  inline ThemeDefault& operator=(const ThemeDefault& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeDefault& operator=(ThemeDefault&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeDefault& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeDefault* internal_default_instance() {
    return reinterpret_cast<const ThemeDefault*>(
               &_ThemeDefault_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThemeDefault& a, ThemeDefault& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeDefault* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeDefault* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemeDefault* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThemeDefault>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeDefault& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThemeDefault& from) {
    ThemeDefault::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeDefault* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.ThemeDefault";
  }
  protected:
  explicit ThemeDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThemeFontFieldNumber = 28,
    kThemeLabelLineEnabledSelectedChangingFieldNumber = 16,
    kThemeLabelLineEnabledSelectedFieldNumber = 17,
    kThemeLabelLineEnabledFieldNumber = 18,
    kThemeLabelLineDisabledFieldNumber = 19,
    kThemeCriticalFieldNumber = 27,
    kThemeBackgroundFieldNumber = 1,
    kTableBackgroundFieldNumber = 2,
    kThemeLabelStyleFieldNumber = 3,
    kThemeLabelBackgroundEnabledSelectedChangingFieldNumber = 4,
    kThemeLabelBackgroundEnabledSelectedFieldNumber = 5,
    kThemeLabelBackgroundEnabledFieldNumber = 6,
    kThemeLabelBackgroundDisabledFieldNumber = 7,
    kThemeLabelTextEnabledSelectedChangingFieldNumber = 8,
    kThemeLabelTextEnabledSelectedFieldNumber = 9,
    kThemeLabelTextEnabledFieldNumber = 10,
    kThemeLabelTextDisabledFieldNumber = 11,
    kThemeLabelBorderEnabledSelectedChangingFieldNumber = 12,
    kThemeLabelBorderEnabledSelectedFieldNumber = 13,
    kThemeLabelBorderEnabledFieldNumber = 14,
    kThemeLabelBorderDisabledFieldNumber = 15,
    kWidgetPpiStyleFieldNumber = 20,
    kThemeLabelBorderThicknessFieldNumber = 21,
    kThemeTableBorderThicknessFieldNumber = 22,
    kThemeStatusBackgroundFieldNumber = 23,
    kThemeStatusBorderFieldNumber = 24,
    kThemeStatusTextFieldNumber = 25,
    kThemeAlertFieldNumber = 26,
  };
  // optional string theme_font = 28 [default = "DejaVu Sans Mono Book"];
  bool has_theme_font() const;
  private:
  bool _internal_has_theme_font() const;
  public:
  void clear_theme_font();
  const std::string& theme_font() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme_font(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme_font();
  PROTOBUF_NODISCARD std::string* release_theme_font();
  void set_allocated_theme_font(std::string* theme_font);
  private:
  const std::string& _internal_theme_font() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_font(const std::string& value);
  std::string* _internal_mutable_theme_font();
  public:

  // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
  bool has_theme_label_line_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_line_enabled_selected_changing() const;
  public:
  void clear_theme_label_line_enabled_selected_changing();
  ::config::LineStyle theme_label_line_enabled_selected_changing() const;
  void set_theme_label_line_enabled_selected_changing(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled_selected_changing() const;
  void _internal_set_theme_label_line_enabled_selected_changing(::config::LineStyle value);
  public:

  // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
  bool has_theme_label_line_enabled_selected() const;
  private:
  bool _internal_has_theme_label_line_enabled_selected() const;
  public:
  void clear_theme_label_line_enabled_selected();
  ::config::LineStyle theme_label_line_enabled_selected() const;
  void set_theme_label_line_enabled_selected(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled_selected() const;
  void _internal_set_theme_label_line_enabled_selected(::config::LineStyle value);
  public:

  // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
  bool has_theme_label_line_enabled() const;
  private:
  bool _internal_has_theme_label_line_enabled() const;
  public:
  void clear_theme_label_line_enabled();
  ::config::LineStyle theme_label_line_enabled() const;
  void set_theme_label_line_enabled(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled() const;
  void _internal_set_theme_label_line_enabled(::config::LineStyle value);
  public:

  // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineSolid];
  bool has_theme_label_line_disabled() const;
  private:
  bool _internal_has_theme_label_line_disabled() const;
  public:
  void clear_theme_label_line_disabled();
  ::config::LineStyle theme_label_line_disabled() const;
  void set_theme_label_line_disabled(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_disabled() const;
  void _internal_set_theme_label_line_disabled(::config::LineStyle value);
  public:

  // optional .config.Colour theme_critical = 27 [default = kColourRed];
  bool has_theme_critical() const;
  private:
  bool _internal_has_theme_critical() const;
  public:
  void clear_theme_critical();
  ::config::Colour theme_critical() const;
  void set_theme_critical(::config::Colour value);
  private:
  ::config::Colour _internal_theme_critical() const;
  void _internal_set_theme_critical(::config::Colour value);
  public:

  // optional .config.Colour theme_background = 1 [default = kColourGreen];
  bool has_theme_background() const;
  private:
  bool _internal_has_theme_background() const;
  public:
  void clear_theme_background();
  ::config::Colour theme_background() const;
  void set_theme_background(::config::Colour value);
  private:
  ::config::Colour _internal_theme_background() const;
  void _internal_set_theme_background(::config::Colour value);
  public:

  // optional .config.Colour table_background = 2 [default = kColourDarkGreen];
  bool has_table_background() const;
  private:
  bool _internal_has_table_background() const;
  public:
  void clear_table_background();
  ::config::Colour table_background() const;
  void set_table_background(::config::Colour value);
  private:
  ::config::Colour _internal_table_background() const;
  void _internal_set_table_background(::config::Colour value);
  public:

  // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
  bool has_theme_label_style() const;
  private:
  bool _internal_has_theme_label_style() const;
  public:
  void clear_theme_label_style();
  ::config::LabelStyle theme_label_style() const;
  void set_theme_label_style(::config::LabelStyle value);
  private:
  ::config::LabelStyle _internal_theme_label_style() const;
  void _internal_set_theme_label_style(::config::LabelStyle value);
  public:

  // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourYellow];
  bool has_theme_label_background_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_background_enabled_selected_changing() const;
  public:
  void clear_theme_label_background_enabled_selected_changing();
  ::config::Colour theme_label_background_enabled_selected_changing() const;
  void set_theme_label_background_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled_selected_changing() const;
  void _internal_set_theme_label_background_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourDarkGreen];
  bool has_theme_label_background_enabled_selected() const;
  private:
  bool _internal_has_theme_label_background_enabled_selected() const;
  public:
  void clear_theme_label_background_enabled_selected();
  ::config::Colour theme_label_background_enabled_selected() const;
  void set_theme_label_background_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled_selected() const;
  void _internal_set_theme_label_background_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_enabled = 6 [default = kColourDarkGreen];
  bool has_theme_label_background_enabled() const;
  private:
  bool _internal_has_theme_label_background_enabled() const;
  public:
  void clear_theme_label_background_enabled();
  ::config::Colour theme_label_background_enabled() const;
  void set_theme_label_background_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled() const;
  void _internal_set_theme_label_background_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
  bool has_theme_label_background_disabled() const;
  private:
  bool _internal_has_theme_label_background_disabled() const;
  public:
  void clear_theme_label_background_disabled();
  ::config::Colour theme_label_background_disabled() const;
  void set_theme_label_background_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_disabled() const;
  void _internal_set_theme_label_background_disabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
  bool has_theme_label_text_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_text_enabled_selected_changing() const;
  public:
  void clear_theme_label_text_enabled_selected_changing();
  ::config::Colour theme_label_text_enabled_selected_changing() const;
  void set_theme_label_text_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled_selected_changing() const;
  void _internal_set_theme_label_text_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
  bool has_theme_label_text_enabled_selected() const;
  private:
  bool _internal_has_theme_label_text_enabled_selected() const;
  public:
  void clear_theme_label_text_enabled_selected();
  ::config::Colour theme_label_text_enabled_selected() const;
  void set_theme_label_text_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled_selected() const;
  void _internal_set_theme_label_text_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
  bool has_theme_label_text_enabled() const;
  private:
  bool _internal_has_theme_label_text_enabled() const;
  public:
  void clear_theme_label_text_enabled();
  ::config::Colour theme_label_text_enabled() const;
  void set_theme_label_text_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled() const;
  void _internal_set_theme_label_text_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_disabled = 11 [default = kColourWhite];
  bool has_theme_label_text_disabled() const;
  private:
  bool _internal_has_theme_label_text_disabled() const;
  public:
  void clear_theme_label_text_disabled();
  ::config::Colour theme_label_text_disabled() const;
  void set_theme_label_text_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_disabled() const;
  void _internal_set_theme_label_text_disabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourDarkGreen2];
  bool has_theme_label_border_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_border_enabled_selected_changing() const;
  public:
  void clear_theme_label_border_enabled_selected_changing();
  ::config::Colour theme_label_border_enabled_selected_changing() const;
  void set_theme_label_border_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled_selected_changing() const;
  void _internal_set_theme_label_border_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourYellow];
  bool has_theme_label_border_enabled_selected() const;
  private:
  bool _internal_has_theme_label_border_enabled_selected() const;
  public:
  void clear_theme_label_border_enabled_selected();
  ::config::Colour theme_label_border_enabled_selected() const;
  void set_theme_label_border_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled_selected() const;
  void _internal_set_theme_label_border_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled = 14 [default = kColourDarkGreen2];
  bool has_theme_label_border_enabled() const;
  private:
  bool _internal_has_theme_label_border_enabled() const;
  public:
  void clear_theme_label_border_enabled();
  ::config::Colour theme_label_border_enabled() const;
  void set_theme_label_border_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled() const;
  void _internal_set_theme_label_border_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
  bool has_theme_label_border_disabled() const;
  private:
  bool _internal_has_theme_label_border_disabled() const;
  public:
  void clear_theme_label_border_disabled();
  ::config::Colour theme_label_border_disabled() const;
  void set_theme_label_border_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_disabled() const;
  void _internal_set_theme_label_border_disabled(::config::Colour value);
  public:

  // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicArrowWithSight];
  bool has_widget_ppi_style() const;
  private:
  bool _internal_has_widget_ppi_style() const;
  public:
  void clear_widget_ppi_style();
  ::config::PpiStyle widget_ppi_style() const;
  void set_widget_ppi_style(::config::PpiStyle value);
  private:
  ::config::PpiStyle _internal_widget_ppi_style() const;
  void _internal_set_widget_ppi_style(::config::PpiStyle value);
  public:

  // optional int32 theme_label_border_thickness = 21 [default = 1];
  bool has_theme_label_border_thickness() const;
  private:
  bool _internal_has_theme_label_border_thickness() const;
  public:
  void clear_theme_label_border_thickness();
  int32_t theme_label_border_thickness() const;
  void set_theme_label_border_thickness(int32_t value);
  private:
  int32_t _internal_theme_label_border_thickness() const;
  void _internal_set_theme_label_border_thickness(int32_t value);
  public:

  // optional int32 theme_table_border_thickness = 22 [default = 1];
  bool has_theme_table_border_thickness() const;
  private:
  bool _internal_has_theme_table_border_thickness() const;
  public:
  void clear_theme_table_border_thickness();
  int32_t theme_table_border_thickness() const;
  void set_theme_table_border_thickness(int32_t value);
  private:
  int32_t _internal_theme_table_border_thickness() const;
  void _internal_set_theme_table_border_thickness(int32_t value);
  public:

  // optional .config.Colour theme_status_background = 23 [default = kColourDarkGreen];
  bool has_theme_status_background() const;
  private:
  bool _internal_has_theme_status_background() const;
  public:
  void clear_theme_status_background();
  ::config::Colour theme_status_background() const;
  void set_theme_status_background(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_background() const;
  void _internal_set_theme_status_background(::config::Colour value);
  public:

  // optional .config.Colour theme_status_border = 24 [default = kColourDarkGreen];
  bool has_theme_status_border() const;
  private:
  bool _internal_has_theme_status_border() const;
  public:
  void clear_theme_status_border();
  ::config::Colour theme_status_border() const;
  void set_theme_status_border(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_border() const;
  void _internal_set_theme_status_border(::config::Colour value);
  public:

  // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
  bool has_theme_status_text() const;
  private:
  bool _internal_has_theme_status_text() const;
  public:
  void clear_theme_status_text();
  ::config::Colour theme_status_text() const;
  void set_theme_status_text(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_text() const;
  void _internal_set_theme_status_text(::config::Colour value);
  public:

  // optional .config.Colour theme_alert = 26 [default = kColourAmber];
  bool has_theme_alert() const;
  private:
  bool _internal_has_theme_alert() const;
  public:
  void clear_theme_alert();
  ::config::Colour theme_alert() const;
  void set_theme_alert(::config::Colour value);
  private:
  ::config::Colour _internal_theme_alert() const;
  void _internal_set_theme_alert(::config::Colour value);
  public:

  // @@protoc_insertion_point(class_scope:config.ThemeDefault)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_theme_font_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_font_;
    int theme_label_line_enabled_selected_changing_;
    int theme_label_line_enabled_selected_;
    int theme_label_line_enabled_;
    int theme_label_line_disabled_;
    int theme_critical_;
    int theme_background_;
    int table_background_;
    int theme_label_style_;
    int theme_label_background_enabled_selected_changing_;
    int theme_label_background_enabled_selected_;
    int theme_label_background_enabled_;
    int theme_label_background_disabled_;
    int theme_label_text_enabled_selected_changing_;
    int theme_label_text_enabled_selected_;
    int theme_label_text_enabled_;
    int theme_label_text_disabled_;
    int theme_label_border_enabled_selected_changing_;
    int theme_label_border_enabled_selected_;
    int theme_label_border_enabled_;
    int theme_label_border_disabled_;
    int widget_ppi_style_;
    int32_t theme_label_border_thickness_;
    int32_t theme_table_border_thickness_;
    int theme_status_background_;
    int theme_status_border_;
    int theme_status_text_;
    int theme_alert_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class ThemeHighContrast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.ThemeHighContrast) */ {
 public:
  inline ThemeHighContrast() : ThemeHighContrast(nullptr) {}
  ~ThemeHighContrast() override;
  explicit PROTOBUF_CONSTEXPR ThemeHighContrast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeHighContrast(const ThemeHighContrast& from);
  ThemeHighContrast(ThemeHighContrast&& from) noexcept
    : ThemeHighContrast() {
    *this = ::std::move(from);
  }

  inline ThemeHighContrast& operator=(const ThemeHighContrast& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeHighContrast& operator=(ThemeHighContrast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeHighContrast& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeHighContrast* internal_default_instance() {
    return reinterpret_cast<const ThemeHighContrast*>(
               &_ThemeHighContrast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThemeHighContrast& a, ThemeHighContrast& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeHighContrast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeHighContrast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemeHighContrast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThemeHighContrast>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeHighContrast& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThemeHighContrast& from) {
    ThemeHighContrast::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeHighContrast* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.ThemeHighContrast";
  }
  protected:
  explicit ThemeHighContrast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThemeFontFieldNumber = 28,
    kThemeBackgroundFieldNumber = 1,
    kTableBackgroundFieldNumber = 2,
    kThemeLabelBackgroundEnabledSelectedChangingFieldNumber = 4,
    kThemeLabelBackgroundEnabledSelectedFieldNumber = 5,
    kThemeLabelBackgroundEnabledFieldNumber = 6,
    kThemeLabelTextDisabledFieldNumber = 11,
    kThemeLabelLineEnabledSelectedChangingFieldNumber = 16,
    kThemeLabelLineEnabledSelectedFieldNumber = 17,
    kThemeLabelLineEnabledFieldNumber = 18,
    kThemeStatusBackgroundFieldNumber = 23,
    kThemeStatusBorderFieldNumber = 24,
    kThemeLabelStyleFieldNumber = 3,
    kThemeLabelBackgroundDisabledFieldNumber = 7,
    kThemeLabelTextEnabledSelectedChangingFieldNumber = 8,
    kThemeLabelTextEnabledSelectedFieldNumber = 9,
    kThemeLabelTextEnabledFieldNumber = 10,
    kThemeLabelBorderEnabledSelectedChangingFieldNumber = 12,
    kThemeLabelBorderEnabledSelectedFieldNumber = 13,
    kThemeLabelBorderEnabledFieldNumber = 14,
    kThemeLabelBorderDisabledFieldNumber = 15,
    kThemeLabelLineDisabledFieldNumber = 19,
    kWidgetPpiStyleFieldNumber = 20,
    kThemeLabelBorderThicknessFieldNumber = 21,
    kThemeTableBorderThicknessFieldNumber = 22,
    kThemeStatusTextFieldNumber = 25,
    kThemeAlertFieldNumber = 26,
    kThemeCriticalFieldNumber = 27,
  };
  // optional string theme_font = 28 [default = "Courier 10 Pitch"];
  bool has_theme_font() const;
  private:
  bool _internal_has_theme_font() const;
  public:
  void clear_theme_font();
  const std::string& theme_font() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme_font(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme_font();
  PROTOBUF_NODISCARD std::string* release_theme_font();
  void set_allocated_theme_font(std::string* theme_font);
  private:
  const std::string& _internal_theme_font() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_font(const std::string& value);
  std::string* _internal_mutable_theme_font();
  public:

  // optional .config.Colour theme_background = 1 [default = kColourBlack];
  bool has_theme_background() const;
  private:
  bool _internal_has_theme_background() const;
  public:
  void clear_theme_background();
  ::config::Colour theme_background() const;
  void set_theme_background(::config::Colour value);
  private:
  ::config::Colour _internal_theme_background() const;
  void _internal_set_theme_background(::config::Colour value);
  public:

  // optional .config.Colour table_background = 2 [default = kColourBlack];
  bool has_table_background() const;
  private:
  bool _internal_has_table_background() const;
  public:
  void clear_table_background();
  ::config::Colour table_background() const;
  void set_table_background(::config::Colour value);
  private:
  ::config::Colour _internal_table_background() const;
  void _internal_set_table_background(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourBlack];
  bool has_theme_label_background_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_background_enabled_selected_changing() const;
  public:
  void clear_theme_label_background_enabled_selected_changing();
  ::config::Colour theme_label_background_enabled_selected_changing() const;
  void set_theme_label_background_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled_selected_changing() const;
  void _internal_set_theme_label_background_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourBlack];
  bool has_theme_label_background_enabled_selected() const;
  private:
  bool _internal_has_theme_label_background_enabled_selected() const;
  public:
  void clear_theme_label_background_enabled_selected();
  ::config::Colour theme_label_background_enabled_selected() const;
  void set_theme_label_background_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled_selected() const;
  void _internal_set_theme_label_background_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
  bool has_theme_label_background_enabled() const;
  private:
  bool _internal_has_theme_label_background_enabled() const;
  public:
  void clear_theme_label_background_enabled();
  ::config::Colour theme_label_background_enabled() const;
  void set_theme_label_background_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled() const;
  void _internal_set_theme_label_background_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_disabled = 11 [default = kColourBlack];
  bool has_theme_label_text_disabled() const;
  private:
  bool _internal_has_theme_label_text_disabled() const;
  public:
  void clear_theme_label_text_disabled();
  ::config::Colour theme_label_text_disabled() const;
  void set_theme_label_text_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_disabled() const;
  void _internal_set_theme_label_text_disabled(::config::Colour value);
  public:

  // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
  bool has_theme_label_line_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_line_enabled_selected_changing() const;
  public:
  void clear_theme_label_line_enabled_selected_changing();
  ::config::LineStyle theme_label_line_enabled_selected_changing() const;
  void set_theme_label_line_enabled_selected_changing(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled_selected_changing() const;
  void _internal_set_theme_label_line_enabled_selected_changing(::config::LineStyle value);
  public:

  // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
  bool has_theme_label_line_enabled_selected() const;
  private:
  bool _internal_has_theme_label_line_enabled_selected() const;
  public:
  void clear_theme_label_line_enabled_selected();
  ::config::LineStyle theme_label_line_enabled_selected() const;
  void set_theme_label_line_enabled_selected(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled_selected() const;
  void _internal_set_theme_label_line_enabled_selected(::config::LineStyle value);
  public:

  // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
  bool has_theme_label_line_enabled() const;
  private:
  bool _internal_has_theme_label_line_enabled() const;
  public:
  void clear_theme_label_line_enabled();
  ::config::LineStyle theme_label_line_enabled() const;
  void set_theme_label_line_enabled(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled() const;
  void _internal_set_theme_label_line_enabled(::config::LineStyle value);
  public:

  // optional .config.Colour theme_status_background = 23 [default = kColourBlack];
  bool has_theme_status_background() const;
  private:
  bool _internal_has_theme_status_background() const;
  public:
  void clear_theme_status_background();
  ::config::Colour theme_status_background() const;
  void set_theme_status_background(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_background() const;
  void _internal_set_theme_status_background(::config::Colour value);
  public:

  // optional .config.Colour theme_status_border = 24 [default = kColourBlack];
  bool has_theme_status_border() const;
  private:
  bool _internal_has_theme_status_border() const;
  public:
  void clear_theme_status_border();
  ::config::Colour theme_status_border() const;
  void set_theme_status_border(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_border() const;
  void _internal_set_theme_status_border(::config::Colour value);
  public:

  // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
  bool has_theme_label_style() const;
  private:
  bool _internal_has_theme_label_style() const;
  public:
  void clear_theme_label_style();
  ::config::LabelStyle theme_label_style() const;
  void set_theme_label_style(::config::LabelStyle value);
  private:
  ::config::LabelStyle _internal_theme_label_style() const;
  void _internal_set_theme_label_style(::config::LabelStyle value);
  public:

  // optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
  bool has_theme_label_background_disabled() const;
  private:
  bool _internal_has_theme_label_background_disabled() const;
  public:
  void clear_theme_label_background_disabled();
  ::config::Colour theme_label_background_disabled() const;
  void set_theme_label_background_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_disabled() const;
  void _internal_set_theme_label_background_disabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
  bool has_theme_label_text_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_text_enabled_selected_changing() const;
  public:
  void clear_theme_label_text_enabled_selected_changing();
  ::config::Colour theme_label_text_enabled_selected_changing() const;
  void set_theme_label_text_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled_selected_changing() const;
  void _internal_set_theme_label_text_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
  bool has_theme_label_text_enabled_selected() const;
  private:
  bool _internal_has_theme_label_text_enabled_selected() const;
  public:
  void clear_theme_label_text_enabled_selected();
  ::config::Colour theme_label_text_enabled_selected() const;
  void set_theme_label_text_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled_selected() const;
  void _internal_set_theme_label_text_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
  bool has_theme_label_text_enabled() const;
  private:
  bool _internal_has_theme_label_text_enabled() const;
  public:
  void clear_theme_label_text_enabled();
  ::config::Colour theme_label_text_enabled() const;
  void set_theme_label_text_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled() const;
  void _internal_set_theme_label_text_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourGrey];
  bool has_theme_label_border_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_border_enabled_selected_changing() const;
  public:
  void clear_theme_label_border_enabled_selected_changing();
  ::config::Colour theme_label_border_enabled_selected_changing() const;
  void set_theme_label_border_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled_selected_changing() const;
  void _internal_set_theme_label_border_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourGrey];
  bool has_theme_label_border_enabled_selected() const;
  private:
  bool _internal_has_theme_label_border_enabled_selected() const;
  public:
  void clear_theme_label_border_enabled_selected();
  ::config::Colour theme_label_border_enabled_selected() const;
  void set_theme_label_border_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled_selected() const;
  void _internal_set_theme_label_border_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled = 14 [default = kColourWhite];
  bool has_theme_label_border_enabled() const;
  private:
  bool _internal_has_theme_label_border_enabled() const;
  public:
  void clear_theme_label_border_enabled();
  ::config::Colour theme_label_border_enabled() const;
  void set_theme_label_border_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled() const;
  void _internal_set_theme_label_border_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
  bool has_theme_label_border_disabled() const;
  private:
  bool _internal_has_theme_label_border_disabled() const;
  public:
  void clear_theme_label_border_disabled();
  ::config::Colour theme_label_border_disabled() const;
  void set_theme_label_border_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_disabled() const;
  void _internal_set_theme_label_border_disabled(::config::Colour value);
  public:

  // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
  bool has_theme_label_line_disabled() const;
  private:
  bool _internal_has_theme_label_line_disabled() const;
  public:
  void clear_theme_label_line_disabled();
  ::config::LineStyle theme_label_line_disabled() const;
  void set_theme_label_line_disabled(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_disabled() const;
  void _internal_set_theme_label_line_disabled(::config::LineStyle value);
  public:

  // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicTankWithSight];
  bool has_widget_ppi_style() const;
  private:
  bool _internal_has_widget_ppi_style() const;
  public:
  void clear_widget_ppi_style();
  ::config::PpiStyle widget_ppi_style() const;
  void set_widget_ppi_style(::config::PpiStyle value);
  private:
  ::config::PpiStyle _internal_widget_ppi_style() const;
  void _internal_set_widget_ppi_style(::config::PpiStyle value);
  public:

  // optional int32 theme_label_border_thickness = 21 [default = 1];
  bool has_theme_label_border_thickness() const;
  private:
  bool _internal_has_theme_label_border_thickness() const;
  public:
  void clear_theme_label_border_thickness();
  int32_t theme_label_border_thickness() const;
  void set_theme_label_border_thickness(int32_t value);
  private:
  int32_t _internal_theme_label_border_thickness() const;
  void _internal_set_theme_label_border_thickness(int32_t value);
  public:

  // optional int32 theme_table_border_thickness = 22 [default = 1];
  bool has_theme_table_border_thickness() const;
  private:
  bool _internal_has_theme_table_border_thickness() const;
  public:
  void clear_theme_table_border_thickness();
  int32_t theme_table_border_thickness() const;
  void set_theme_table_border_thickness(int32_t value);
  private:
  int32_t _internal_theme_table_border_thickness() const;
  void _internal_set_theme_table_border_thickness(int32_t value);
  public:

  // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
  bool has_theme_status_text() const;
  private:
  bool _internal_has_theme_status_text() const;
  public:
  void clear_theme_status_text();
  ::config::Colour theme_status_text() const;
  void set_theme_status_text(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_text() const;
  void _internal_set_theme_status_text(::config::Colour value);
  public:

  // optional .config.Colour theme_alert = 26 [default = kColourAmber];
  bool has_theme_alert() const;
  private:
  bool _internal_has_theme_alert() const;
  public:
  void clear_theme_alert();
  ::config::Colour theme_alert() const;
  void set_theme_alert(::config::Colour value);
  private:
  ::config::Colour _internal_theme_alert() const;
  void _internal_set_theme_alert(::config::Colour value);
  public:

  // optional .config.Colour theme_critical = 27 [default = kColourRed];
  bool has_theme_critical() const;
  private:
  bool _internal_has_theme_critical() const;
  public:
  void clear_theme_critical();
  ::config::Colour theme_critical() const;
  void set_theme_critical(::config::Colour value);
  private:
  ::config::Colour _internal_theme_critical() const;
  void _internal_set_theme_critical(::config::Colour value);
  public:

  // @@protoc_insertion_point(class_scope:config.ThemeHighContrast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_theme_font_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_font_;
    int theme_background_;
    int table_background_;
    int theme_label_background_enabled_selected_changing_;
    int theme_label_background_enabled_selected_;
    int theme_label_background_enabled_;
    int theme_label_text_disabled_;
    int theme_label_line_enabled_selected_changing_;
    int theme_label_line_enabled_selected_;
    int theme_label_line_enabled_;
    int theme_status_background_;
    int theme_status_border_;
    int theme_label_style_;
    int theme_label_background_disabled_;
    int theme_label_text_enabled_selected_changing_;
    int theme_label_text_enabled_selected_;
    int theme_label_text_enabled_;
    int theme_label_border_enabled_selected_changing_;
    int theme_label_border_enabled_selected_;
    int theme_label_border_enabled_;
    int theme_label_border_disabled_;
    int theme_label_line_disabled_;
    int widget_ppi_style_;
    int32_t theme_label_border_thickness_;
    int32_t theme_table_border_thickness_;
    int theme_status_text_;
    int theme_alert_;
    int theme_critical_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class ThemeModernBlue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.ThemeModernBlue) */ {
 public:
  inline ThemeModernBlue() : ThemeModernBlue(nullptr) {}
  ~ThemeModernBlue() override;
  explicit PROTOBUF_CONSTEXPR ThemeModernBlue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeModernBlue(const ThemeModernBlue& from);
  ThemeModernBlue(ThemeModernBlue&& from) noexcept
    : ThemeModernBlue() {
    *this = ::std::move(from);
  }

  inline ThemeModernBlue& operator=(const ThemeModernBlue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeModernBlue& operator=(ThemeModernBlue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeModernBlue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeModernBlue* internal_default_instance() {
    return reinterpret_cast<const ThemeModernBlue*>(
               &_ThemeModernBlue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ThemeModernBlue& a, ThemeModernBlue& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeModernBlue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeModernBlue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemeModernBlue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThemeModernBlue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeModernBlue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThemeModernBlue& from) {
    ThemeModernBlue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeModernBlue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.ThemeModernBlue";
  }
  protected:
  explicit ThemeModernBlue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThemeFontFieldNumber = 28,
    kThemeBackgroundFieldNumber = 1,
    kTableBackgroundFieldNumber = 2,
    kThemeLabelBackgroundEnabledFieldNumber = 6,
    kThemeLabelBackgroundDisabledFieldNumber = 7,
    kThemeLabelLineEnabledSelectedChangingFieldNumber = 16,
    kThemeLabelLineEnabledSelectedFieldNumber = 17,
    kThemeLabelLineEnabledFieldNumber = 18,
    kThemeStatusBackgroundFieldNumber = 23,
    kThemeStatusBorderFieldNumber = 24,
    kThemeLabelStyleFieldNumber = 3,
    kThemeLabelBackgroundEnabledSelectedChangingFieldNumber = 4,
    kThemeLabelBackgroundEnabledSelectedFieldNumber = 5,
    kThemeLabelTextEnabledSelectedChangingFieldNumber = 8,
    kThemeLabelTextEnabledSelectedFieldNumber = 9,
    kThemeLabelTextEnabledFieldNumber = 10,
    kThemeLabelTextDisabledFieldNumber = 11,
    kThemeLabelBorderEnabledSelectedChangingFieldNumber = 12,
    kThemeLabelBorderEnabledSelectedFieldNumber = 13,
    kThemeLabelBorderEnabledFieldNumber = 14,
    kThemeLabelBorderDisabledFieldNumber = 15,
    kThemeLabelLineDisabledFieldNumber = 19,
    kWidgetPpiStyleFieldNumber = 20,
    kThemeLabelBorderThicknessFieldNumber = 21,
    kThemeTableBorderThicknessFieldNumber = 22,
    kThemeStatusTextFieldNumber = 25,
    kThemeAlertFieldNumber = 26,
    kThemeCriticalFieldNumber = 27,
  };
  // optional string theme_font = 28 [default = "Courier 10 Pitch"];
  bool has_theme_font() const;
  private:
  bool _internal_has_theme_font() const;
  public:
  void clear_theme_font();
  const std::string& theme_font() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme_font(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme_font();
  PROTOBUF_NODISCARD std::string* release_theme_font();
  void set_allocated_theme_font(std::string* theme_font);
  private:
  const std::string& _internal_theme_font() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_font(const std::string& value);
  std::string* _internal_mutable_theme_font();
  public:

  // optional .config.Colour theme_background = 1 [default = kColourBlack];
  bool has_theme_background() const;
  private:
  bool _internal_has_theme_background() const;
  public:
  void clear_theme_background();
  ::config::Colour theme_background() const;
  void set_theme_background(::config::Colour value);
  private:
  ::config::Colour _internal_theme_background() const;
  void _internal_set_theme_background(::config::Colour value);
  public:

  // optional .config.Colour table_background = 2 [default = kColourBlack];
  bool has_table_background() const;
  private:
  bool _internal_has_table_background() const;
  public:
  void clear_table_background();
  ::config::Colour table_background() const;
  void set_table_background(::config::Colour value);
  private:
  ::config::Colour _internal_table_background() const;
  void _internal_set_table_background(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
  bool has_theme_label_background_enabled() const;
  private:
  bool _internal_has_theme_label_background_enabled() const;
  public:
  void clear_theme_label_background_enabled();
  ::config::Colour theme_label_background_enabled() const;
  void set_theme_label_background_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled() const;
  void _internal_set_theme_label_background_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_disabled = 7 [default = kColourBlack];
  bool has_theme_label_background_disabled() const;
  private:
  bool _internal_has_theme_label_background_disabled() const;
  public:
  void clear_theme_label_background_disabled();
  ::config::Colour theme_label_background_disabled() const;
  void set_theme_label_background_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_disabled() const;
  void _internal_set_theme_label_background_disabled(::config::Colour value);
  public:

  // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
  bool has_theme_label_line_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_line_enabled_selected_changing() const;
  public:
  void clear_theme_label_line_enabled_selected_changing();
  ::config::LineStyle theme_label_line_enabled_selected_changing() const;
  void set_theme_label_line_enabled_selected_changing(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled_selected_changing() const;
  void _internal_set_theme_label_line_enabled_selected_changing(::config::LineStyle value);
  public:

  // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
  bool has_theme_label_line_enabled_selected() const;
  private:
  bool _internal_has_theme_label_line_enabled_selected() const;
  public:
  void clear_theme_label_line_enabled_selected();
  ::config::LineStyle theme_label_line_enabled_selected() const;
  void set_theme_label_line_enabled_selected(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled_selected() const;
  void _internal_set_theme_label_line_enabled_selected(::config::LineStyle value);
  public:

  // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
  bool has_theme_label_line_enabled() const;
  private:
  bool _internal_has_theme_label_line_enabled() const;
  public:
  void clear_theme_label_line_enabled();
  ::config::LineStyle theme_label_line_enabled() const;
  void set_theme_label_line_enabled(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_enabled() const;
  void _internal_set_theme_label_line_enabled(::config::LineStyle value);
  public:

  // optional .config.Colour theme_status_background = 23 [default = kColourBlack];
  bool has_theme_status_background() const;
  private:
  bool _internal_has_theme_status_background() const;
  public:
  void clear_theme_status_background();
  ::config::Colour theme_status_background() const;
  void set_theme_status_background(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_background() const;
  void _internal_set_theme_status_background(::config::Colour value);
  public:

  // optional .config.Colour theme_status_border = 24 [default = kColourBlack];
  bool has_theme_status_border() const;
  private:
  bool _internal_has_theme_status_border() const;
  public:
  void clear_theme_status_border();
  ::config::Colour theme_status_border() const;
  void set_theme_status_border(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_border() const;
  void _internal_set_theme_status_border(::config::Colour value);
  public:

  // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
  bool has_theme_label_style() const;
  private:
  bool _internal_has_theme_label_style() const;
  public:
  void clear_theme_label_style();
  ::config::LabelStyle theme_label_style() const;
  void set_theme_label_style(::config::LabelStyle value);
  private:
  ::config::LabelStyle _internal_theme_label_style() const;
  void _internal_set_theme_label_style(::config::LabelStyle value);
  public:

  // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourModernBlueLight];
  bool has_theme_label_background_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_background_enabled_selected_changing() const;
  public:
  void clear_theme_label_background_enabled_selected_changing();
  ::config::Colour theme_label_background_enabled_selected_changing() const;
  void set_theme_label_background_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled_selected_changing() const;
  void _internal_set_theme_label_background_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourModernBlueDark];
  bool has_theme_label_background_enabled_selected() const;
  private:
  bool _internal_has_theme_label_background_enabled_selected() const;
  public:
  void clear_theme_label_background_enabled_selected();
  ::config::Colour theme_label_background_enabled_selected() const;
  void set_theme_label_background_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_background_enabled_selected() const;
  void _internal_set_theme_label_background_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
  bool has_theme_label_text_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_text_enabled_selected_changing() const;
  public:
  void clear_theme_label_text_enabled_selected_changing();
  ::config::Colour theme_label_text_enabled_selected_changing() const;
  void set_theme_label_text_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled_selected_changing() const;
  void _internal_set_theme_label_text_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
  bool has_theme_label_text_enabled_selected() const;
  private:
  bool _internal_has_theme_label_text_enabled_selected() const;
  public:
  void clear_theme_label_text_enabled_selected();
  ::config::Colour theme_label_text_enabled_selected() const;
  void set_theme_label_text_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled_selected() const;
  void _internal_set_theme_label_text_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
  bool has_theme_label_text_enabled() const;
  private:
  bool _internal_has_theme_label_text_enabled() const;
  public:
  void clear_theme_label_text_enabled();
  ::config::Colour theme_label_text_enabled() const;
  void set_theme_label_text_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_enabled() const;
  void _internal_set_theme_label_text_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_text_disabled = 11 [default = kColourGrey];
  bool has_theme_label_text_disabled() const;
  private:
  bool _internal_has_theme_label_text_disabled() const;
  public:
  void clear_theme_label_text_disabled();
  ::config::Colour theme_label_text_disabled() const;
  void set_theme_label_text_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_text_disabled() const;
  void _internal_set_theme_label_text_disabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourModernBlueDark];
  bool has_theme_label_border_enabled_selected_changing() const;
  private:
  bool _internal_has_theme_label_border_enabled_selected_changing() const;
  public:
  void clear_theme_label_border_enabled_selected_changing();
  ::config::Colour theme_label_border_enabled_selected_changing() const;
  void set_theme_label_border_enabled_selected_changing(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled_selected_changing() const;
  void _internal_set_theme_label_border_enabled_selected_changing(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourModernBlueLight];
  bool has_theme_label_border_enabled_selected() const;
  private:
  bool _internal_has_theme_label_border_enabled_selected() const;
  public:
  void clear_theme_label_border_enabled_selected();
  ::config::Colour theme_label_border_enabled_selected() const;
  void set_theme_label_border_enabled_selected(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled_selected() const;
  void _internal_set_theme_label_border_enabled_selected(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_enabled = 14 [default = kColourGrey];
  bool has_theme_label_border_enabled() const;
  private:
  bool _internal_has_theme_label_border_enabled() const;
  public:
  void clear_theme_label_border_enabled();
  ::config::Colour theme_label_border_enabled() const;
  void set_theme_label_border_enabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_enabled() const;
  void _internal_set_theme_label_border_enabled(::config::Colour value);
  public:

  // optional .config.Colour theme_label_border_disabled = 15 [default = kColourGrey];
  bool has_theme_label_border_disabled() const;
  private:
  bool _internal_has_theme_label_border_disabled() const;
  public:
  void clear_theme_label_border_disabled();
  ::config::Colour theme_label_border_disabled() const;
  void set_theme_label_border_disabled(::config::Colour value);
  private:
  ::config::Colour _internal_theme_label_border_disabled() const;
  void _internal_set_theme_label_border_disabled(::config::Colour value);
  public:

  // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
  bool has_theme_label_line_disabled() const;
  private:
  bool _internal_has_theme_label_line_disabled() const;
  public:
  void clear_theme_label_line_disabled();
  ::config::LineStyle theme_label_line_disabled() const;
  void set_theme_label_line_disabled(::config::LineStyle value);
  private:
  ::config::LineStyle _internal_theme_label_line_disabled() const;
  void _internal_set_theme_label_line_disabled(::config::LineStyle value);
  public:

  // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiModernTankWithSights];
  bool has_widget_ppi_style() const;
  private:
  bool _internal_has_widget_ppi_style() const;
  public:
  void clear_widget_ppi_style();
  ::config::PpiStyle widget_ppi_style() const;
  void set_widget_ppi_style(::config::PpiStyle value);
  private:
  ::config::PpiStyle _internal_widget_ppi_style() const;
  void _internal_set_widget_ppi_style(::config::PpiStyle value);
  public:

  // optional int32 theme_label_border_thickness = 21 [default = 1];
  bool has_theme_label_border_thickness() const;
  private:
  bool _internal_has_theme_label_border_thickness() const;
  public:
  void clear_theme_label_border_thickness();
  int32_t theme_label_border_thickness() const;
  void set_theme_label_border_thickness(int32_t value);
  private:
  int32_t _internal_theme_label_border_thickness() const;
  void _internal_set_theme_label_border_thickness(int32_t value);
  public:

  // optional int32 theme_table_border_thickness = 22 [default = 1];
  bool has_theme_table_border_thickness() const;
  private:
  bool _internal_has_theme_table_border_thickness() const;
  public:
  void clear_theme_table_border_thickness();
  int32_t theme_table_border_thickness() const;
  void set_theme_table_border_thickness(int32_t value);
  private:
  int32_t _internal_theme_table_border_thickness() const;
  void _internal_set_theme_table_border_thickness(int32_t value);
  public:

  // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
  bool has_theme_status_text() const;
  private:
  bool _internal_has_theme_status_text() const;
  public:
  void clear_theme_status_text();
  ::config::Colour theme_status_text() const;
  void set_theme_status_text(::config::Colour value);
  private:
  ::config::Colour _internal_theme_status_text() const;
  void _internal_set_theme_status_text(::config::Colour value);
  public:

  // optional .config.Colour theme_alert = 26 [default = kColourAmber];
  bool has_theme_alert() const;
  private:
  bool _internal_has_theme_alert() const;
  public:
  void clear_theme_alert();
  ::config::Colour theme_alert() const;
  void set_theme_alert(::config::Colour value);
  private:
  ::config::Colour _internal_theme_alert() const;
  void _internal_set_theme_alert(::config::Colour value);
  public:

  // optional .config.Colour theme_critical = 27 [default = kColourRed];
  bool has_theme_critical() const;
  private:
  bool _internal_has_theme_critical() const;
  public:
  void clear_theme_critical();
  ::config::Colour theme_critical() const;
  void set_theme_critical(::config::Colour value);
  private:
  ::config::Colour _internal_theme_critical() const;
  void _internal_set_theme_critical(::config::Colour value);
  public:

  // @@protoc_insertion_point(class_scope:config.ThemeModernBlue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_theme_font_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_font_;
    int theme_background_;
    int table_background_;
    int theme_label_background_enabled_;
    int theme_label_background_disabled_;
    int theme_label_line_enabled_selected_changing_;
    int theme_label_line_enabled_selected_;
    int theme_label_line_enabled_;
    int theme_status_background_;
    int theme_status_border_;
    int theme_label_style_;
    int theme_label_background_enabled_selected_changing_;
    int theme_label_background_enabled_selected_;
    int theme_label_text_enabled_selected_changing_;
    int theme_label_text_enabled_selected_;
    int theme_label_text_enabled_;
    int theme_label_text_disabled_;
    int theme_label_border_enabled_selected_changing_;
    int theme_label_border_enabled_selected_;
    int theme_label_border_enabled_;
    int theme_label_border_disabled_;
    int theme_label_line_disabled_;
    int widget_ppi_style_;
    int32_t theme_label_border_thickness_;
    int32_t theme_table_border_thickness_;
    int theme_status_text_;
    int theme_alert_;
    int theme_critical_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const File& from) {
    File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFilenameFieldNumber = 1,
    kLogFilenameFieldNumber = 2,
    kLogPathFieldNumber = 3,
    kImagesPathFieldNumber = 4,
  };
  // required string config_filename = 1 [default = "config.pb"];
  bool has_config_filename() const;
  private:
  bool _internal_has_config_filename() const;
  public:
  void clear_config_filename();
  const std::string& config_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_filename();
  PROTOBUF_NODISCARD std::string* release_config_filename();
  void set_allocated_config_filename(std::string* config_filename);
  private:
  const std::string& _internal_config_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_filename(const std::string& value);
  std::string* _internal_mutable_config_filename();
  public:

  // required string log_filename = 2 [default = "gva.log"];
  bool has_log_filename() const;
  private:
  bool _internal_has_log_filename() const;
  public:
  void clear_log_filename();
  const std::string& log_filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_filename();
  PROTOBUF_NODISCARD std::string* release_log_filename();
  void set_allocated_log_filename(std::string* log_filename);
  private:
  const std::string& _internal_log_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_filename(const std::string& value);
  std::string* _internal_mutable_log_filename();
  public:

  // required string log_path = 3 [default = "/var/log"];
  bool has_log_path() const;
  private:
  bool _internal_has_log_path() const;
  public:
  void clear_log_path();
  const std::string& log_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_log_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_log_path();
  PROTOBUF_NODISCARD std::string* release_log_path();
  void set_allocated_log_path(std::string* log_path);
  private:
  const std::string& _internal_log_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_path(const std::string& value);
  std::string* _internal_mutable_log_path();
  public:

  // required string images_path = 4 [default = "/opt/gva/hmi/images"];
  bool has_images_path() const;
  private:
  bool _internal_has_images_path() const;
  public:
  void clear_images_path();
  const std::string& images_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_images_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_images_path();
  PROTOBUF_NODISCARD std::string* release_images_path();
  void set_allocated_images_path(std::string* images_path);
  private:
  const std::string& _internal_images_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_images_path(const std::string& value);
  std::string* _internal_mutable_images_path();
  public:

  // @@protoc_insertion_point(class_scope:config.File)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_config_filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_filename_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_log_filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_filename_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_log_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_path_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_images_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr images_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class OsmScout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.OsmScout) */ {
 public:
  inline OsmScout() : OsmScout(nullptr) {}
  ~OsmScout() override;
  explicit PROTOBUF_CONSTEXPR OsmScout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OsmScout(const OsmScout& from);
  OsmScout(OsmScout&& from) noexcept
    : OsmScout() {
    *this = ::std::move(from);
  }

  inline OsmScout& operator=(const OsmScout& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsmScout& operator=(OsmScout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OsmScout& default_instance() {
    return *internal_default_instance();
  }
  static inline const OsmScout* internal_default_instance() {
    return reinterpret_cast<const OsmScout*>(
               &_OsmScout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OsmScout& a, OsmScout& b) {
    a.Swap(&b);
  }
  inline void Swap(OsmScout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsmScout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OsmScout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OsmScout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OsmScout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OsmScout& from) {
    OsmScout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsmScout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.OsmScout";
  }
  protected:
  explicit OsmScout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapPathFieldNumber = 2,
    kMapStylesheetPathFieldNumber = 3,
    kEnabledFieldNumber = 1,
    kTestLonFieldNumber = 4,
    kTestLatFieldNumber = 5,
  };
  // optional string map_path = 2 [default = "/opt/osmscout/maps/australia-latest/"];
  bool has_map_path() const;
  private:
  bool _internal_has_map_path() const;
  public:
  void clear_map_path();
  const std::string& map_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_path();
  PROTOBUF_NODISCARD std::string* release_map_path();
  void set_allocated_map_path(std::string* map_path);
  private:
  const std::string& _internal_map_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_path(const std::string& value);
  std::string* _internal_mutable_map_path();
  public:

  // optional string map_stylesheet_path = 3 [default = "/opt/osmscout/stylesheets/standard.oss"];
  bool has_map_stylesheet_path() const;
  private:
  bool _internal_has_map_stylesheet_path() const;
  public:
  void clear_map_stylesheet_path();
  const std::string& map_stylesheet_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_stylesheet_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_stylesheet_path();
  PROTOBUF_NODISCARD std::string* release_map_stylesheet_path();
  void set_allocated_map_stylesheet_path(std::string* map_stylesheet_path);
  private:
  const std::string& _internal_map_stylesheet_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_stylesheet_path(const std::string& value);
  std::string* _internal_mutable_map_stylesheet_path();
  public:

  // required bool enabled = 1 [default = true];
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // optional double test_lon = 4 [default = 153.02259];
  bool has_test_lon() const;
  private:
  bool _internal_has_test_lon() const;
  public:
  void clear_test_lon();
  double test_lon() const;
  void set_test_lon(double value);
  private:
  double _internal_test_lon() const;
  void _internal_set_test_lon(double value);
  public:

  // optional double test_lat = 5 [default = -27.4744];
  bool has_test_lat() const;
  private:
  bool _internal_has_test_lat() const;
  public:
  void clear_test_lat();
  double test_lat() const;
  void set_test_lat(double value);
  private:
  double _internal_test_lat() const;
  void _internal_set_test_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:config.OsmScout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_map_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_path_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_map_stylesheet_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_stylesheet_path_;
    bool enabled_;
    double test_lon_;
    double test_lat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class KeyBinding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.KeyBinding) */ {
 public:
  inline KeyBinding() : KeyBinding(nullptr) {}
  ~KeyBinding() override;
  explicit PROTOBUF_CONSTEXPR KeyBinding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyBinding(const KeyBinding& from);
  KeyBinding(KeyBinding&& from) noexcept
    : KeyBinding() {
    *this = ::std::move(from);
  }

  inline KeyBinding& operator=(const KeyBinding& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyBinding& operator=(KeyBinding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyBinding& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyBinding* internal_default_instance() {
    return reinterpret_cast<const KeyBinding*>(
               &_KeyBinding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(KeyBinding& a, KeyBinding& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyBinding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyBinding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyBinding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyBinding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyBinding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyBinding& from) {
    KeyBinding::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyBinding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.KeyBinding";
  }
  protected:
  explicit KeyBinding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kBindFieldNumber = 2,
  };
  // optional .config.Key key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::config::Key key() const;
  void set_key(::config::Key value);
  private:
  ::config::Key _internal_key() const;
  void _internal_set_key(::config::Key value);
  public:

  // optional int32 Bind = 2;
  bool has_bind() const;
  private:
  bool _internal_has_bind() const;
  public:
  void clear_bind();
  int32_t bind() const;
  void set_bind(int32_t value);
  private:
  int32_t _internal_bind() const;
  void _internal_set_bind(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:config.KeyBinding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int key_;
    int32_t bind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class KeyBindingsApc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.KeyBindingsApc) */ {
 public:
  inline KeyBindingsApc() : KeyBindingsApc(nullptr) {}
  ~KeyBindingsApc() override;
  explicit PROTOBUF_CONSTEXPR KeyBindingsApc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyBindingsApc(const KeyBindingsApc& from);
  KeyBindingsApc(KeyBindingsApc&& from) noexcept
    : KeyBindingsApc() {
    *this = ::std::move(from);
  }

  inline KeyBindingsApc& operator=(const KeyBindingsApc& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyBindingsApc& operator=(KeyBindingsApc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyBindingsApc& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyBindingsApc* internal_default_instance() {
    return reinterpret_cast<const KeyBindingsApc*>(
               &_KeyBindingsApc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(KeyBindingsApc& a, KeyBindingsApc& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyBindingsApc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyBindingsApc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyBindingsApc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyBindingsApc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyBindingsApc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyBindingsApc& from) {
    KeyBindingsApc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyBindingsApc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.KeyBindingsApc";
  }
  protected:
  explicit KeyBindingsApc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindFieldNumber = 2,
  };
  // optional .config.KeyBinding bind = 2;
  bool has_bind() const;
  private:
  bool _internal_has_bind() const;
  public:
  void clear_bind();
  const ::config::KeyBinding& bind() const;
  PROTOBUF_NODISCARD ::config::KeyBinding* release_bind();
  ::config::KeyBinding* mutable_bind();
  void set_allocated_bind(::config::KeyBinding* bind);
  private:
  const ::config::KeyBinding& _internal_bind() const;
  ::config::KeyBinding* _internal_mutable_bind();
  public:
  void unsafe_arena_set_allocated_bind(
      ::config::KeyBinding* bind);
  ::config::KeyBinding* unsafe_arena_release_bind();

  // @@protoc_insertion_point(class_scope:config.KeyBindingsApc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::config::KeyBinding* bind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class Gva final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:config.Gva) */ {
 public:
  inline Gva() : Gva(nullptr) {}
  ~Gva() override;
  explicit PROTOBUF_CONSTEXPR Gva(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Gva(const Gva& from);
  Gva(Gva&& from) noexcept
    : Gva() {
    *this = ::std::move(from);
  }

  inline Gva& operator=(const Gva& from) {
    CopyFrom(from);
    return *this;
  }
  inline Gva& operator=(Gva&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Gva& default_instance() {
    return *internal_default_instance();
  }
  static inline const Gva* internal_default_instance() {
    return reinterpret_cast<const Gva*>(
               &_Gva_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Gva& a, Gva& b) {
    a.Swap(&b);
  }
  inline void Swap(Gva* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Gva* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Gva* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Gva>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Gva& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Gva& from) {
    Gva::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gva* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "config.Gva";
  }
  protected:
  explicit Gva(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingsFieldNumber = 14,
    kNameFieldNumber = 1,
    kDeviceFieldNumber = 8,
    kGpsDeviceFieldNumber = 9,
    kOdbDeviceFieldNumber = 10,
    kDisplayTypeFieldNumber = 15,
    kOsmFieldNumber = 11,
    kThemeFieldNumber = 12,
    kFileFieldNumber = 13,
    kFullscreenFieldNumber = 5,
    kLiveFieldNumber = 6,
    kZoomFieldNumber = 7,
    kHeightFieldNumber = 3,
    kWidthFieldNumber = 4,
    kBrightnessFieldNumber = 16,
  };
  // repeated .config.KeyBinding bindings = 14;
  int bindings_size() const;
  private:
  int _internal_bindings_size() const;
  public:
  void clear_bindings();
  ::config::KeyBinding* mutable_bindings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::KeyBinding >*
      mutable_bindings();
  private:
  const ::config::KeyBinding& _internal_bindings(int index) const;
  ::config::KeyBinding* _internal_add_bindings();
  public:
  const ::config::KeyBinding& bindings(int index) const;
  ::config::KeyBinding* add_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::KeyBinding >&
      bindings() const;

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string device = 8;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const std::string& device() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device();
  PROTOBUF_NODISCARD std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // optional string gps_device = 9 [default = "/dev/ttyUSB0"];
  bool has_gps_device() const;
  private:
  bool _internal_has_gps_device() const;
  public:
  void clear_gps_device();
  const std::string& gps_device() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gps_device(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gps_device();
  PROTOBUF_NODISCARD std::string* release_gps_device();
  void set_allocated_gps_device(std::string* gps_device);
  private:
  const std::string& _internal_gps_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gps_device(const std::string& value);
  std::string* _internal_mutable_gps_device();
  public:

  // optional string odb_device = 10 [default = "/dev/ttyUSB1"];
  bool has_odb_device() const;
  private:
  bool _internal_has_odb_device() const;
  public:
  void clear_odb_device();
  const std::string& odb_device() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_odb_device(ArgT0&& arg0, ArgT... args);
  std::string* mutable_odb_device();
  PROTOBUF_NODISCARD std::string* release_odb_device();
  void set_allocated_odb_device(std::string* odb_device);
  private:
  const std::string& _internal_odb_device() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_odb_device(const std::string& value);
  std::string* _internal_mutable_odb_device();
  public:

  // optional string display_type = 15;
  bool has_display_type() const;
  private:
  bool _internal_has_display_type() const;
  public:
  void clear_display_type();
  const std::string& display_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_type();
  PROTOBUF_NODISCARD std::string* release_display_type();
  void set_allocated_display_type(std::string* display_type);
  private:
  const std::string& _internal_display_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_type(const std::string& value);
  std::string* _internal_mutable_display_type();
  public:

  // optional .config.OsmScout osm = 11;
  bool has_osm() const;
  private:
  bool _internal_has_osm() const;
  public:
  void clear_osm();
  const ::config::OsmScout& osm() const;
  PROTOBUF_NODISCARD ::config::OsmScout* release_osm();
  ::config::OsmScout* mutable_osm();
  void set_allocated_osm(::config::OsmScout* osm);
  private:
  const ::config::OsmScout& _internal_osm() const;
  ::config::OsmScout* _internal_mutable_osm();
  public:
  void unsafe_arena_set_allocated_osm(
      ::config::OsmScout* osm);
  ::config::OsmScout* unsafe_arena_release_osm();

  // optional .config.ThemeModernBlue theme = 12;
  bool has_theme() const;
  private:
  bool _internal_has_theme() const;
  public:
  void clear_theme();
  const ::config::ThemeModernBlue& theme() const;
  PROTOBUF_NODISCARD ::config::ThemeModernBlue* release_theme();
  ::config::ThemeModernBlue* mutable_theme();
  void set_allocated_theme(::config::ThemeModernBlue* theme);
  private:
  const ::config::ThemeModernBlue& _internal_theme() const;
  ::config::ThemeModernBlue* _internal_mutable_theme();
  public:
  void unsafe_arena_set_allocated_theme(
      ::config::ThemeModernBlue* theme);
  ::config::ThemeModernBlue* unsafe_arena_release_theme();

  // optional .config.File file = 13;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::config::File& file() const;
  PROTOBUF_NODISCARD ::config::File* release_file();
  ::config::File* mutable_file();
  void set_allocated_file(::config::File* file);
  private:
  const ::config::File& _internal_file() const;
  ::config::File* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::config::File* file);
  ::config::File* unsafe_arena_release_file();

  // optional bool fullscreen = 5 [default = false];
  bool has_fullscreen() const;
  private:
  bool _internal_has_fullscreen() const;
  public:
  void clear_fullscreen();
  bool fullscreen() const;
  void set_fullscreen(bool value);
  private:
  bool _internal_fullscreen() const;
  void _internal_set_fullscreen(bool value);
  public:

  // optional bool live = 6;
  bool has_live() const;
  private:
  bool _internal_has_live() const;
  public:
  void clear_live();
  bool live() const;
  void set_live(bool value);
  private:
  bool _internal_live() const;
  void _internal_set_live(bool value);
  public:

  // optional int32 zoom = 7 [default = 20000];
  bool has_zoom() const;
  private:
  bool _internal_has_zoom() const;
  public:
  void clear_zoom();
  int32_t zoom() const;
  void set_zoom(int32_t value);
  private:
  int32_t _internal_zoom() const;
  void _internal_set_zoom(int32_t value);
  public:

  // optional int32 height = 3 [default = 480];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional int32 width = 4 [default = 640];
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional double brightness = 16 [default = 1];
  bool has_brightness() const;
  private:
  bool _internal_has_brightness() const;
  public:
  void clear_brightness();
  double brightness() const;
  void set_brightness(double value);
  private:
  double _internal_brightness() const;
  void _internal_set_brightness(double value);
  public:

  // @@protoc_insertion_point(class_scope:config.Gva)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::KeyBinding > bindings_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_gps_device_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gps_device_;
    static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_odb_device_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr odb_device_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_type_;
    ::config::OsmScout* osm_;
    ::config::ThemeModernBlue* theme_;
    ::config::File* file_;
    bool fullscreen_;
    bool live_;
    int32_t zoom_;
    int32_t height_;
    int32_t width_;
    double brightness_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThemeDefault

// optional .config.Colour theme_background = 1 [default = kColourGreen];
inline bool ThemeDefault::_internal_has_theme_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_background() const {
  return _internal_has_theme_background();
}
inline void ThemeDefault::clear_theme_background() {
  _impl_.theme_background_ = 65280;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::config::Colour ThemeDefault::_internal_theme_background() const {
  return static_cast< ::config::Colour >(_impl_.theme_background_);
}
inline ::config::Colour ThemeDefault::theme_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_background)
  return _internal_theme_background();
}
inline void ThemeDefault::_internal_set_theme_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.theme_background_ = value;
}
inline void ThemeDefault::set_theme_background(::config::Colour value) {
  _internal_set_theme_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_background)
}

// optional .config.Colour table_background = 2 [default = kColourDarkGreen];
inline bool ThemeDefault::_internal_has_table_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ThemeDefault::has_table_background() const {
  return _internal_has_table_background();
}
inline void ThemeDefault::clear_table_background() {
  _impl_.table_background_ = 32512;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::config::Colour ThemeDefault::_internal_table_background() const {
  return static_cast< ::config::Colour >(_impl_.table_background_);
}
inline ::config::Colour ThemeDefault::table_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.table_background)
  return _internal_table_background();
}
inline void ThemeDefault::_internal_set_table_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.table_background_ = value;
}
inline void ThemeDefault::set_table_background(::config::Colour value) {
  _internal_set_table_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.table_background)
}

// optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
inline bool ThemeDefault::_internal_has_theme_label_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_style() const {
  return _internal_has_theme_label_style();
}
inline void ThemeDefault::clear_theme_label_style() {
  _impl_.theme_label_style_ = 1;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::config::LabelStyle ThemeDefault::_internal_theme_label_style() const {
  return static_cast< ::config::LabelStyle >(_impl_.theme_label_style_);
}
inline ::config::LabelStyle ThemeDefault::theme_label_style() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_style)
  return _internal_theme_label_style();
}
inline void ThemeDefault::_internal_set_theme_label_style(::config::LabelStyle value) {
  assert(::config::LabelStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.theme_label_style_ = value;
}
inline void ThemeDefault::set_theme_label_style(::config::LabelStyle value) {
  _internal_set_theme_label_style(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_style)
}

// optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourYellow];
inline bool ThemeDefault::_internal_has_theme_label_background_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_background_enabled_selected_changing() const {
  return _internal_has_theme_label_background_enabled_selected_changing();
}
inline void ThemeDefault::clear_theme_label_background_enabled_selected_changing() {
  _impl_.theme_label_background_enabled_selected_changing_ = 16776960;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_background_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_selected_changing_);
}
inline ::config::Colour ThemeDefault::theme_label_background_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_background_enabled_selected_changing)
  return _internal_theme_label_background_enabled_selected_changing();
}
inline void ThemeDefault::_internal_set_theme_label_background_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.theme_label_background_enabled_selected_changing_ = value;
}
inline void ThemeDefault::set_theme_label_background_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_background_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_background_enabled_selected_changing)
}

// optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourDarkGreen];
inline bool ThemeDefault::_internal_has_theme_label_background_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_background_enabled_selected() const {
  return _internal_has_theme_label_background_enabled_selected();
}
inline void ThemeDefault::clear_theme_label_background_enabled_selected() {
  _impl_.theme_label_background_enabled_selected_ = 32512;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_background_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_selected_);
}
inline ::config::Colour ThemeDefault::theme_label_background_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_background_enabled_selected)
  return _internal_theme_label_background_enabled_selected();
}
inline void ThemeDefault::_internal_set_theme_label_background_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.theme_label_background_enabled_selected_ = value;
}
inline void ThemeDefault::set_theme_label_background_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_background_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_background_enabled_selected)
}

// optional .config.Colour theme_label_background_enabled = 6 [default = kColourDarkGreen];
inline bool ThemeDefault::_internal_has_theme_label_background_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_background_enabled() const {
  return _internal_has_theme_label_background_enabled();
}
inline void ThemeDefault::clear_theme_label_background_enabled() {
  _impl_.theme_label_background_enabled_ = 32512;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_background_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_);
}
inline ::config::Colour ThemeDefault::theme_label_background_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_background_enabled)
  return _internal_theme_label_background_enabled();
}
inline void ThemeDefault::_internal_set_theme_label_background_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.theme_label_background_enabled_ = value;
}
inline void ThemeDefault::set_theme_label_background_enabled(::config::Colour value) {
  _internal_set_theme_label_background_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_background_enabled)
}

// optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
inline bool ThemeDefault::_internal_has_theme_label_background_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_background_disabled() const {
  return _internal_has_theme_label_background_disabled();
}
inline void ThemeDefault::clear_theme_label_background_disabled() {
  _impl_.theme_label_background_disabled_ = 8355711;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_background_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_disabled_);
}
inline ::config::Colour ThemeDefault::theme_label_background_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_background_disabled)
  return _internal_theme_label_background_disabled();
}
inline void ThemeDefault::_internal_set_theme_label_background_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.theme_label_background_disabled_ = value;
}
inline void ThemeDefault::set_theme_label_background_disabled(::config::Colour value) {
  _internal_set_theme_label_background_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_background_disabled)
}

// optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
inline bool ThemeDefault::_internal_has_theme_label_text_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_text_enabled_selected_changing() const {
  return _internal_has_theme_label_text_enabled_selected_changing();
}
inline void ThemeDefault::clear_theme_label_text_enabled_selected_changing() {
  _impl_.theme_label_text_enabled_selected_changing_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_text_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_selected_changing_);
}
inline ::config::Colour ThemeDefault::theme_label_text_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_text_enabled_selected_changing)
  return _internal_theme_label_text_enabled_selected_changing();
}
inline void ThemeDefault::_internal_set_theme_label_text_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.theme_label_text_enabled_selected_changing_ = value;
}
inline void ThemeDefault::set_theme_label_text_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_text_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_text_enabled_selected_changing)
}

// optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
inline bool ThemeDefault::_internal_has_theme_label_text_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_text_enabled_selected() const {
  return _internal_has_theme_label_text_enabled_selected();
}
inline void ThemeDefault::clear_theme_label_text_enabled_selected() {
  _impl_.theme_label_text_enabled_selected_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_text_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_selected_);
}
inline ::config::Colour ThemeDefault::theme_label_text_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_text_enabled_selected)
  return _internal_theme_label_text_enabled_selected();
}
inline void ThemeDefault::_internal_set_theme_label_text_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.theme_label_text_enabled_selected_ = value;
}
inline void ThemeDefault::set_theme_label_text_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_text_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_text_enabled_selected)
}

// optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
inline bool ThemeDefault::_internal_has_theme_label_text_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_text_enabled() const {
  return _internal_has_theme_label_text_enabled();
}
inline void ThemeDefault::clear_theme_label_text_enabled() {
  _impl_.theme_label_text_enabled_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_text_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_);
}
inline ::config::Colour ThemeDefault::theme_label_text_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_text_enabled)
  return _internal_theme_label_text_enabled();
}
inline void ThemeDefault::_internal_set_theme_label_text_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.theme_label_text_enabled_ = value;
}
inline void ThemeDefault::set_theme_label_text_enabled(::config::Colour value) {
  _internal_set_theme_label_text_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_text_enabled)
}

// optional .config.Colour theme_label_text_disabled = 11 [default = kColourWhite];
inline bool ThemeDefault::_internal_has_theme_label_text_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_text_disabled() const {
  return _internal_has_theme_label_text_disabled();
}
inline void ThemeDefault::clear_theme_label_text_disabled() {
  _impl_.theme_label_text_disabled_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_text_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_disabled_);
}
inline ::config::Colour ThemeDefault::theme_label_text_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_text_disabled)
  return _internal_theme_label_text_disabled();
}
inline void ThemeDefault::_internal_set_theme_label_text_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.theme_label_text_disabled_ = value;
}
inline void ThemeDefault::set_theme_label_text_disabled(::config::Colour value) {
  _internal_set_theme_label_text_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_text_disabled)
}

// optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourDarkGreen2];
inline bool ThemeDefault::_internal_has_theme_label_border_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_border_enabled_selected_changing() const {
  return _internal_has_theme_label_border_enabled_selected_changing();
}
inline void ThemeDefault::clear_theme_label_border_enabled_selected_changing() {
  _impl_.theme_label_border_enabled_selected_changing_ = 19200;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_border_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_selected_changing_);
}
inline ::config::Colour ThemeDefault::theme_label_border_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_border_enabled_selected_changing)
  return _internal_theme_label_border_enabled_selected_changing();
}
inline void ThemeDefault::_internal_set_theme_label_border_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.theme_label_border_enabled_selected_changing_ = value;
}
inline void ThemeDefault::set_theme_label_border_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_border_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_border_enabled_selected_changing)
}

// optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourYellow];
inline bool ThemeDefault::_internal_has_theme_label_border_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_border_enabled_selected() const {
  return _internal_has_theme_label_border_enabled_selected();
}
inline void ThemeDefault::clear_theme_label_border_enabled_selected() {
  _impl_.theme_label_border_enabled_selected_ = 16776960;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_border_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_selected_);
}
inline ::config::Colour ThemeDefault::theme_label_border_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_border_enabled_selected)
  return _internal_theme_label_border_enabled_selected();
}
inline void ThemeDefault::_internal_set_theme_label_border_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.theme_label_border_enabled_selected_ = value;
}
inline void ThemeDefault::set_theme_label_border_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_border_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_border_enabled_selected)
}

// optional .config.Colour theme_label_border_enabled = 14 [default = kColourDarkGreen2];
inline bool ThemeDefault::_internal_has_theme_label_border_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_border_enabled() const {
  return _internal_has_theme_label_border_enabled();
}
inline void ThemeDefault::clear_theme_label_border_enabled() {
  _impl_.theme_label_border_enabled_ = 19200;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_border_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_);
}
inline ::config::Colour ThemeDefault::theme_label_border_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_border_enabled)
  return _internal_theme_label_border_enabled();
}
inline void ThemeDefault::_internal_set_theme_label_border_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.theme_label_border_enabled_ = value;
}
inline void ThemeDefault::set_theme_label_border_enabled(::config::Colour value) {
  _internal_set_theme_label_border_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_border_enabled)
}

// optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
inline bool ThemeDefault::_internal_has_theme_label_border_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_border_disabled() const {
  return _internal_has_theme_label_border_disabled();
}
inline void ThemeDefault::clear_theme_label_border_disabled() {
  _impl_.theme_label_border_disabled_ = 4210752;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_label_border_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_disabled_);
}
inline ::config::Colour ThemeDefault::theme_label_border_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_border_disabled)
  return _internal_theme_label_border_disabled();
}
inline void ThemeDefault::_internal_set_theme_label_border_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.theme_label_border_disabled_ = value;
}
inline void ThemeDefault::set_theme_label_border_disabled(::config::Colour value) {
  _internal_set_theme_label_border_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_border_disabled)
}

// optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
inline bool ThemeDefault::_internal_has_theme_label_line_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_line_enabled_selected_changing() const {
  return _internal_has_theme_label_line_enabled_selected_changing();
}
inline void ThemeDefault::clear_theme_label_line_enabled_selected_changing() {
  _impl_.theme_label_line_enabled_selected_changing_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::config::LineStyle ThemeDefault::_internal_theme_label_line_enabled_selected_changing() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_selected_changing_);
}
inline ::config::LineStyle ThemeDefault::theme_label_line_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_line_enabled_selected_changing)
  return _internal_theme_label_line_enabled_selected_changing();
}
inline void ThemeDefault::_internal_set_theme_label_line_enabled_selected_changing(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.theme_label_line_enabled_selected_changing_ = value;
}
inline void ThemeDefault::set_theme_label_line_enabled_selected_changing(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_line_enabled_selected_changing)
}

// optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
inline bool ThemeDefault::_internal_has_theme_label_line_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_line_enabled_selected() const {
  return _internal_has_theme_label_line_enabled_selected();
}
inline void ThemeDefault::clear_theme_label_line_enabled_selected() {
  _impl_.theme_label_line_enabled_selected_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::config::LineStyle ThemeDefault::_internal_theme_label_line_enabled_selected() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_selected_);
}
inline ::config::LineStyle ThemeDefault::theme_label_line_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_line_enabled_selected)
  return _internal_theme_label_line_enabled_selected();
}
inline void ThemeDefault::_internal_set_theme_label_line_enabled_selected(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.theme_label_line_enabled_selected_ = value;
}
inline void ThemeDefault::set_theme_label_line_enabled_selected(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_line_enabled_selected)
}

// optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
inline bool ThemeDefault::_internal_has_theme_label_line_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_line_enabled() const {
  return _internal_has_theme_label_line_enabled();
}
inline void ThemeDefault::clear_theme_label_line_enabled() {
  _impl_.theme_label_line_enabled_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::config::LineStyle ThemeDefault::_internal_theme_label_line_enabled() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_);
}
inline ::config::LineStyle ThemeDefault::theme_label_line_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_line_enabled)
  return _internal_theme_label_line_enabled();
}
inline void ThemeDefault::_internal_set_theme_label_line_enabled(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.theme_label_line_enabled_ = value;
}
inline void ThemeDefault::set_theme_label_line_enabled(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_line_enabled)
}

// optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineSolid];
inline bool ThemeDefault::_internal_has_theme_label_line_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_line_disabled() const {
  return _internal_has_theme_label_line_disabled();
}
inline void ThemeDefault::clear_theme_label_line_disabled() {
  _impl_.theme_label_line_disabled_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::config::LineStyle ThemeDefault::_internal_theme_label_line_disabled() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_disabled_);
}
inline ::config::LineStyle ThemeDefault::theme_label_line_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_line_disabled)
  return _internal_theme_label_line_disabled();
}
inline void ThemeDefault::_internal_set_theme_label_line_disabled(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.theme_label_line_disabled_ = value;
}
inline void ThemeDefault::set_theme_label_line_disabled(::config::LineStyle value) {
  _internal_set_theme_label_line_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_line_disabled)
}

// optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicArrowWithSight];
inline bool ThemeDefault::_internal_has_widget_ppi_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ThemeDefault::has_widget_ppi_style() const {
  return _internal_has_widget_ppi_style();
}
inline void ThemeDefault::clear_widget_ppi_style() {
  _impl_.widget_ppi_style_ = 3;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::config::PpiStyle ThemeDefault::_internal_widget_ppi_style() const {
  return static_cast< ::config::PpiStyle >(_impl_.widget_ppi_style_);
}
inline ::config::PpiStyle ThemeDefault::widget_ppi_style() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.widget_ppi_style)
  return _internal_widget_ppi_style();
}
inline void ThemeDefault::_internal_set_widget_ppi_style(::config::PpiStyle value) {
  assert(::config::PpiStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.widget_ppi_style_ = value;
}
inline void ThemeDefault::set_widget_ppi_style(::config::PpiStyle value) {
  _internal_set_widget_ppi_style(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.widget_ppi_style)
}

// optional int32 theme_label_border_thickness = 21 [default = 1];
inline bool ThemeDefault::_internal_has_theme_label_border_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_label_border_thickness() const {
  return _internal_has_theme_label_border_thickness();
}
inline void ThemeDefault::clear_theme_label_border_thickness() {
  _impl_.theme_label_border_thickness_ = 1;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline int32_t ThemeDefault::_internal_theme_label_border_thickness() const {
  return _impl_.theme_label_border_thickness_;
}
inline int32_t ThemeDefault::theme_label_border_thickness() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_label_border_thickness)
  return _internal_theme_label_border_thickness();
}
inline void ThemeDefault::_internal_set_theme_label_border_thickness(int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.theme_label_border_thickness_ = value;
}
inline void ThemeDefault::set_theme_label_border_thickness(int32_t value) {
  _internal_set_theme_label_border_thickness(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_label_border_thickness)
}

// optional int32 theme_table_border_thickness = 22 [default = 1];
inline bool ThemeDefault::_internal_has_theme_table_border_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_table_border_thickness() const {
  return _internal_has_theme_table_border_thickness();
}
inline void ThemeDefault::clear_theme_table_border_thickness() {
  _impl_.theme_table_border_thickness_ = 1;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int32_t ThemeDefault::_internal_theme_table_border_thickness() const {
  return _impl_.theme_table_border_thickness_;
}
inline int32_t ThemeDefault::theme_table_border_thickness() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_table_border_thickness)
  return _internal_theme_table_border_thickness();
}
inline void ThemeDefault::_internal_set_theme_table_border_thickness(int32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.theme_table_border_thickness_ = value;
}
inline void ThemeDefault::set_theme_table_border_thickness(int32_t value) {
  _internal_set_theme_table_border_thickness(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_table_border_thickness)
}

// optional .config.Colour theme_status_background = 23 [default = kColourDarkGreen];
inline bool ThemeDefault::_internal_has_theme_status_background() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_status_background() const {
  return _internal_has_theme_status_background();
}
inline void ThemeDefault::clear_theme_status_background() {
  _impl_.theme_status_background_ = 32512;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_status_background() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_background_);
}
inline ::config::Colour ThemeDefault::theme_status_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_status_background)
  return _internal_theme_status_background();
}
inline void ThemeDefault::_internal_set_theme_status_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.theme_status_background_ = value;
}
inline void ThemeDefault::set_theme_status_background(::config::Colour value) {
  _internal_set_theme_status_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_status_background)
}

// optional .config.Colour theme_status_border = 24 [default = kColourDarkGreen];
inline bool ThemeDefault::_internal_has_theme_status_border() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_status_border() const {
  return _internal_has_theme_status_border();
}
inline void ThemeDefault::clear_theme_status_border() {
  _impl_.theme_status_border_ = 32512;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_status_border() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_border_);
}
inline ::config::Colour ThemeDefault::theme_status_border() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_status_border)
  return _internal_theme_status_border();
}
inline void ThemeDefault::_internal_set_theme_status_border(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.theme_status_border_ = value;
}
inline void ThemeDefault::set_theme_status_border(::config::Colour value) {
  _internal_set_theme_status_border(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_status_border)
}

// optional .config.Colour theme_status_text = 25 [default = kColourWhite];
inline bool ThemeDefault::_internal_has_theme_status_text() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_status_text() const {
  return _internal_has_theme_status_text();
}
inline void ThemeDefault::clear_theme_status_text() {
  _impl_.theme_status_text_ = 16777215;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_status_text() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_text_);
}
inline ::config::Colour ThemeDefault::theme_status_text() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_status_text)
  return _internal_theme_status_text();
}
inline void ThemeDefault::_internal_set_theme_status_text(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.theme_status_text_ = value;
}
inline void ThemeDefault::set_theme_status_text(::config::Colour value) {
  _internal_set_theme_status_text(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_status_text)
}

// optional .config.Colour theme_alert = 26 [default = kColourAmber];
inline bool ThemeDefault::_internal_has_theme_alert() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_alert() const {
  return _internal_has_theme_alert();
}
inline void ThemeDefault::clear_theme_alert() {
  _impl_.theme_alert_ = 16750848;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::config::Colour ThemeDefault::_internal_theme_alert() const {
  return static_cast< ::config::Colour >(_impl_.theme_alert_);
}
inline ::config::Colour ThemeDefault::theme_alert() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_alert)
  return _internal_theme_alert();
}
inline void ThemeDefault::_internal_set_theme_alert(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.theme_alert_ = value;
}
inline void ThemeDefault::set_theme_alert(::config::Colour value) {
  _internal_set_theme_alert(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_alert)
}

// optional .config.Colour theme_critical = 27 [default = kColourRed];
inline bool ThemeDefault::_internal_has_theme_critical() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_critical() const {
  return _internal_has_theme_critical();
}
inline void ThemeDefault::clear_theme_critical() {
  _impl_.theme_critical_ = 16711680;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::config::Colour ThemeDefault::_internal_theme_critical() const {
  return static_cast< ::config::Colour >(_impl_.theme_critical_);
}
inline ::config::Colour ThemeDefault::theme_critical() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_critical)
  return _internal_theme_critical();
}
inline void ThemeDefault::_internal_set_theme_critical(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.theme_critical_ = value;
}
inline void ThemeDefault::set_theme_critical(::config::Colour value) {
  _internal_set_theme_critical(value);
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_critical)
}

// optional string theme_font = 28 [default = "DejaVu Sans Mono Book"];
inline bool ThemeDefault::_internal_has_theme_font() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeDefault::has_theme_font() const {
  return _internal_has_theme_font();
}
inline void ThemeDefault::clear_theme_font() {
  _impl_.theme_font_.ClearToDefault(::config::ThemeDefault::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeDefault::theme_font() const {
  // @@protoc_insertion_point(field_get:config.ThemeDefault.theme_font)
  if (_impl_.theme_font_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_theme_font_.get();
  return _internal_theme_font();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThemeDefault::set_theme_font(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.theme_font_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.ThemeDefault.theme_font)
}
inline std::string* ThemeDefault::mutable_theme_font() {
  std::string* _s = _internal_mutable_theme_font();
  // @@protoc_insertion_point(field_mutable:config.ThemeDefault.theme_font)
  return _s;
}
inline const std::string& ThemeDefault::_internal_theme_font() const {
  return _impl_.theme_font_.Get();
}
inline void ThemeDefault::_internal_set_theme_font(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_font_.Set(value, GetArenaForAllocation());
}
inline std::string* ThemeDefault::_internal_mutable_theme_font() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.theme_font_.Mutable(::config::ThemeDefault::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
}
inline std::string* ThemeDefault::release_theme_font() {
  // @@protoc_insertion_point(field_release:config.ThemeDefault.theme_font)
  if (!_internal_has_theme_font()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.theme_font_.Release();
  return p;
}
inline void ThemeDefault::set_allocated_theme_font(std::string* theme_font) {
  if (theme_font != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_font_.SetAllocated(theme_font, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.ThemeDefault.theme_font)
}

// -------------------------------------------------------------------

// ThemeHighContrast

// optional .config.Colour theme_background = 1 [default = kColourBlack];
inline bool ThemeHighContrast::_internal_has_theme_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_background() const {
  return _internal_has_theme_background();
}
inline void ThemeHighContrast::clear_theme_background() {
  _impl_.theme_background_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_background() const {
  return static_cast< ::config::Colour >(_impl_.theme_background_);
}
inline ::config::Colour ThemeHighContrast::theme_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_background)
  return _internal_theme_background();
}
inline void ThemeHighContrast::_internal_set_theme_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.theme_background_ = value;
}
inline void ThemeHighContrast::set_theme_background(::config::Colour value) {
  _internal_set_theme_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_background)
}

// optional .config.Colour table_background = 2 [default = kColourBlack];
inline bool ThemeHighContrast::_internal_has_table_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_table_background() const {
  return _internal_has_table_background();
}
inline void ThemeHighContrast::clear_table_background() {
  _impl_.table_background_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::config::Colour ThemeHighContrast::_internal_table_background() const {
  return static_cast< ::config::Colour >(_impl_.table_background_);
}
inline ::config::Colour ThemeHighContrast::table_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.table_background)
  return _internal_table_background();
}
inline void ThemeHighContrast::_internal_set_table_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.table_background_ = value;
}
inline void ThemeHighContrast::set_table_background(::config::Colour value) {
  _internal_set_table_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.table_background)
}

// optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
inline bool ThemeHighContrast::_internal_has_theme_label_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_style() const {
  return _internal_has_theme_label_style();
}
inline void ThemeHighContrast::clear_theme_label_style() {
  _impl_.theme_label_style_ = 1;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::config::LabelStyle ThemeHighContrast::_internal_theme_label_style() const {
  return static_cast< ::config::LabelStyle >(_impl_.theme_label_style_);
}
inline ::config::LabelStyle ThemeHighContrast::theme_label_style() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_style)
  return _internal_theme_label_style();
}
inline void ThemeHighContrast::_internal_set_theme_label_style(::config::LabelStyle value) {
  assert(::config::LabelStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.theme_label_style_ = value;
}
inline void ThemeHighContrast::set_theme_label_style(::config::LabelStyle value) {
  _internal_set_theme_label_style(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_style)
}

// optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourBlack];
inline bool ThemeHighContrast::_internal_has_theme_label_background_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_background_enabled_selected_changing() const {
  return _internal_has_theme_label_background_enabled_selected_changing();
}
inline void ThemeHighContrast::clear_theme_label_background_enabled_selected_changing() {
  _impl_.theme_label_background_enabled_selected_changing_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_background_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_selected_changing_);
}
inline ::config::Colour ThemeHighContrast::theme_label_background_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_background_enabled_selected_changing)
  return _internal_theme_label_background_enabled_selected_changing();
}
inline void ThemeHighContrast::_internal_set_theme_label_background_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.theme_label_background_enabled_selected_changing_ = value;
}
inline void ThemeHighContrast::set_theme_label_background_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_background_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_background_enabled_selected_changing)
}

// optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourBlack];
inline bool ThemeHighContrast::_internal_has_theme_label_background_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_background_enabled_selected() const {
  return _internal_has_theme_label_background_enabled_selected();
}
inline void ThemeHighContrast::clear_theme_label_background_enabled_selected() {
  _impl_.theme_label_background_enabled_selected_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_background_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_selected_);
}
inline ::config::Colour ThemeHighContrast::theme_label_background_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_background_enabled_selected)
  return _internal_theme_label_background_enabled_selected();
}
inline void ThemeHighContrast::_internal_set_theme_label_background_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.theme_label_background_enabled_selected_ = value;
}
inline void ThemeHighContrast::set_theme_label_background_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_background_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_background_enabled_selected)
}

// optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
inline bool ThemeHighContrast::_internal_has_theme_label_background_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_background_enabled() const {
  return _internal_has_theme_label_background_enabled();
}
inline void ThemeHighContrast::clear_theme_label_background_enabled() {
  _impl_.theme_label_background_enabled_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_background_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_);
}
inline ::config::Colour ThemeHighContrast::theme_label_background_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_background_enabled)
  return _internal_theme_label_background_enabled();
}
inline void ThemeHighContrast::_internal_set_theme_label_background_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.theme_label_background_enabled_ = value;
}
inline void ThemeHighContrast::set_theme_label_background_enabled(::config::Colour value) {
  _internal_set_theme_label_background_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_background_enabled)
}

// optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
inline bool ThemeHighContrast::_internal_has_theme_label_background_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_background_disabled() const {
  return _internal_has_theme_label_background_disabled();
}
inline void ThemeHighContrast::clear_theme_label_background_disabled() {
  _impl_.theme_label_background_disabled_ = 8355711;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_background_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_disabled_);
}
inline ::config::Colour ThemeHighContrast::theme_label_background_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_background_disabled)
  return _internal_theme_label_background_disabled();
}
inline void ThemeHighContrast::_internal_set_theme_label_background_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.theme_label_background_disabled_ = value;
}
inline void ThemeHighContrast::set_theme_label_background_disabled(::config::Colour value) {
  _internal_set_theme_label_background_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_background_disabled)
}

// optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
inline bool ThemeHighContrast::_internal_has_theme_label_text_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_text_enabled_selected_changing() const {
  return _internal_has_theme_label_text_enabled_selected_changing();
}
inline void ThemeHighContrast::clear_theme_label_text_enabled_selected_changing() {
  _impl_.theme_label_text_enabled_selected_changing_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_text_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_selected_changing_);
}
inline ::config::Colour ThemeHighContrast::theme_label_text_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_text_enabled_selected_changing)
  return _internal_theme_label_text_enabled_selected_changing();
}
inline void ThemeHighContrast::_internal_set_theme_label_text_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.theme_label_text_enabled_selected_changing_ = value;
}
inline void ThemeHighContrast::set_theme_label_text_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_text_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_text_enabled_selected_changing)
}

// optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
inline bool ThemeHighContrast::_internal_has_theme_label_text_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_text_enabled_selected() const {
  return _internal_has_theme_label_text_enabled_selected();
}
inline void ThemeHighContrast::clear_theme_label_text_enabled_selected() {
  _impl_.theme_label_text_enabled_selected_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_text_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_selected_);
}
inline ::config::Colour ThemeHighContrast::theme_label_text_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_text_enabled_selected)
  return _internal_theme_label_text_enabled_selected();
}
inline void ThemeHighContrast::_internal_set_theme_label_text_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.theme_label_text_enabled_selected_ = value;
}
inline void ThemeHighContrast::set_theme_label_text_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_text_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_text_enabled_selected)
}

// optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
inline bool ThemeHighContrast::_internal_has_theme_label_text_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_text_enabled() const {
  return _internal_has_theme_label_text_enabled();
}
inline void ThemeHighContrast::clear_theme_label_text_enabled() {
  _impl_.theme_label_text_enabled_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_text_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_);
}
inline ::config::Colour ThemeHighContrast::theme_label_text_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_text_enabled)
  return _internal_theme_label_text_enabled();
}
inline void ThemeHighContrast::_internal_set_theme_label_text_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.theme_label_text_enabled_ = value;
}
inline void ThemeHighContrast::set_theme_label_text_enabled(::config::Colour value) {
  _internal_set_theme_label_text_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_text_enabled)
}

// optional .config.Colour theme_label_text_disabled = 11 [default = kColourBlack];
inline bool ThemeHighContrast::_internal_has_theme_label_text_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_text_disabled() const {
  return _internal_has_theme_label_text_disabled();
}
inline void ThemeHighContrast::clear_theme_label_text_disabled() {
  _impl_.theme_label_text_disabled_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_text_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_disabled_);
}
inline ::config::Colour ThemeHighContrast::theme_label_text_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_text_disabled)
  return _internal_theme_label_text_disabled();
}
inline void ThemeHighContrast::_internal_set_theme_label_text_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.theme_label_text_disabled_ = value;
}
inline void ThemeHighContrast::set_theme_label_text_disabled(::config::Colour value) {
  _internal_set_theme_label_text_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_text_disabled)
}

// optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourGrey];
inline bool ThemeHighContrast::_internal_has_theme_label_border_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_border_enabled_selected_changing() const {
  return _internal_has_theme_label_border_enabled_selected_changing();
}
inline void ThemeHighContrast::clear_theme_label_border_enabled_selected_changing() {
  _impl_.theme_label_border_enabled_selected_changing_ = 8355711;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_border_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_selected_changing_);
}
inline ::config::Colour ThemeHighContrast::theme_label_border_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_border_enabled_selected_changing)
  return _internal_theme_label_border_enabled_selected_changing();
}
inline void ThemeHighContrast::_internal_set_theme_label_border_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.theme_label_border_enabled_selected_changing_ = value;
}
inline void ThemeHighContrast::set_theme_label_border_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_border_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_border_enabled_selected_changing)
}

// optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourGrey];
inline bool ThemeHighContrast::_internal_has_theme_label_border_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_border_enabled_selected() const {
  return _internal_has_theme_label_border_enabled_selected();
}
inline void ThemeHighContrast::clear_theme_label_border_enabled_selected() {
  _impl_.theme_label_border_enabled_selected_ = 8355711;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_border_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_selected_);
}
inline ::config::Colour ThemeHighContrast::theme_label_border_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_border_enabled_selected)
  return _internal_theme_label_border_enabled_selected();
}
inline void ThemeHighContrast::_internal_set_theme_label_border_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.theme_label_border_enabled_selected_ = value;
}
inline void ThemeHighContrast::set_theme_label_border_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_border_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_border_enabled_selected)
}

// optional .config.Colour theme_label_border_enabled = 14 [default = kColourWhite];
inline bool ThemeHighContrast::_internal_has_theme_label_border_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_border_enabled() const {
  return _internal_has_theme_label_border_enabled();
}
inline void ThemeHighContrast::clear_theme_label_border_enabled() {
  _impl_.theme_label_border_enabled_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_border_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_);
}
inline ::config::Colour ThemeHighContrast::theme_label_border_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_border_enabled)
  return _internal_theme_label_border_enabled();
}
inline void ThemeHighContrast::_internal_set_theme_label_border_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.theme_label_border_enabled_ = value;
}
inline void ThemeHighContrast::set_theme_label_border_enabled(::config::Colour value) {
  _internal_set_theme_label_border_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_border_enabled)
}

// optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
inline bool ThemeHighContrast::_internal_has_theme_label_border_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_border_disabled() const {
  return _internal_has_theme_label_border_disabled();
}
inline void ThemeHighContrast::clear_theme_label_border_disabled() {
  _impl_.theme_label_border_disabled_ = 4210752;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_label_border_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_disabled_);
}
inline ::config::Colour ThemeHighContrast::theme_label_border_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_border_disabled)
  return _internal_theme_label_border_disabled();
}
inline void ThemeHighContrast::_internal_set_theme_label_border_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.theme_label_border_disabled_ = value;
}
inline void ThemeHighContrast::set_theme_label_border_disabled(::config::Colour value) {
  _internal_set_theme_label_border_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_border_disabled)
}

// optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
inline bool ThemeHighContrast::_internal_has_theme_label_line_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_line_enabled_selected_changing() const {
  return _internal_has_theme_label_line_enabled_selected_changing();
}
inline void ThemeHighContrast::clear_theme_label_line_enabled_selected_changing() {
  _impl_.theme_label_line_enabled_selected_changing_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::config::LineStyle ThemeHighContrast::_internal_theme_label_line_enabled_selected_changing() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_selected_changing_);
}
inline ::config::LineStyle ThemeHighContrast::theme_label_line_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_line_enabled_selected_changing)
  return _internal_theme_label_line_enabled_selected_changing();
}
inline void ThemeHighContrast::_internal_set_theme_label_line_enabled_selected_changing(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.theme_label_line_enabled_selected_changing_ = value;
}
inline void ThemeHighContrast::set_theme_label_line_enabled_selected_changing(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_line_enabled_selected_changing)
}

// optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
inline bool ThemeHighContrast::_internal_has_theme_label_line_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_line_enabled_selected() const {
  return _internal_has_theme_label_line_enabled_selected();
}
inline void ThemeHighContrast::clear_theme_label_line_enabled_selected() {
  _impl_.theme_label_line_enabled_selected_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::config::LineStyle ThemeHighContrast::_internal_theme_label_line_enabled_selected() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_selected_);
}
inline ::config::LineStyle ThemeHighContrast::theme_label_line_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_line_enabled_selected)
  return _internal_theme_label_line_enabled_selected();
}
inline void ThemeHighContrast::_internal_set_theme_label_line_enabled_selected(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.theme_label_line_enabled_selected_ = value;
}
inline void ThemeHighContrast::set_theme_label_line_enabled_selected(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_line_enabled_selected)
}

// optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
inline bool ThemeHighContrast::_internal_has_theme_label_line_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_line_enabled() const {
  return _internal_has_theme_label_line_enabled();
}
inline void ThemeHighContrast::clear_theme_label_line_enabled() {
  _impl_.theme_label_line_enabled_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::config::LineStyle ThemeHighContrast::_internal_theme_label_line_enabled() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_);
}
inline ::config::LineStyle ThemeHighContrast::theme_label_line_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_line_enabled)
  return _internal_theme_label_line_enabled();
}
inline void ThemeHighContrast::_internal_set_theme_label_line_enabled(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.theme_label_line_enabled_ = value;
}
inline void ThemeHighContrast::set_theme_label_line_enabled(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_line_enabled)
}

// optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
inline bool ThemeHighContrast::_internal_has_theme_label_line_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_line_disabled() const {
  return _internal_has_theme_label_line_disabled();
}
inline void ThemeHighContrast::clear_theme_label_line_disabled() {
  _impl_.theme_label_line_disabled_ = 1;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::config::LineStyle ThemeHighContrast::_internal_theme_label_line_disabled() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_disabled_);
}
inline ::config::LineStyle ThemeHighContrast::theme_label_line_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_line_disabled)
  return _internal_theme_label_line_disabled();
}
inline void ThemeHighContrast::_internal_set_theme_label_line_disabled(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.theme_label_line_disabled_ = value;
}
inline void ThemeHighContrast::set_theme_label_line_disabled(::config::LineStyle value) {
  _internal_set_theme_label_line_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_line_disabled)
}

// optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicTankWithSight];
inline bool ThemeHighContrast::_internal_has_widget_ppi_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_widget_ppi_style() const {
  return _internal_has_widget_ppi_style();
}
inline void ThemeHighContrast::clear_widget_ppi_style() {
  _impl_.widget_ppi_style_ = 1;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::config::PpiStyle ThemeHighContrast::_internal_widget_ppi_style() const {
  return static_cast< ::config::PpiStyle >(_impl_.widget_ppi_style_);
}
inline ::config::PpiStyle ThemeHighContrast::widget_ppi_style() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.widget_ppi_style)
  return _internal_widget_ppi_style();
}
inline void ThemeHighContrast::_internal_set_widget_ppi_style(::config::PpiStyle value) {
  assert(::config::PpiStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.widget_ppi_style_ = value;
}
inline void ThemeHighContrast::set_widget_ppi_style(::config::PpiStyle value) {
  _internal_set_widget_ppi_style(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.widget_ppi_style)
}

// optional int32 theme_label_border_thickness = 21 [default = 1];
inline bool ThemeHighContrast::_internal_has_theme_label_border_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_label_border_thickness() const {
  return _internal_has_theme_label_border_thickness();
}
inline void ThemeHighContrast::clear_theme_label_border_thickness() {
  _impl_.theme_label_border_thickness_ = 1;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int32_t ThemeHighContrast::_internal_theme_label_border_thickness() const {
  return _impl_.theme_label_border_thickness_;
}
inline int32_t ThemeHighContrast::theme_label_border_thickness() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_label_border_thickness)
  return _internal_theme_label_border_thickness();
}
inline void ThemeHighContrast::_internal_set_theme_label_border_thickness(int32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.theme_label_border_thickness_ = value;
}
inline void ThemeHighContrast::set_theme_label_border_thickness(int32_t value) {
  _internal_set_theme_label_border_thickness(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_label_border_thickness)
}

// optional int32 theme_table_border_thickness = 22 [default = 1];
inline bool ThemeHighContrast::_internal_has_theme_table_border_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_table_border_thickness() const {
  return _internal_has_theme_table_border_thickness();
}
inline void ThemeHighContrast::clear_theme_table_border_thickness() {
  _impl_.theme_table_border_thickness_ = 1;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int32_t ThemeHighContrast::_internal_theme_table_border_thickness() const {
  return _impl_.theme_table_border_thickness_;
}
inline int32_t ThemeHighContrast::theme_table_border_thickness() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_table_border_thickness)
  return _internal_theme_table_border_thickness();
}
inline void ThemeHighContrast::_internal_set_theme_table_border_thickness(int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.theme_table_border_thickness_ = value;
}
inline void ThemeHighContrast::set_theme_table_border_thickness(int32_t value) {
  _internal_set_theme_table_border_thickness(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_table_border_thickness)
}

// optional .config.Colour theme_status_background = 23 [default = kColourBlack];
inline bool ThemeHighContrast::_internal_has_theme_status_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_status_background() const {
  return _internal_has_theme_status_background();
}
inline void ThemeHighContrast::clear_theme_status_background() {
  _impl_.theme_status_background_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_status_background() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_background_);
}
inline ::config::Colour ThemeHighContrast::theme_status_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_status_background)
  return _internal_theme_status_background();
}
inline void ThemeHighContrast::_internal_set_theme_status_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.theme_status_background_ = value;
}
inline void ThemeHighContrast::set_theme_status_background(::config::Colour value) {
  _internal_set_theme_status_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_status_background)
}

// optional .config.Colour theme_status_border = 24 [default = kColourBlack];
inline bool ThemeHighContrast::_internal_has_theme_status_border() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_status_border() const {
  return _internal_has_theme_status_border();
}
inline void ThemeHighContrast::clear_theme_status_border() {
  _impl_.theme_status_border_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_status_border() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_border_);
}
inline ::config::Colour ThemeHighContrast::theme_status_border() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_status_border)
  return _internal_theme_status_border();
}
inline void ThemeHighContrast::_internal_set_theme_status_border(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.theme_status_border_ = value;
}
inline void ThemeHighContrast::set_theme_status_border(::config::Colour value) {
  _internal_set_theme_status_border(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_status_border)
}

// optional .config.Colour theme_status_text = 25 [default = kColourWhite];
inline bool ThemeHighContrast::_internal_has_theme_status_text() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_status_text() const {
  return _internal_has_theme_status_text();
}
inline void ThemeHighContrast::clear_theme_status_text() {
  _impl_.theme_status_text_ = 16777215;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_status_text() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_text_);
}
inline ::config::Colour ThemeHighContrast::theme_status_text() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_status_text)
  return _internal_theme_status_text();
}
inline void ThemeHighContrast::_internal_set_theme_status_text(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.theme_status_text_ = value;
}
inline void ThemeHighContrast::set_theme_status_text(::config::Colour value) {
  _internal_set_theme_status_text(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_status_text)
}

// optional .config.Colour theme_alert = 26 [default = kColourAmber];
inline bool ThemeHighContrast::_internal_has_theme_alert() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_alert() const {
  return _internal_has_theme_alert();
}
inline void ThemeHighContrast::clear_theme_alert() {
  _impl_.theme_alert_ = 16750848;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_alert() const {
  return static_cast< ::config::Colour >(_impl_.theme_alert_);
}
inline ::config::Colour ThemeHighContrast::theme_alert() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_alert)
  return _internal_theme_alert();
}
inline void ThemeHighContrast::_internal_set_theme_alert(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.theme_alert_ = value;
}
inline void ThemeHighContrast::set_theme_alert(::config::Colour value) {
  _internal_set_theme_alert(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_alert)
}

// optional .config.Colour theme_critical = 27 [default = kColourRed];
inline bool ThemeHighContrast::_internal_has_theme_critical() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_critical() const {
  return _internal_has_theme_critical();
}
inline void ThemeHighContrast::clear_theme_critical() {
  _impl_.theme_critical_ = 16711680;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::config::Colour ThemeHighContrast::_internal_theme_critical() const {
  return static_cast< ::config::Colour >(_impl_.theme_critical_);
}
inline ::config::Colour ThemeHighContrast::theme_critical() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_critical)
  return _internal_theme_critical();
}
inline void ThemeHighContrast::_internal_set_theme_critical(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.theme_critical_ = value;
}
inline void ThemeHighContrast::set_theme_critical(::config::Colour value) {
  _internal_set_theme_critical(value);
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_critical)
}

// optional string theme_font = 28 [default = "Courier 10 Pitch"];
inline bool ThemeHighContrast::_internal_has_theme_font() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeHighContrast::has_theme_font() const {
  return _internal_has_theme_font();
}
inline void ThemeHighContrast::clear_theme_font() {
  _impl_.theme_font_.ClearToDefault(::config::ThemeHighContrast::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeHighContrast::theme_font() const {
  // @@protoc_insertion_point(field_get:config.ThemeHighContrast.theme_font)
  if (_impl_.theme_font_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_theme_font_.get();
  return _internal_theme_font();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThemeHighContrast::set_theme_font(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.theme_font_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.ThemeHighContrast.theme_font)
}
inline std::string* ThemeHighContrast::mutable_theme_font() {
  std::string* _s = _internal_mutable_theme_font();
  // @@protoc_insertion_point(field_mutable:config.ThemeHighContrast.theme_font)
  return _s;
}
inline const std::string& ThemeHighContrast::_internal_theme_font() const {
  return _impl_.theme_font_.Get();
}
inline void ThemeHighContrast::_internal_set_theme_font(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_font_.Set(value, GetArenaForAllocation());
}
inline std::string* ThemeHighContrast::_internal_mutable_theme_font() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.theme_font_.Mutable(::config::ThemeHighContrast::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
}
inline std::string* ThemeHighContrast::release_theme_font() {
  // @@protoc_insertion_point(field_release:config.ThemeHighContrast.theme_font)
  if (!_internal_has_theme_font()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.theme_font_.Release();
  return p;
}
inline void ThemeHighContrast::set_allocated_theme_font(std::string* theme_font) {
  if (theme_font != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_font_.SetAllocated(theme_font, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.ThemeHighContrast.theme_font)
}

// -------------------------------------------------------------------

// ThemeModernBlue

// optional .config.Colour theme_background = 1 [default = kColourBlack];
inline bool ThemeModernBlue::_internal_has_theme_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_background() const {
  return _internal_has_theme_background();
}
inline void ThemeModernBlue::clear_theme_background() {
  _impl_.theme_background_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_background() const {
  return static_cast< ::config::Colour >(_impl_.theme_background_);
}
inline ::config::Colour ThemeModernBlue::theme_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_background)
  return _internal_theme_background();
}
inline void ThemeModernBlue::_internal_set_theme_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.theme_background_ = value;
}
inline void ThemeModernBlue::set_theme_background(::config::Colour value) {
  _internal_set_theme_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_background)
}

// optional .config.Colour table_background = 2 [default = kColourBlack];
inline bool ThemeModernBlue::_internal_has_table_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_table_background() const {
  return _internal_has_table_background();
}
inline void ThemeModernBlue::clear_table_background() {
  _impl_.table_background_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::config::Colour ThemeModernBlue::_internal_table_background() const {
  return static_cast< ::config::Colour >(_impl_.table_background_);
}
inline ::config::Colour ThemeModernBlue::table_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.table_background)
  return _internal_table_background();
}
inline void ThemeModernBlue::_internal_set_table_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.table_background_ = value;
}
inline void ThemeModernBlue::set_table_background(::config::Colour value) {
  _internal_set_table_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.table_background)
}

// optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
inline bool ThemeModernBlue::_internal_has_theme_label_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_style() const {
  return _internal_has_theme_label_style();
}
inline void ThemeModernBlue::clear_theme_label_style() {
  _impl_.theme_label_style_ = 1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::config::LabelStyle ThemeModernBlue::_internal_theme_label_style() const {
  return static_cast< ::config::LabelStyle >(_impl_.theme_label_style_);
}
inline ::config::LabelStyle ThemeModernBlue::theme_label_style() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_style)
  return _internal_theme_label_style();
}
inline void ThemeModernBlue::_internal_set_theme_label_style(::config::LabelStyle value) {
  assert(::config::LabelStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.theme_label_style_ = value;
}
inline void ThemeModernBlue::set_theme_label_style(::config::LabelStyle value) {
  _internal_set_theme_label_style(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_style)
}

// optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourModernBlueLight];
inline bool ThemeModernBlue::_internal_has_theme_label_background_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_background_enabled_selected_changing() const {
  return _internal_has_theme_label_background_enabled_selected_changing();
}
inline void ThemeModernBlue::clear_theme_label_background_enabled_selected_changing() {
  _impl_.theme_label_background_enabled_selected_changing_ = 32450;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_background_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_selected_changing_);
}
inline ::config::Colour ThemeModernBlue::theme_label_background_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_background_enabled_selected_changing)
  return _internal_theme_label_background_enabled_selected_changing();
}
inline void ThemeModernBlue::_internal_set_theme_label_background_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.theme_label_background_enabled_selected_changing_ = value;
}
inline void ThemeModernBlue::set_theme_label_background_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_background_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_background_enabled_selected_changing)
}

// optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourModernBlueDark];
inline bool ThemeModernBlue::_internal_has_theme_label_background_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_background_enabled_selected() const {
  return _internal_has_theme_label_background_enabled_selected();
}
inline void ThemeModernBlue::clear_theme_label_background_enabled_selected() {
  _impl_.theme_label_background_enabled_selected_ = 1327195;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_background_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_selected_);
}
inline ::config::Colour ThemeModernBlue::theme_label_background_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_background_enabled_selected)
  return _internal_theme_label_background_enabled_selected();
}
inline void ThemeModernBlue::_internal_set_theme_label_background_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.theme_label_background_enabled_selected_ = value;
}
inline void ThemeModernBlue::set_theme_label_background_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_background_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_background_enabled_selected)
}

// optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
inline bool ThemeModernBlue::_internal_has_theme_label_background_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_background_enabled() const {
  return _internal_has_theme_label_background_enabled();
}
inline void ThemeModernBlue::clear_theme_label_background_enabled() {
  _impl_.theme_label_background_enabled_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_background_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_enabled_);
}
inline ::config::Colour ThemeModernBlue::theme_label_background_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_background_enabled)
  return _internal_theme_label_background_enabled();
}
inline void ThemeModernBlue::_internal_set_theme_label_background_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.theme_label_background_enabled_ = value;
}
inline void ThemeModernBlue::set_theme_label_background_enabled(::config::Colour value) {
  _internal_set_theme_label_background_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_background_enabled)
}

// optional .config.Colour theme_label_background_disabled = 7 [default = kColourBlack];
inline bool ThemeModernBlue::_internal_has_theme_label_background_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_background_disabled() const {
  return _internal_has_theme_label_background_disabled();
}
inline void ThemeModernBlue::clear_theme_label_background_disabled() {
  _impl_.theme_label_background_disabled_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_background_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_background_disabled_);
}
inline ::config::Colour ThemeModernBlue::theme_label_background_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_background_disabled)
  return _internal_theme_label_background_disabled();
}
inline void ThemeModernBlue::_internal_set_theme_label_background_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.theme_label_background_disabled_ = value;
}
inline void ThemeModernBlue::set_theme_label_background_disabled(::config::Colour value) {
  _internal_set_theme_label_background_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_background_disabled)
}

// optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
inline bool ThemeModernBlue::_internal_has_theme_label_text_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_text_enabled_selected_changing() const {
  return _internal_has_theme_label_text_enabled_selected_changing();
}
inline void ThemeModernBlue::clear_theme_label_text_enabled_selected_changing() {
  _impl_.theme_label_text_enabled_selected_changing_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_text_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_selected_changing_);
}
inline ::config::Colour ThemeModernBlue::theme_label_text_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_text_enabled_selected_changing)
  return _internal_theme_label_text_enabled_selected_changing();
}
inline void ThemeModernBlue::_internal_set_theme_label_text_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.theme_label_text_enabled_selected_changing_ = value;
}
inline void ThemeModernBlue::set_theme_label_text_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_text_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_text_enabled_selected_changing)
}

// optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
inline bool ThemeModernBlue::_internal_has_theme_label_text_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_text_enabled_selected() const {
  return _internal_has_theme_label_text_enabled_selected();
}
inline void ThemeModernBlue::clear_theme_label_text_enabled_selected() {
  _impl_.theme_label_text_enabled_selected_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_text_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_selected_);
}
inline ::config::Colour ThemeModernBlue::theme_label_text_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_text_enabled_selected)
  return _internal_theme_label_text_enabled_selected();
}
inline void ThemeModernBlue::_internal_set_theme_label_text_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.theme_label_text_enabled_selected_ = value;
}
inline void ThemeModernBlue::set_theme_label_text_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_text_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_text_enabled_selected)
}

// optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
inline bool ThemeModernBlue::_internal_has_theme_label_text_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_text_enabled() const {
  return _internal_has_theme_label_text_enabled();
}
inline void ThemeModernBlue::clear_theme_label_text_enabled() {
  _impl_.theme_label_text_enabled_ = 16777215;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_text_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_enabled_);
}
inline ::config::Colour ThemeModernBlue::theme_label_text_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_text_enabled)
  return _internal_theme_label_text_enabled();
}
inline void ThemeModernBlue::_internal_set_theme_label_text_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.theme_label_text_enabled_ = value;
}
inline void ThemeModernBlue::set_theme_label_text_enabled(::config::Colour value) {
  _internal_set_theme_label_text_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_text_enabled)
}

// optional .config.Colour theme_label_text_disabled = 11 [default = kColourGrey];
inline bool ThemeModernBlue::_internal_has_theme_label_text_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_text_disabled() const {
  return _internal_has_theme_label_text_disabled();
}
inline void ThemeModernBlue::clear_theme_label_text_disabled() {
  _impl_.theme_label_text_disabled_ = 8355711;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_text_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_text_disabled_);
}
inline ::config::Colour ThemeModernBlue::theme_label_text_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_text_disabled)
  return _internal_theme_label_text_disabled();
}
inline void ThemeModernBlue::_internal_set_theme_label_text_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.theme_label_text_disabled_ = value;
}
inline void ThemeModernBlue::set_theme_label_text_disabled(::config::Colour value) {
  _internal_set_theme_label_text_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_text_disabled)
}

// optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourModernBlueDark];
inline bool ThemeModernBlue::_internal_has_theme_label_border_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_border_enabled_selected_changing() const {
  return _internal_has_theme_label_border_enabled_selected_changing();
}
inline void ThemeModernBlue::clear_theme_label_border_enabled_selected_changing() {
  _impl_.theme_label_border_enabled_selected_changing_ = 1327195;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_border_enabled_selected_changing() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_selected_changing_);
}
inline ::config::Colour ThemeModernBlue::theme_label_border_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_border_enabled_selected_changing)
  return _internal_theme_label_border_enabled_selected_changing();
}
inline void ThemeModernBlue::_internal_set_theme_label_border_enabled_selected_changing(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.theme_label_border_enabled_selected_changing_ = value;
}
inline void ThemeModernBlue::set_theme_label_border_enabled_selected_changing(::config::Colour value) {
  _internal_set_theme_label_border_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_border_enabled_selected_changing)
}

// optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourModernBlueLight];
inline bool ThemeModernBlue::_internal_has_theme_label_border_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_border_enabled_selected() const {
  return _internal_has_theme_label_border_enabled_selected();
}
inline void ThemeModernBlue::clear_theme_label_border_enabled_selected() {
  _impl_.theme_label_border_enabled_selected_ = 32450;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_border_enabled_selected() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_selected_);
}
inline ::config::Colour ThemeModernBlue::theme_label_border_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_border_enabled_selected)
  return _internal_theme_label_border_enabled_selected();
}
inline void ThemeModernBlue::_internal_set_theme_label_border_enabled_selected(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.theme_label_border_enabled_selected_ = value;
}
inline void ThemeModernBlue::set_theme_label_border_enabled_selected(::config::Colour value) {
  _internal_set_theme_label_border_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_border_enabled_selected)
}

// optional .config.Colour theme_label_border_enabled = 14 [default = kColourGrey];
inline bool ThemeModernBlue::_internal_has_theme_label_border_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_border_enabled() const {
  return _internal_has_theme_label_border_enabled();
}
inline void ThemeModernBlue::clear_theme_label_border_enabled() {
  _impl_.theme_label_border_enabled_ = 8355711;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_border_enabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_enabled_);
}
inline ::config::Colour ThemeModernBlue::theme_label_border_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_border_enabled)
  return _internal_theme_label_border_enabled();
}
inline void ThemeModernBlue::_internal_set_theme_label_border_enabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.theme_label_border_enabled_ = value;
}
inline void ThemeModernBlue::set_theme_label_border_enabled(::config::Colour value) {
  _internal_set_theme_label_border_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_border_enabled)
}

// optional .config.Colour theme_label_border_disabled = 15 [default = kColourGrey];
inline bool ThemeModernBlue::_internal_has_theme_label_border_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_border_disabled() const {
  return _internal_has_theme_label_border_disabled();
}
inline void ThemeModernBlue::clear_theme_label_border_disabled() {
  _impl_.theme_label_border_disabled_ = 8355711;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_label_border_disabled() const {
  return static_cast< ::config::Colour >(_impl_.theme_label_border_disabled_);
}
inline ::config::Colour ThemeModernBlue::theme_label_border_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_border_disabled)
  return _internal_theme_label_border_disabled();
}
inline void ThemeModernBlue::_internal_set_theme_label_border_disabled(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.theme_label_border_disabled_ = value;
}
inline void ThemeModernBlue::set_theme_label_border_disabled(::config::Colour value) {
  _internal_set_theme_label_border_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_border_disabled)
}

// optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
inline bool ThemeModernBlue::_internal_has_theme_label_line_enabled_selected_changing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_line_enabled_selected_changing() const {
  return _internal_has_theme_label_line_enabled_selected_changing();
}
inline void ThemeModernBlue::clear_theme_label_line_enabled_selected_changing() {
  _impl_.theme_label_line_enabled_selected_changing_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::config::LineStyle ThemeModernBlue::_internal_theme_label_line_enabled_selected_changing() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_selected_changing_);
}
inline ::config::LineStyle ThemeModernBlue::theme_label_line_enabled_selected_changing() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_line_enabled_selected_changing)
  return _internal_theme_label_line_enabled_selected_changing();
}
inline void ThemeModernBlue::_internal_set_theme_label_line_enabled_selected_changing(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.theme_label_line_enabled_selected_changing_ = value;
}
inline void ThemeModernBlue::set_theme_label_line_enabled_selected_changing(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled_selected_changing(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_line_enabled_selected_changing)
}

// optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
inline bool ThemeModernBlue::_internal_has_theme_label_line_enabled_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_line_enabled_selected() const {
  return _internal_has_theme_label_line_enabled_selected();
}
inline void ThemeModernBlue::clear_theme_label_line_enabled_selected() {
  _impl_.theme_label_line_enabled_selected_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::config::LineStyle ThemeModernBlue::_internal_theme_label_line_enabled_selected() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_selected_);
}
inline ::config::LineStyle ThemeModernBlue::theme_label_line_enabled_selected() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_line_enabled_selected)
  return _internal_theme_label_line_enabled_selected();
}
inline void ThemeModernBlue::_internal_set_theme_label_line_enabled_selected(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.theme_label_line_enabled_selected_ = value;
}
inline void ThemeModernBlue::set_theme_label_line_enabled_selected(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled_selected(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_line_enabled_selected)
}

// optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
inline bool ThemeModernBlue::_internal_has_theme_label_line_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_line_enabled() const {
  return _internal_has_theme_label_line_enabled();
}
inline void ThemeModernBlue::clear_theme_label_line_enabled() {
  _impl_.theme_label_line_enabled_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::config::LineStyle ThemeModernBlue::_internal_theme_label_line_enabled() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_enabled_);
}
inline ::config::LineStyle ThemeModernBlue::theme_label_line_enabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_line_enabled)
  return _internal_theme_label_line_enabled();
}
inline void ThemeModernBlue::_internal_set_theme_label_line_enabled(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.theme_label_line_enabled_ = value;
}
inline void ThemeModernBlue::set_theme_label_line_enabled(::config::LineStyle value) {
  _internal_set_theme_label_line_enabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_line_enabled)
}

// optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
inline bool ThemeModernBlue::_internal_has_theme_label_line_disabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_line_disabled() const {
  return _internal_has_theme_label_line_disabled();
}
inline void ThemeModernBlue::clear_theme_label_line_disabled() {
  _impl_.theme_label_line_disabled_ = 1;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::config::LineStyle ThemeModernBlue::_internal_theme_label_line_disabled() const {
  return static_cast< ::config::LineStyle >(_impl_.theme_label_line_disabled_);
}
inline ::config::LineStyle ThemeModernBlue::theme_label_line_disabled() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_line_disabled)
  return _internal_theme_label_line_disabled();
}
inline void ThemeModernBlue::_internal_set_theme_label_line_disabled(::config::LineStyle value) {
  assert(::config::LineStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.theme_label_line_disabled_ = value;
}
inline void ThemeModernBlue::set_theme_label_line_disabled(::config::LineStyle value) {
  _internal_set_theme_label_line_disabled(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_line_disabled)
}

// optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiModernTankWithSights];
inline bool ThemeModernBlue::_internal_has_widget_ppi_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_widget_ppi_style() const {
  return _internal_has_widget_ppi_style();
}
inline void ThemeModernBlue::clear_widget_ppi_style() {
  _impl_.widget_ppi_style_ = 5;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::config::PpiStyle ThemeModernBlue::_internal_widget_ppi_style() const {
  return static_cast< ::config::PpiStyle >(_impl_.widget_ppi_style_);
}
inline ::config::PpiStyle ThemeModernBlue::widget_ppi_style() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.widget_ppi_style)
  return _internal_widget_ppi_style();
}
inline void ThemeModernBlue::_internal_set_widget_ppi_style(::config::PpiStyle value) {
  assert(::config::PpiStyle_IsValid(value));
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.widget_ppi_style_ = value;
}
inline void ThemeModernBlue::set_widget_ppi_style(::config::PpiStyle value) {
  _internal_set_widget_ppi_style(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.widget_ppi_style)
}

// optional int32 theme_label_border_thickness = 21 [default = 1];
inline bool ThemeModernBlue::_internal_has_theme_label_border_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_label_border_thickness() const {
  return _internal_has_theme_label_border_thickness();
}
inline void ThemeModernBlue::clear_theme_label_border_thickness() {
  _impl_.theme_label_border_thickness_ = 1;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int32_t ThemeModernBlue::_internal_theme_label_border_thickness() const {
  return _impl_.theme_label_border_thickness_;
}
inline int32_t ThemeModernBlue::theme_label_border_thickness() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_label_border_thickness)
  return _internal_theme_label_border_thickness();
}
inline void ThemeModernBlue::_internal_set_theme_label_border_thickness(int32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.theme_label_border_thickness_ = value;
}
inline void ThemeModernBlue::set_theme_label_border_thickness(int32_t value) {
  _internal_set_theme_label_border_thickness(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_label_border_thickness)
}

// optional int32 theme_table_border_thickness = 22 [default = 1];
inline bool ThemeModernBlue::_internal_has_theme_table_border_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_table_border_thickness() const {
  return _internal_has_theme_table_border_thickness();
}
inline void ThemeModernBlue::clear_theme_table_border_thickness() {
  _impl_.theme_table_border_thickness_ = 1;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int32_t ThemeModernBlue::_internal_theme_table_border_thickness() const {
  return _impl_.theme_table_border_thickness_;
}
inline int32_t ThemeModernBlue::theme_table_border_thickness() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_table_border_thickness)
  return _internal_theme_table_border_thickness();
}
inline void ThemeModernBlue::_internal_set_theme_table_border_thickness(int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.theme_table_border_thickness_ = value;
}
inline void ThemeModernBlue::set_theme_table_border_thickness(int32_t value) {
  _internal_set_theme_table_border_thickness(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_table_border_thickness)
}

// optional .config.Colour theme_status_background = 23 [default = kColourBlack];
inline bool ThemeModernBlue::_internal_has_theme_status_background() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_status_background() const {
  return _internal_has_theme_status_background();
}
inline void ThemeModernBlue::clear_theme_status_background() {
  _impl_.theme_status_background_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_status_background() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_background_);
}
inline ::config::Colour ThemeModernBlue::theme_status_background() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_status_background)
  return _internal_theme_status_background();
}
inline void ThemeModernBlue::_internal_set_theme_status_background(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.theme_status_background_ = value;
}
inline void ThemeModernBlue::set_theme_status_background(::config::Colour value) {
  _internal_set_theme_status_background(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_status_background)
}

// optional .config.Colour theme_status_border = 24 [default = kColourBlack];
inline bool ThemeModernBlue::_internal_has_theme_status_border() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_status_border() const {
  return _internal_has_theme_status_border();
}
inline void ThemeModernBlue::clear_theme_status_border() {
  _impl_.theme_status_border_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_status_border() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_border_);
}
inline ::config::Colour ThemeModernBlue::theme_status_border() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_status_border)
  return _internal_theme_status_border();
}
inline void ThemeModernBlue::_internal_set_theme_status_border(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.theme_status_border_ = value;
}
inline void ThemeModernBlue::set_theme_status_border(::config::Colour value) {
  _internal_set_theme_status_border(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_status_border)
}

// optional .config.Colour theme_status_text = 25 [default = kColourWhite];
inline bool ThemeModernBlue::_internal_has_theme_status_text() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_status_text() const {
  return _internal_has_theme_status_text();
}
inline void ThemeModernBlue::clear_theme_status_text() {
  _impl_.theme_status_text_ = 16777215;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_status_text() const {
  return static_cast< ::config::Colour >(_impl_.theme_status_text_);
}
inline ::config::Colour ThemeModernBlue::theme_status_text() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_status_text)
  return _internal_theme_status_text();
}
inline void ThemeModernBlue::_internal_set_theme_status_text(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.theme_status_text_ = value;
}
inline void ThemeModernBlue::set_theme_status_text(::config::Colour value) {
  _internal_set_theme_status_text(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_status_text)
}

// optional .config.Colour theme_alert = 26 [default = kColourAmber];
inline bool ThemeModernBlue::_internal_has_theme_alert() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_alert() const {
  return _internal_has_theme_alert();
}
inline void ThemeModernBlue::clear_theme_alert() {
  _impl_.theme_alert_ = 16750848;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_alert() const {
  return static_cast< ::config::Colour >(_impl_.theme_alert_);
}
inline ::config::Colour ThemeModernBlue::theme_alert() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_alert)
  return _internal_theme_alert();
}
inline void ThemeModernBlue::_internal_set_theme_alert(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.theme_alert_ = value;
}
inline void ThemeModernBlue::set_theme_alert(::config::Colour value) {
  _internal_set_theme_alert(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_alert)
}

// optional .config.Colour theme_critical = 27 [default = kColourRed];
inline bool ThemeModernBlue::_internal_has_theme_critical() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_critical() const {
  return _internal_has_theme_critical();
}
inline void ThemeModernBlue::clear_theme_critical() {
  _impl_.theme_critical_ = 16711680;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::config::Colour ThemeModernBlue::_internal_theme_critical() const {
  return static_cast< ::config::Colour >(_impl_.theme_critical_);
}
inline ::config::Colour ThemeModernBlue::theme_critical() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_critical)
  return _internal_theme_critical();
}
inline void ThemeModernBlue::_internal_set_theme_critical(::config::Colour value) {
  assert(::config::Colour_IsValid(value));
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.theme_critical_ = value;
}
inline void ThemeModernBlue::set_theme_critical(::config::Colour value) {
  _internal_set_theme_critical(value);
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_critical)
}

// optional string theme_font = 28 [default = "Courier 10 Pitch"];
inline bool ThemeModernBlue::_internal_has_theme_font() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ThemeModernBlue::has_theme_font() const {
  return _internal_has_theme_font();
}
inline void ThemeModernBlue::clear_theme_font() {
  _impl_.theme_font_.ClearToDefault(::config::ThemeModernBlue::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ThemeModernBlue::theme_font() const {
  // @@protoc_insertion_point(field_get:config.ThemeModernBlue.theme_font)
  if (_impl_.theme_font_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_theme_font_.get();
  return _internal_theme_font();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThemeModernBlue::set_theme_font(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.theme_font_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.ThemeModernBlue.theme_font)
}
inline std::string* ThemeModernBlue::mutable_theme_font() {
  std::string* _s = _internal_mutable_theme_font();
  // @@protoc_insertion_point(field_mutable:config.ThemeModernBlue.theme_font)
  return _s;
}
inline const std::string& ThemeModernBlue::_internal_theme_font() const {
  return _impl_.theme_font_.Get();
}
inline void ThemeModernBlue::_internal_set_theme_font(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.theme_font_.Set(value, GetArenaForAllocation());
}
inline std::string* ThemeModernBlue::_internal_mutable_theme_font() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.theme_font_.Mutable(::config::ThemeModernBlue::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
}
inline std::string* ThemeModernBlue::release_theme_font() {
  // @@protoc_insertion_point(field_release:config.ThemeModernBlue.theme_font)
  if (!_internal_has_theme_font()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.theme_font_.Release();
  return p;
}
inline void ThemeModernBlue::set_allocated_theme_font(std::string* theme_font) {
  if (theme_font != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_font_.SetAllocated(theme_font, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.ThemeModernBlue.theme_font)
}

// -------------------------------------------------------------------

// File

// required string config_filename = 1 [default = "config.pb"];
inline bool File::_internal_has_config_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool File::has_config_filename() const {
  return _internal_has_config_filename();
}
inline void File::clear_config_filename() {
  _impl_.config_filename_.ClearToDefault(::config::File::Impl_::_i_give_permission_to_break_this_code_default_config_filename_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& File::config_filename() const {
  // @@protoc_insertion_point(field_get:config.File.config_filename)
  if (_impl_.config_filename_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_config_filename_.get();
  return _internal_config_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_config_filename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.config_filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.File.config_filename)
}
inline std::string* File::mutable_config_filename() {
  std::string* _s = _internal_mutable_config_filename();
  // @@protoc_insertion_point(field_mutable:config.File.config_filename)
  return _s;
}
inline const std::string& File::_internal_config_filename() const {
  return _impl_.config_filename_.Get();
}
inline void File::_internal_set_config_filename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.config_filename_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_config_filename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.config_filename_.Mutable(::config::File::Impl_::_i_give_permission_to_break_this_code_default_config_filename_, GetArenaForAllocation());
}
inline std::string* File::release_config_filename() {
  // @@protoc_insertion_point(field_release:config.File.config_filename)
  if (!_internal_has_config_filename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.config_filename_.Release();
  return p;
}
inline void File::set_allocated_config_filename(std::string* config_filename) {
  if (config_filename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.config_filename_.SetAllocated(config_filename, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.File.config_filename)
}

// required string log_filename = 2 [default = "gva.log"];
inline bool File::_internal_has_log_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool File::has_log_filename() const {
  return _internal_has_log_filename();
}
inline void File::clear_log_filename() {
  _impl_.log_filename_.ClearToDefault(::config::File::Impl_::_i_give_permission_to_break_this_code_default_log_filename_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& File::log_filename() const {
  // @@protoc_insertion_point(field_get:config.File.log_filename)
  if (_impl_.log_filename_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_log_filename_.get();
  return _internal_log_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_log_filename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.log_filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.File.log_filename)
}
inline std::string* File::mutable_log_filename() {
  std::string* _s = _internal_mutable_log_filename();
  // @@protoc_insertion_point(field_mutable:config.File.log_filename)
  return _s;
}
inline const std::string& File::_internal_log_filename() const {
  return _impl_.log_filename_.Get();
}
inline void File::_internal_set_log_filename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.log_filename_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_log_filename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.log_filename_.Mutable(::config::File::Impl_::_i_give_permission_to_break_this_code_default_log_filename_, GetArenaForAllocation());
}
inline std::string* File::release_log_filename() {
  // @@protoc_insertion_point(field_release:config.File.log_filename)
  if (!_internal_has_log_filename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.log_filename_.Release();
  return p;
}
inline void File::set_allocated_log_filename(std::string* log_filename) {
  if (log_filename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.log_filename_.SetAllocated(log_filename, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.File.log_filename)
}

// required string log_path = 3 [default = "/var/log"];
inline bool File::_internal_has_log_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool File::has_log_path() const {
  return _internal_has_log_path();
}
inline void File::clear_log_path() {
  _impl_.log_path_.ClearToDefault(::config::File::Impl_::_i_give_permission_to_break_this_code_default_log_path_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& File::log_path() const {
  // @@protoc_insertion_point(field_get:config.File.log_path)
  if (_impl_.log_path_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_log_path_.get();
  return _internal_log_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_log_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.log_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.File.log_path)
}
inline std::string* File::mutable_log_path() {
  std::string* _s = _internal_mutable_log_path();
  // @@protoc_insertion_point(field_mutable:config.File.log_path)
  return _s;
}
inline const std::string& File::_internal_log_path() const {
  return _impl_.log_path_.Get();
}
inline void File::_internal_set_log_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.log_path_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_log_path() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.log_path_.Mutable(::config::File::Impl_::_i_give_permission_to_break_this_code_default_log_path_, GetArenaForAllocation());
}
inline std::string* File::release_log_path() {
  // @@protoc_insertion_point(field_release:config.File.log_path)
  if (!_internal_has_log_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.log_path_.Release();
  return p;
}
inline void File::set_allocated_log_path(std::string* log_path) {
  if (log_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.log_path_.SetAllocated(log_path, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.File.log_path)
}

// required string images_path = 4 [default = "/opt/gva/hmi/images"];
inline bool File::_internal_has_images_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool File::has_images_path() const {
  return _internal_has_images_path();
}
inline void File::clear_images_path() {
  _impl_.images_path_.ClearToDefault(::config::File::Impl_::_i_give_permission_to_break_this_code_default_images_path_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& File::images_path() const {
  // @@protoc_insertion_point(field_get:config.File.images_path)
  if (_impl_.images_path_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_images_path_.get();
  return _internal_images_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_images_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.images_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.File.images_path)
}
inline std::string* File::mutable_images_path() {
  std::string* _s = _internal_mutable_images_path();
  // @@protoc_insertion_point(field_mutable:config.File.images_path)
  return _s;
}
inline const std::string& File::_internal_images_path() const {
  return _impl_.images_path_.Get();
}
inline void File::_internal_set_images_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.images_path_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_images_path() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.images_path_.Mutable(::config::File::Impl_::_i_give_permission_to_break_this_code_default_images_path_, GetArenaForAllocation());
}
inline std::string* File::release_images_path() {
  // @@protoc_insertion_point(field_release:config.File.images_path)
  if (!_internal_has_images_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.images_path_.Release();
  return p;
}
inline void File::set_allocated_images_path(std::string* images_path) {
  if (images_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.images_path_.SetAllocated(images_path, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.File.images_path)
}

// -------------------------------------------------------------------

// OsmScout

// required bool enabled = 1 [default = true];
inline bool OsmScout::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OsmScout::has_enabled() const {
  return _internal_has_enabled();
}
inline void OsmScout::clear_enabled() {
  _impl_.enabled_ = true;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool OsmScout::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool OsmScout::enabled() const {
  // @@protoc_insertion_point(field_get:config.OsmScout.enabled)
  return _internal_enabled();
}
inline void OsmScout::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.enabled_ = value;
}
inline void OsmScout::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:config.OsmScout.enabled)
}

// optional string map_path = 2 [default = "/opt/osmscout/maps/australia-latest/"];
inline bool OsmScout::_internal_has_map_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OsmScout::has_map_path() const {
  return _internal_has_map_path();
}
inline void OsmScout::clear_map_path() {
  _impl_.map_path_.ClearToDefault(::config::OsmScout::Impl_::_i_give_permission_to_break_this_code_default_map_path_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OsmScout::map_path() const {
  // @@protoc_insertion_point(field_get:config.OsmScout.map_path)
  if (_impl_.map_path_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_map_path_.get();
  return _internal_map_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OsmScout::set_map_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.map_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.OsmScout.map_path)
}
inline std::string* OsmScout::mutable_map_path() {
  std::string* _s = _internal_mutable_map_path();
  // @@protoc_insertion_point(field_mutable:config.OsmScout.map_path)
  return _s;
}
inline const std::string& OsmScout::_internal_map_path() const {
  return _impl_.map_path_.Get();
}
inline void OsmScout::_internal_set_map_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.map_path_.Set(value, GetArenaForAllocation());
}
inline std::string* OsmScout::_internal_mutable_map_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.map_path_.Mutable(::config::OsmScout::Impl_::_i_give_permission_to_break_this_code_default_map_path_, GetArenaForAllocation());
}
inline std::string* OsmScout::release_map_path() {
  // @@protoc_insertion_point(field_release:config.OsmScout.map_path)
  if (!_internal_has_map_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.map_path_.Release();
  return p;
}
inline void OsmScout::set_allocated_map_path(std::string* map_path) {
  if (map_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.map_path_.SetAllocated(map_path, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.OsmScout.map_path)
}

// optional string map_stylesheet_path = 3 [default = "/opt/osmscout/stylesheets/standard.oss"];
inline bool OsmScout::_internal_has_map_stylesheet_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OsmScout::has_map_stylesheet_path() const {
  return _internal_has_map_stylesheet_path();
}
inline void OsmScout::clear_map_stylesheet_path() {
  _impl_.map_stylesheet_path_.ClearToDefault(::config::OsmScout::Impl_::_i_give_permission_to_break_this_code_default_map_stylesheet_path_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OsmScout::map_stylesheet_path() const {
  // @@protoc_insertion_point(field_get:config.OsmScout.map_stylesheet_path)
  if (_impl_.map_stylesheet_path_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_map_stylesheet_path_.get();
  return _internal_map_stylesheet_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OsmScout::set_map_stylesheet_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.map_stylesheet_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.OsmScout.map_stylesheet_path)
}
inline std::string* OsmScout::mutable_map_stylesheet_path() {
  std::string* _s = _internal_mutable_map_stylesheet_path();
  // @@protoc_insertion_point(field_mutable:config.OsmScout.map_stylesheet_path)
  return _s;
}
inline const std::string& OsmScout::_internal_map_stylesheet_path() const {
  return _impl_.map_stylesheet_path_.Get();
}
inline void OsmScout::_internal_set_map_stylesheet_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.map_stylesheet_path_.Set(value, GetArenaForAllocation());
}
inline std::string* OsmScout::_internal_mutable_map_stylesheet_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.map_stylesheet_path_.Mutable(::config::OsmScout::Impl_::_i_give_permission_to_break_this_code_default_map_stylesheet_path_, GetArenaForAllocation());
}
inline std::string* OsmScout::release_map_stylesheet_path() {
  // @@protoc_insertion_point(field_release:config.OsmScout.map_stylesheet_path)
  if (!_internal_has_map_stylesheet_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.map_stylesheet_path_.Release();
  return p;
}
inline void OsmScout::set_allocated_map_stylesheet_path(std::string* map_stylesheet_path) {
  if (map_stylesheet_path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.map_stylesheet_path_.SetAllocated(map_stylesheet_path, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.OsmScout.map_stylesheet_path)
}

// optional double test_lon = 4 [default = 153.02259];
inline bool OsmScout::_internal_has_test_lon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OsmScout::has_test_lon() const {
  return _internal_has_test_lon();
}
inline void OsmScout::clear_test_lon() {
  _impl_.test_lon_ = 153.02259;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double OsmScout::_internal_test_lon() const {
  return _impl_.test_lon_;
}
inline double OsmScout::test_lon() const {
  // @@protoc_insertion_point(field_get:config.OsmScout.test_lon)
  return _internal_test_lon();
}
inline void OsmScout::_internal_set_test_lon(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.test_lon_ = value;
}
inline void OsmScout::set_test_lon(double value) {
  _internal_set_test_lon(value);
  // @@protoc_insertion_point(field_set:config.OsmScout.test_lon)
}

// optional double test_lat = 5 [default = -27.4744];
inline bool OsmScout::_internal_has_test_lat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OsmScout::has_test_lat() const {
  return _internal_has_test_lat();
}
inline void OsmScout::clear_test_lat() {
  _impl_.test_lat_ = -27.4744;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double OsmScout::_internal_test_lat() const {
  return _impl_.test_lat_;
}
inline double OsmScout::test_lat() const {
  // @@protoc_insertion_point(field_get:config.OsmScout.test_lat)
  return _internal_test_lat();
}
inline void OsmScout::_internal_set_test_lat(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.test_lat_ = value;
}
inline void OsmScout::set_test_lat(double value) {
  _internal_set_test_lat(value);
  // @@protoc_insertion_point(field_set:config.OsmScout.test_lat)
}

// -------------------------------------------------------------------

// KeyBinding

// optional .config.Key key = 1;
inline bool KeyBinding::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeyBinding::has_key() const {
  return _internal_has_key();
}
inline void KeyBinding::clear_key() {
  _impl_.key_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::config::Key KeyBinding::_internal_key() const {
  return static_cast< ::config::Key >(_impl_.key_);
}
inline ::config::Key KeyBinding::key() const {
  // @@protoc_insertion_point(field_get:config.KeyBinding.key)
  return _internal_key();
}
inline void KeyBinding::_internal_set_key(::config::Key value) {
  assert(::config::Key_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_ = value;
}
inline void KeyBinding::set_key(::config::Key value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:config.KeyBinding.key)
}

// optional int32 Bind = 2;
inline bool KeyBinding::_internal_has_bind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeyBinding::has_bind() const {
  return _internal_has_bind();
}
inline void KeyBinding::clear_bind() {
  _impl_.bind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t KeyBinding::_internal_bind() const {
  return _impl_.bind_;
}
inline int32_t KeyBinding::bind() const {
  // @@protoc_insertion_point(field_get:config.KeyBinding.Bind)
  return _internal_bind();
}
inline void KeyBinding::_internal_set_bind(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bind_ = value;
}
inline void KeyBinding::set_bind(int32_t value) {
  _internal_set_bind(value);
  // @@protoc_insertion_point(field_set:config.KeyBinding.Bind)
}

// -------------------------------------------------------------------

// KeyBindingsApc

// optional .config.KeyBinding bind = 2;
inline bool KeyBindingsApc::_internal_has_bind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bind_ != nullptr);
  return value;
}
inline bool KeyBindingsApc::has_bind() const {
  return _internal_has_bind();
}
inline void KeyBindingsApc::clear_bind() {
  if (_impl_.bind_ != nullptr) _impl_.bind_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::config::KeyBinding& KeyBindingsApc::_internal_bind() const {
  const ::config::KeyBinding* p = _impl_.bind_;
  return p != nullptr ? *p : reinterpret_cast<const ::config::KeyBinding&>(
      ::config::_KeyBinding_default_instance_);
}
inline const ::config::KeyBinding& KeyBindingsApc::bind() const {
  // @@protoc_insertion_point(field_get:config.KeyBindingsApc.bind)
  return _internal_bind();
}
inline void KeyBindingsApc::unsafe_arena_set_allocated_bind(
    ::config::KeyBinding* bind) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bind_);
  }
  _impl_.bind_ = bind;
  if (bind) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.KeyBindingsApc.bind)
}
inline ::config::KeyBinding* KeyBindingsApc::release_bind() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::config::KeyBinding* temp = _impl_.bind_;
  _impl_.bind_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::config::KeyBinding* KeyBindingsApc::unsafe_arena_release_bind() {
  // @@protoc_insertion_point(field_release:config.KeyBindingsApc.bind)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::config::KeyBinding* temp = _impl_.bind_;
  _impl_.bind_ = nullptr;
  return temp;
}
inline ::config::KeyBinding* KeyBindingsApc::_internal_mutable_bind() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bind_ == nullptr) {
    auto* p = CreateMaybeMessage<::config::KeyBinding>(GetArenaForAllocation());
    _impl_.bind_ = p;
  }
  return _impl_.bind_;
}
inline ::config::KeyBinding* KeyBindingsApc::mutable_bind() {
  ::config::KeyBinding* _msg = _internal_mutable_bind();
  // @@protoc_insertion_point(field_mutable:config.KeyBindingsApc.bind)
  return _msg;
}
inline void KeyBindingsApc::set_allocated_bind(::config::KeyBinding* bind) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bind_;
  }
  if (bind) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bind);
    if (message_arena != submessage_arena) {
      bind = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bind, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bind_ = bind;
  // @@protoc_insertion_point(field_set_allocated:config.KeyBindingsApc.bind)
}

// -------------------------------------------------------------------

// Gva

// required string name = 1;
inline bool Gva::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Gva::has_name() const {
  return _internal_has_name();
}
inline void Gva::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Gva::name() const {
  // @@protoc_insertion_point(field_get:config.Gva.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Gva::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Gva.name)
}
inline std::string* Gva::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:config.Gva.name)
  return _s;
}
inline const std::string& Gva::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Gva::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Gva::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Gva::release_name() {
  // @@protoc_insertion_point(field_release:config.Gva.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Gva::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Gva.name)
}

// optional int32 height = 3 [default = 480];
inline bool Gva::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Gva::has_height() const {
  return _internal_has_height();
}
inline void Gva::clear_height() {
  _impl_.height_ = 480;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t Gva::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Gva::height() const {
  // @@protoc_insertion_point(field_get:config.Gva.height)
  return _internal_height();
}
inline void Gva::_internal_set_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.height_ = value;
}
inline void Gva::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:config.Gva.height)
}

// optional int32 width = 4 [default = 640];
inline bool Gva::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Gva::has_width() const {
  return _internal_has_width();
}
inline void Gva::clear_width() {
  _impl_.width_ = 640;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t Gva::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Gva::width() const {
  // @@protoc_insertion_point(field_get:config.Gva.width)
  return _internal_width();
}
inline void Gva::_internal_set_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.width_ = value;
}
inline void Gva::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:config.Gva.width)
}

// optional bool fullscreen = 5 [default = false];
inline bool Gva::_internal_has_fullscreen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Gva::has_fullscreen() const {
  return _internal_has_fullscreen();
}
inline void Gva::clear_fullscreen() {
  _impl_.fullscreen_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Gva::_internal_fullscreen() const {
  return _impl_.fullscreen_;
}
inline bool Gva::fullscreen() const {
  // @@protoc_insertion_point(field_get:config.Gva.fullscreen)
  return _internal_fullscreen();
}
inline void Gva::_internal_set_fullscreen(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.fullscreen_ = value;
}
inline void Gva::set_fullscreen(bool value) {
  _internal_set_fullscreen(value);
  // @@protoc_insertion_point(field_set:config.Gva.fullscreen)
}

// optional bool live = 6;
inline bool Gva::_internal_has_live() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Gva::has_live() const {
  return _internal_has_live();
}
inline void Gva::clear_live() {
  _impl_.live_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Gva::_internal_live() const {
  return _impl_.live_;
}
inline bool Gva::live() const {
  // @@protoc_insertion_point(field_get:config.Gva.live)
  return _internal_live();
}
inline void Gva::_internal_set_live(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.live_ = value;
}
inline void Gva::set_live(bool value) {
  _internal_set_live(value);
  // @@protoc_insertion_point(field_set:config.Gva.live)
}

// optional int32 zoom = 7 [default = 20000];
inline bool Gva::_internal_has_zoom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Gva::has_zoom() const {
  return _internal_has_zoom();
}
inline void Gva::clear_zoom() {
  _impl_.zoom_ = 20000;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t Gva::_internal_zoom() const {
  return _impl_.zoom_;
}
inline int32_t Gva::zoom() const {
  // @@protoc_insertion_point(field_get:config.Gva.zoom)
  return _internal_zoom();
}
inline void Gva::_internal_set_zoom(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.zoom_ = value;
}
inline void Gva::set_zoom(int32_t value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:config.Gva.zoom)
}

// optional string device = 8;
inline bool Gva::_internal_has_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Gva::has_device() const {
  return _internal_has_device();
}
inline void Gva::clear_device() {
  _impl_.device_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Gva::device() const {
  // @@protoc_insertion_point(field_get:config.Gva.device)
  return _internal_device();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Gva::set_device(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.device_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Gva.device)
}
inline std::string* Gva::mutable_device() {
  std::string* _s = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:config.Gva.device)
  return _s;
}
inline const std::string& Gva::_internal_device() const {
  return _impl_.device_.Get();
}
inline void Gva::_internal_set_device(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.device_.Set(value, GetArenaForAllocation());
}
inline std::string* Gva::_internal_mutable_device() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.device_.Mutable(GetArenaForAllocation());
}
inline std::string* Gva::release_device() {
  // @@protoc_insertion_point(field_release:config.Gva.device)
  if (!_internal_has_device()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.device_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_.IsDefault()) {
    _impl_.device_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Gva::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.device_.SetAllocated(device, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_.IsDefault()) {
    _impl_.device_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Gva.device)
}

// optional string gps_device = 9 [default = "/dev/ttyUSB0"];
inline bool Gva::_internal_has_gps_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Gva::has_gps_device() const {
  return _internal_has_gps_device();
}
inline void Gva::clear_gps_device() {
  _impl_.gps_device_.ClearToDefault(::config::Gva::Impl_::_i_give_permission_to_break_this_code_default_gps_device_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Gva::gps_device() const {
  // @@protoc_insertion_point(field_get:config.Gva.gps_device)
  if (_impl_.gps_device_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_gps_device_.get();
  return _internal_gps_device();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Gva::set_gps_device(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.gps_device_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Gva.gps_device)
}
inline std::string* Gva::mutable_gps_device() {
  std::string* _s = _internal_mutable_gps_device();
  // @@protoc_insertion_point(field_mutable:config.Gva.gps_device)
  return _s;
}
inline const std::string& Gva::_internal_gps_device() const {
  return _impl_.gps_device_.Get();
}
inline void Gva::_internal_set_gps_device(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gps_device_.Set(value, GetArenaForAllocation());
}
inline std::string* Gva::_internal_mutable_gps_device() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.gps_device_.Mutable(::config::Gva::Impl_::_i_give_permission_to_break_this_code_default_gps_device_, GetArenaForAllocation());
}
inline std::string* Gva::release_gps_device() {
  // @@protoc_insertion_point(field_release:config.Gva.gps_device)
  if (!_internal_has_gps_device()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.gps_device_.Release();
  return p;
}
inline void Gva::set_allocated_gps_device(std::string* gps_device) {
  if (gps_device != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.gps_device_.SetAllocated(gps_device, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.Gva.gps_device)
}

// optional string odb_device = 10 [default = "/dev/ttyUSB1"];
inline bool Gva::_internal_has_odb_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Gva::has_odb_device() const {
  return _internal_has_odb_device();
}
inline void Gva::clear_odb_device() {
  _impl_.odb_device_.ClearToDefault(::config::Gva::Impl_::_i_give_permission_to_break_this_code_default_odb_device_, GetArenaForAllocation());
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Gva::odb_device() const {
  // @@protoc_insertion_point(field_get:config.Gva.odb_device)
  if (_impl_.odb_device_.IsDefault()) return Impl_::_i_give_permission_to_break_this_code_default_odb_device_.get();
  return _internal_odb_device();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Gva::set_odb_device(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.odb_device_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Gva.odb_device)
}
inline std::string* Gva::mutable_odb_device() {
  std::string* _s = _internal_mutable_odb_device();
  // @@protoc_insertion_point(field_mutable:config.Gva.odb_device)
  return _s;
}
inline const std::string& Gva::_internal_odb_device() const {
  return _impl_.odb_device_.Get();
}
inline void Gva::_internal_set_odb_device(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.odb_device_.Set(value, GetArenaForAllocation());
}
inline std::string* Gva::_internal_mutable_odb_device() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.odb_device_.Mutable(::config::Gva::Impl_::_i_give_permission_to_break_this_code_default_odb_device_, GetArenaForAllocation());
}
inline std::string* Gva::release_odb_device() {
  // @@protoc_insertion_point(field_release:config.Gva.odb_device)
  if (!_internal_has_odb_device()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.odb_device_.Release();
  return p;
}
inline void Gva::set_allocated_odb_device(std::string* odb_device) {
  if (odb_device != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.odb_device_.SetAllocated(odb_device, GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:config.Gva.odb_device)
}

// optional .config.OsmScout osm = 11;
inline bool Gva::_internal_has_osm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.osm_ != nullptr);
  return value;
}
inline bool Gva::has_osm() const {
  return _internal_has_osm();
}
inline void Gva::clear_osm() {
  if (_impl_.osm_ != nullptr) _impl_.osm_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::config::OsmScout& Gva::_internal_osm() const {
  const ::config::OsmScout* p = _impl_.osm_;
  return p != nullptr ? *p : reinterpret_cast<const ::config::OsmScout&>(
      ::config::_OsmScout_default_instance_);
}
inline const ::config::OsmScout& Gva::osm() const {
  // @@protoc_insertion_point(field_get:config.Gva.osm)
  return _internal_osm();
}
inline void Gva::unsafe_arena_set_allocated_osm(
    ::config::OsmScout* osm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.osm_);
  }
  _impl_.osm_ = osm;
  if (osm) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Gva.osm)
}
inline ::config::OsmScout* Gva::release_osm() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::config::OsmScout* temp = _impl_.osm_;
  _impl_.osm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::config::OsmScout* Gva::unsafe_arena_release_osm() {
  // @@protoc_insertion_point(field_release:config.Gva.osm)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::config::OsmScout* temp = _impl_.osm_;
  _impl_.osm_ = nullptr;
  return temp;
}
inline ::config::OsmScout* Gva::_internal_mutable_osm() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.osm_ == nullptr) {
    auto* p = CreateMaybeMessage<::config::OsmScout>(GetArenaForAllocation());
    _impl_.osm_ = p;
  }
  return _impl_.osm_;
}
inline ::config::OsmScout* Gva::mutable_osm() {
  ::config::OsmScout* _msg = _internal_mutable_osm();
  // @@protoc_insertion_point(field_mutable:config.Gva.osm)
  return _msg;
}
inline void Gva::set_allocated_osm(::config::OsmScout* osm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.osm_;
  }
  if (osm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(osm);
    if (message_arena != submessage_arena) {
      osm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, osm, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.osm_ = osm;
  // @@protoc_insertion_point(field_set_allocated:config.Gva.osm)
}

// optional .config.ThemeModernBlue theme = 12;
inline bool Gva::_internal_has_theme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_ != nullptr);
  return value;
}
inline bool Gva::has_theme() const {
  return _internal_has_theme();
}
inline void Gva::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::config::ThemeModernBlue& Gva::_internal_theme() const {
  const ::config::ThemeModernBlue* p = _impl_.theme_;
  return p != nullptr ? *p : reinterpret_cast<const ::config::ThemeModernBlue&>(
      ::config::_ThemeModernBlue_default_instance_);
}
inline const ::config::ThemeModernBlue& Gva::theme() const {
  // @@protoc_insertion_point(field_get:config.Gva.theme)
  return _internal_theme();
}
inline void Gva::unsafe_arena_set_allocated_theme(
    ::config::ThemeModernBlue* theme) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_);
  }
  _impl_.theme_ = theme;
  if (theme) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Gva.theme)
}
inline ::config::ThemeModernBlue* Gva::release_theme() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::config::ThemeModernBlue* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::config::ThemeModernBlue* Gva::unsafe_arena_release_theme() {
  // @@protoc_insertion_point(field_release:config.Gva.theme)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::config::ThemeModernBlue* temp = _impl_.theme_;
  _impl_.theme_ = nullptr;
  return temp;
}
inline ::config::ThemeModernBlue* Gva::_internal_mutable_theme() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.theme_ == nullptr) {
    auto* p = CreateMaybeMessage<::config::ThemeModernBlue>(GetArenaForAllocation());
    _impl_.theme_ = p;
  }
  return _impl_.theme_;
}
inline ::config::ThemeModernBlue* Gva::mutable_theme() {
  ::config::ThemeModernBlue* _msg = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:config.Gva.theme)
  return _msg;
}
inline void Gva::set_allocated_theme(::config::ThemeModernBlue* theme) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.theme_;
  }
  if (theme) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(theme);
    if (message_arena != submessage_arena) {
      theme = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.theme_ = theme;
  // @@protoc_insertion_point(field_set_allocated:config.Gva.theme)
}

// optional .config.File file = 13;
inline bool Gva::_internal_has_file() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.file_ != nullptr);
  return value;
}
inline bool Gva::has_file() const {
  return _internal_has_file();
}
inline void Gva::clear_file() {
  if (_impl_.file_ != nullptr) _impl_.file_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::config::File& Gva::_internal_file() const {
  const ::config::File* p = _impl_.file_;
  return p != nullptr ? *p : reinterpret_cast<const ::config::File&>(
      ::config::_File_default_instance_);
}
inline const ::config::File& Gva::file() const {
  // @@protoc_insertion_point(field_get:config.Gva.file)
  return _internal_file();
}
inline void Gva::unsafe_arena_set_allocated_file(
    ::config::File* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.file_);
  }
  _impl_.file_ = file;
  if (file) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:config.Gva.file)
}
inline ::config::File* Gva::release_file() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::config::File* temp = _impl_.file_;
  _impl_.file_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::config::File* Gva::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:config.Gva.file)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::config::File* temp = _impl_.file_;
  _impl_.file_ = nullptr;
  return temp;
}
inline ::config::File* Gva::_internal_mutable_file() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.file_ == nullptr) {
    auto* p = CreateMaybeMessage<::config::File>(GetArenaForAllocation());
    _impl_.file_ = p;
  }
  return _impl_.file_;
}
inline ::config::File* Gva::mutable_file() {
  ::config::File* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:config.Gva.file)
  return _msg;
}
inline void Gva::set_allocated_file(::config::File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.file_;
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file);
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.file_ = file;
  // @@protoc_insertion_point(field_set_allocated:config.Gva.file)
}

// repeated .config.KeyBinding bindings = 14;
inline int Gva::_internal_bindings_size() const {
  return _impl_.bindings_.size();
}
inline int Gva::bindings_size() const {
  return _internal_bindings_size();
}
inline void Gva::clear_bindings() {
  _impl_.bindings_.Clear();
}
inline ::config::KeyBinding* Gva::mutable_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:config.Gva.bindings)
  return _impl_.bindings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::KeyBinding >*
Gva::mutable_bindings() {
  // @@protoc_insertion_point(field_mutable_list:config.Gva.bindings)
  return &_impl_.bindings_;
}
inline const ::config::KeyBinding& Gva::_internal_bindings(int index) const {
  return _impl_.bindings_.Get(index);
}
inline const ::config::KeyBinding& Gva::bindings(int index) const {
  // @@protoc_insertion_point(field_get:config.Gva.bindings)
  return _internal_bindings(index);
}
inline ::config::KeyBinding* Gva::_internal_add_bindings() {
  return _impl_.bindings_.Add();
}
inline ::config::KeyBinding* Gva::add_bindings() {
  ::config::KeyBinding* _add = _internal_add_bindings();
  // @@protoc_insertion_point(field_add:config.Gva.bindings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::config::KeyBinding >&
Gva::bindings() const {
  // @@protoc_insertion_point(field_list:config.Gva.bindings)
  return _impl_.bindings_;
}

// optional string display_type = 15;
inline bool Gva::_internal_has_display_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Gva::has_display_type() const {
  return _internal_has_display_type();
}
inline void Gva::clear_display_type() {
  _impl_.display_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Gva::display_type() const {
  // @@protoc_insertion_point(field_get:config.Gva.display_type)
  return _internal_display_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Gva::set_display_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.display_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:config.Gva.display_type)
}
inline std::string* Gva::mutable_display_type() {
  std::string* _s = _internal_mutable_display_type();
  // @@protoc_insertion_point(field_mutable:config.Gva.display_type)
  return _s;
}
inline const std::string& Gva::_internal_display_type() const {
  return _impl_.display_type_.Get();
}
inline void Gva::_internal_set_display_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.display_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Gva::_internal_mutable_display_type() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.display_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Gva::release_display_type() {
  // @@protoc_insertion_point(field_release:config.Gva.display_type)
  if (!_internal_has_display_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.display_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_type_.IsDefault()) {
    _impl_.display_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Gva::set_allocated_display_type(std::string* display_type) {
  if (display_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.display_type_.SetAllocated(display_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_type_.IsDefault()) {
    _impl_.display_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:config.Gva.display_type)
}

// optional double brightness = 16 [default = 1];
inline bool Gva::_internal_has_brightness() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Gva::has_brightness() const {
  return _internal_has_brightness();
}
inline void Gva::clear_brightness() {
  _impl_.brightness_ = 1;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double Gva::_internal_brightness() const {
  return _impl_.brightness_;
}
inline double Gva::brightness() const {
  // @@protoc_insertion_point(field_get:config.Gva.brightness)
  return _internal_brightness();
}
inline void Gva::_internal_set_brightness(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.brightness_ = value;
}
inline void Gva::set_brightness(double value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:config.Gva.brightness)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::config::Colour> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::Colour>() {
  return ::config::Colour_descriptor();
}
template <> struct is_proto_enum< ::config::LabelStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::LabelStyle>() {
  return ::config::LabelStyle_descriptor();
}
template <> struct is_proto_enum< ::config::LineStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::LineStyle>() {
  return ::config::LineStyle_descriptor();
}
template <> struct is_proto_enum< ::config::PpiStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::PpiStyle>() {
  return ::config::PpiStyle_descriptor();
}
template <> struct is_proto_enum< ::config::Key> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::Key>() {
  return ::config::Key_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
