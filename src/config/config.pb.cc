// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace config {
PROTOBUF_CONSTEXPR ThemeDefault::ThemeDefault(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.theme_font_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.theme_label_line_enabled_selected_changing_)*/0
  , /*decltype(_impl_.theme_label_line_enabled_selected_)*/0
  , /*decltype(_impl_.theme_label_line_enabled_)*/0
  , /*decltype(_impl_.theme_label_line_disabled_)*/0
  , /*decltype(_impl_.theme_critical_)*/16711680
  , /*decltype(_impl_.theme_background_)*/65280
  , /*decltype(_impl_.table_background_)*/32512
  , /*decltype(_impl_.theme_label_style_)*/1
  , /*decltype(_impl_.theme_label_background_enabled_selected_changing_)*/16776960
  , /*decltype(_impl_.theme_label_background_enabled_selected_)*/32512
  , /*decltype(_impl_.theme_label_background_enabled_)*/32512
  , /*decltype(_impl_.theme_label_background_disabled_)*/8355711
  , /*decltype(_impl_.theme_label_text_enabled_selected_changing_)*/16777215
  , /*decltype(_impl_.theme_label_text_enabled_selected_)*/16777215
  , /*decltype(_impl_.theme_label_text_enabled_)*/16777215
  , /*decltype(_impl_.theme_label_text_disabled_)*/16777215
  , /*decltype(_impl_.theme_label_border_enabled_selected_changing_)*/19200
  , /*decltype(_impl_.theme_label_border_enabled_selected_)*/16776960
  , /*decltype(_impl_.theme_label_border_enabled_)*/19200
  , /*decltype(_impl_.theme_label_border_disabled_)*/4210752
  , /*decltype(_impl_.widget_ppi_style_)*/3
  , /*decltype(_impl_.theme_label_border_thickness_)*/1
  , /*decltype(_impl_.theme_table_border_thickness_)*/1
  , /*decltype(_impl_.theme_status_background_)*/32512
  , /*decltype(_impl_.theme_status_border_)*/32512
  , /*decltype(_impl_.theme_status_text_)*/16777215
  , /*decltype(_impl_.theme_alert_)*/16750848} {}
struct ThemeDefaultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeDefaultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeDefaultDefaultTypeInternal() {}
  union {
    ThemeDefault _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeDefaultDefaultTypeInternal _ThemeDefault_default_instance_;
PROTOBUF_CONSTEXPR ThemeHighContrast::ThemeHighContrast(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.theme_font_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.theme_background_)*/0
  , /*decltype(_impl_.table_background_)*/0
  , /*decltype(_impl_.theme_label_background_enabled_selected_changing_)*/0
  , /*decltype(_impl_.theme_label_background_enabled_selected_)*/0
  , /*decltype(_impl_.theme_label_background_enabled_)*/0
  , /*decltype(_impl_.theme_label_text_disabled_)*/0
  , /*decltype(_impl_.theme_label_line_enabled_selected_changing_)*/0
  , /*decltype(_impl_.theme_label_line_enabled_selected_)*/0
  , /*decltype(_impl_.theme_label_line_enabled_)*/0
  , /*decltype(_impl_.theme_status_background_)*/0
  , /*decltype(_impl_.theme_status_border_)*/0
  , /*decltype(_impl_.theme_label_style_)*/1
  , /*decltype(_impl_.theme_label_background_disabled_)*/8355711
  , /*decltype(_impl_.theme_label_text_enabled_selected_changing_)*/16777215
  , /*decltype(_impl_.theme_label_text_enabled_selected_)*/16777215
  , /*decltype(_impl_.theme_label_text_enabled_)*/16777215
  , /*decltype(_impl_.theme_label_border_enabled_selected_changing_)*/8355711
  , /*decltype(_impl_.theme_label_border_enabled_selected_)*/8355711
  , /*decltype(_impl_.theme_label_border_enabled_)*/16777215
  , /*decltype(_impl_.theme_label_border_disabled_)*/4210752
  , /*decltype(_impl_.theme_label_line_disabled_)*/1
  , /*decltype(_impl_.widget_ppi_style_)*/1
  , /*decltype(_impl_.theme_label_border_thickness_)*/1
  , /*decltype(_impl_.theme_table_border_thickness_)*/1
  , /*decltype(_impl_.theme_status_text_)*/16777215
  , /*decltype(_impl_.theme_alert_)*/16750848
  , /*decltype(_impl_.theme_critical_)*/16711680} {}
struct ThemeHighContrastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeHighContrastDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeHighContrastDefaultTypeInternal() {}
  union {
    ThemeHighContrast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeHighContrastDefaultTypeInternal _ThemeHighContrast_default_instance_;
PROTOBUF_CONSTEXPR ThemeModernBlue::ThemeModernBlue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.theme_font_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.theme_background_)*/0
  , /*decltype(_impl_.table_background_)*/0
  , /*decltype(_impl_.theme_label_background_enabled_)*/0
  , /*decltype(_impl_.theme_label_background_disabled_)*/0
  , /*decltype(_impl_.theme_label_line_enabled_selected_changing_)*/0
  , /*decltype(_impl_.theme_label_line_enabled_selected_)*/0
  , /*decltype(_impl_.theme_label_line_enabled_)*/0
  , /*decltype(_impl_.theme_status_background_)*/0
  , /*decltype(_impl_.theme_status_border_)*/0
  , /*decltype(_impl_.theme_label_style_)*/1
  , /*decltype(_impl_.theme_label_background_enabled_selected_changing_)*/32450
  , /*decltype(_impl_.theme_label_background_enabled_selected_)*/1327195
  , /*decltype(_impl_.theme_label_text_enabled_selected_changing_)*/16777215
  , /*decltype(_impl_.theme_label_text_enabled_selected_)*/16777215
  , /*decltype(_impl_.theme_label_text_enabled_)*/16777215
  , /*decltype(_impl_.theme_label_text_disabled_)*/8355711
  , /*decltype(_impl_.theme_label_border_enabled_selected_changing_)*/1327195
  , /*decltype(_impl_.theme_label_border_enabled_selected_)*/32450
  , /*decltype(_impl_.theme_label_border_enabled_)*/8355711
  , /*decltype(_impl_.theme_label_border_disabled_)*/8355711
  , /*decltype(_impl_.theme_label_line_disabled_)*/1
  , /*decltype(_impl_.widget_ppi_style_)*/5
  , /*decltype(_impl_.theme_label_border_thickness_)*/1
  , /*decltype(_impl_.theme_table_border_thickness_)*/1
  , /*decltype(_impl_.theme_status_text_)*/16777215
  , /*decltype(_impl_.theme_alert_)*/16750848
  , /*decltype(_impl_.theme_critical_)*/16711680} {}
struct ThemeModernBlueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeModernBlueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeModernBlueDefaultTypeInternal() {}
  union {
    ThemeModernBlue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeModernBlueDefaultTypeInternal _ThemeModernBlue_default_instance_;
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.config_filename_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_filename_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_path_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.images_path_)*/{nullptr, ::_pbi::ConstantInitialized{}}} {}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
PROTOBUF_CONSTEXPR OsmScout::OsmScout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_path_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_stylesheet_path_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.enabled_)*/true
  , /*decltype(_impl_.test_lon_)*/153.02259
  , /*decltype(_impl_.test_lat_)*/-27.4744} {}
struct OsmScoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OsmScoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OsmScoutDefaultTypeInternal() {}
  union {
    OsmScout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OsmScoutDefaultTypeInternal _OsmScout_default_instance_;
PROTOBUF_CONSTEXPR KeyBinding::KeyBinding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/0
  , /*decltype(_impl_.bind_)*/0} {}
struct KeyBindingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyBindingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyBindingDefaultTypeInternal() {}
  union {
    KeyBinding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyBindingDefaultTypeInternal _KeyBinding_default_instance_;
PROTOBUF_CONSTEXPR KeyBindingsApc::KeyBindingsApc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bind_)*/nullptr} {}
struct KeyBindingsApcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyBindingsApcDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyBindingsApcDefaultTypeInternal() {}
  union {
    KeyBindingsApc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyBindingsApcDefaultTypeInternal _KeyBindingsApc_default_instance_;
PROTOBUF_CONSTEXPR Gva::Gva(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bindings_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gps_device_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.odb_device_)*/{nullptr, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.osm_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.file_)*/nullptr
  , /*decltype(_impl_.fullscreen_)*/false
  , /*decltype(_impl_.live_)*/false
  , /*decltype(_impl_.zoom_)*/20000
  , /*decltype(_impl_.height_)*/480
  , /*decltype(_impl_.width_)*/640
  , /*decltype(_impl_.brightness_)*/1} {}
struct GvaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GvaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GvaDefaultTypeInternal() {}
  union {
    Gva _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GvaDefaultTypeInternal _Gva_default_instance_;
}  // namespace config
static ::_pb::Metadata file_level_metadata_config_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_config_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const uint32_t TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.table_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_style_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_background_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_background_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_background_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_background_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_text_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_text_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_text_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_text_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_border_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_border_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_border_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_border_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_line_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_line_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_line_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_line_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.widget_ppi_style_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_label_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_table_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_status_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_status_border_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_status_text_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_alert_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_critical_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeDefault, _impl_.theme_font_),
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  1,
  2,
  3,
  4,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  5,
  0,
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.table_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_style_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_background_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_background_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_background_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_background_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_text_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_text_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_text_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_text_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_border_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_border_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_border_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_border_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_line_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_line_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_line_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_line_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.widget_ppi_style_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_label_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_table_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_status_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_status_border_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_status_text_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_alert_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_critical_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeHighContrast, _impl_.theme_font_),
  1,
  2,
  12,
  3,
  4,
  5,
  13,
  14,
  15,
  16,
  6,
  17,
  18,
  19,
  20,
  7,
  8,
  9,
  21,
  22,
  23,
  24,
  10,
  11,
  25,
  26,
  27,
  0,
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.table_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_style_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_background_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_background_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_background_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_background_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_text_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_text_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_text_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_text_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_border_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_border_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_border_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_border_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_line_enabled_selected_changing_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_line_enabled_selected_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_line_enabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_line_disabled_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.widget_ppi_style_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_label_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_table_border_thickness_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_status_background_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_status_border_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_status_text_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_alert_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_critical_),
  PROTOBUF_FIELD_OFFSET(::config::ThemeModernBlue, _impl_.theme_font_),
  1,
  2,
  10,
  11,
  12,
  3,
  4,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  5,
  6,
  7,
  21,
  22,
  23,
  24,
  8,
  9,
  25,
  26,
  27,
  0,
  PROTOBUF_FIELD_OFFSET(::config::File, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::File, _impl_.config_filename_),
  PROTOBUF_FIELD_OFFSET(::config::File, _impl_.log_filename_),
  PROTOBUF_FIELD_OFFSET(::config::File, _impl_.log_path_),
  PROTOBUF_FIELD_OFFSET(::config::File, _impl_.images_path_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::config::OsmScout, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::OsmScout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::OsmScout, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::config::OsmScout, _impl_.map_path_),
  PROTOBUF_FIELD_OFFSET(::config::OsmScout, _impl_.map_stylesheet_path_),
  PROTOBUF_FIELD_OFFSET(::config::OsmScout, _impl_.test_lon_),
  PROTOBUF_FIELD_OFFSET(::config::OsmScout, _impl_.test_lat_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::config::KeyBinding, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::KeyBinding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::KeyBinding, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::config::KeyBinding, _impl_.bind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::config::KeyBindingsApc, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::KeyBindingsApc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::KeyBindingsApc, _impl_.bind_),
  0,
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.fullscreen_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.live_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.zoom_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.gps_device_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.odb_device_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.osm_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.file_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.bindings_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.display_type_),
  PROTOBUF_FIELD_OFFSET(::config::Gva, _impl_.brightness_),
  0,
  11,
  12,
  8,
  9,
  10,
  1,
  2,
  3,
  5,
  6,
  7,
  ~0u,
  4,
  13,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 34, -1, sizeof(::config::ThemeDefault)},
  { 62, 96, -1, sizeof(::config::ThemeHighContrast)},
  { 124, 158, -1, sizeof(::config::ThemeModernBlue)},
  { 186, 196, -1, sizeof(::config::File)},
  { 200, 211, -1, sizeof(::config::OsmScout)},
  { 216, 224, -1, sizeof(::config::KeyBinding)},
  { 226, 233, -1, sizeof(::config::KeyBindingsApc)},
  { 234, 255, -1, sizeof(::config::Gva)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::config::_ThemeDefault_default_instance_._instance,
  &::config::_ThemeHighContrast_default_instance_._instance,
  &::config::_ThemeModernBlue_default_instance_._instance,
  &::config::_File_default_instance_._instance,
  &::config::_OsmScout_default_instance_._instance,
  &::config::_KeyBinding_default_instance_._instance,
  &::config::_KeyBindingsApc_default_instance_._instance,
  &::config::_Gva_default_instance_._instance,
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\006config\"\320\016\n\014ThemeDefault\022"
  "6\n\020theme_background\030\001 \001(\0162\016.config.Colou"
  "r:\014kColourGreen\022:\n\020table_background\030\002 \001("
  "\0162\016.config.Colour:\020kColourDarkGreen\022<\n\021t"
  "heme_label_style\030\003 \001(\0162\022.config.LabelSty"
  "le:\rkLabelRounded\022W\n0theme_label_backgro"
  "und_enabled_selected_changing\030\004 \001(\0162\016.co"
  "nfig.Colour:\rkColourYellow\022Q\n\'theme_labe"
  "l_background_enabled_selected\030\005 \001(\0162\016.co"
  "nfig.Colour:\020kColourDarkGreen\022H\n\036theme_l"
  "abel_background_enabled\030\006 \001(\0162\016.config.C"
  "olour:\020kColourDarkGreen\022D\n\037theme_label_b"
  "ackground_disabled\030\007 \001(\0162\016.config.Colour"
  ":\013kColourGrey\022P\n*theme_label_text_enable"
  "d_selected_changing\030\010 \001(\0162\016.config.Colou"
  "r:\014kColourWhite\022G\n!theme_label_text_enab"
  "led_selected\030\t \001(\0162\016.config.Colour:\014kCol"
  "ourWhite\022>\n\030theme_label_text_enabled\030\n \001"
  "(\0162\016.config.Colour:\014kColourWhite\022\?\n\031them"
  "e_label_text_disabled\030\013 \001(\0162\016.config.Col"
  "our:\014kColourWhite\022W\n,theme_label_border_"
  "enabled_selected_changing\030\014 \001(\0162\016.config"
  ".Colour:\021kColourDarkGreen2\022J\n#theme_labe"
  "l_border_enabled_selected\030\r \001(\0162\016.config"
  ".Colour:\rkColourYellow\022E\n\032theme_label_bo"
  "rder_enabled\030\016 \001(\0162\016.config.Colour:\021kCol"
  "ourDarkGreen2\022D\n\033theme_label_border_disa"
  "bled\030\017 \001(\0162\016.config.Colour:\017kColourDarkG"
  "rey\022Q\n*theme_label_line_enabled_selected"
  "_changing\030\020 \001(\0162\021.config.LineStyle:\nkLin"
  "eSolid\022H\n!theme_label_line_enabled_selec"
  "ted\030\021 \001(\0162\021.config.LineStyle:\nkLineSolid"
  "\022\?\n\030theme_label_line_enabled\030\022 \001(\0162\021.con"
  "fig.LineStyle:\nkLineSolid\022@\n\031theme_label"
  "_line_disabled\030\023 \001(\0162\021.config.LineStyle:"
  "\nkLineSolid\022E\n\020widget_ppi_style\030\024 \001(\0162\020."
  "config.PpiStyle:\031kPpiClassicArrowWithSig"
  "ht\022\'\n\034theme_label_border_thickness\030\025 \001(\005"
  ":\0011\022\'\n\034theme_table_border_thickness\030\026 \001("
  "\005:\0011\022A\n\027theme_status_background\030\027 \001(\0162\016."
  "config.Colour:\020kColourDarkGreen\022=\n\023theme"
  "_status_border\030\030 \001(\0162\016.config.Colour:\020kC"
  "olourDarkGreen\0227\n\021theme_status_text\030\031 \001("
  "\0162\016.config.Colour:\014kColourWhite\0221\n\013theme"
  "_alert\030\032 \001(\0162\016.config.Colour:\014kColourAmb"
  "er\0222\n\016theme_critical\030\033 \001(\0162\016.config.Colo"
  "ur:\nkColourRed\022)\n\ntheme_font\030\034 \001(\t:\025Deja"
  "Vu Sans Mono Book\"\256\016\n\021ThemeHighContrast\022"
  "6\n\020theme_background\030\001 \001(\0162\016.config.Colou"
  "r:\014kColourBlack\0226\n\020table_background\030\002 \001("
  "\0162\016.config.Colour:\014kColourBlack\022<\n\021theme"
  "_label_style\030\003 \001(\0162\022.config.LabelStyle:\r"
  "kLabelRounded\022V\n0theme_label_background_"
  "enabled_selected_changing\030\004 \001(\0162\016.config"
  ".Colour:\014kColourBlack\022M\n\'theme_label_bac"
  "kground_enabled_selected\030\005 \001(\0162\016.config."
  "Colour:\014kColourBlack\022D\n\036theme_label_back"
  "ground_enabled\030\006 \001(\0162\016.config.Colour:\014kC"
  "olourBlack\022D\n\037theme_label_background_dis"
  "abled\030\007 \001(\0162\016.config.Colour:\013kColourGrey"
  "\022P\n*theme_label_text_enabled_selected_ch"
  "anging\030\010 \001(\0162\016.config.Colour:\014kColourWhi"
  "te\022G\n!theme_label_text_enabled_selected\030"
  "\t \001(\0162\016.config.Colour:\014kColourWhite\022>\n\030t"
  "heme_label_text_enabled\030\n \001(\0162\016.config.C"
  "olour:\014kColourWhite\022\?\n\031theme_label_text_"
  "disabled\030\013 \001(\0162\016.config.Colour:\014kColourB"
  "lack\022Q\n,theme_label_border_enabled_selec"
  "ted_changing\030\014 \001(\0162\016.config.Colour:\013kCol"
  "ourGrey\022H\n#theme_label_border_enabled_se"
  "lected\030\r \001(\0162\016.config.Colour:\013kColourGre"
  "y\022@\n\032theme_label_border_enabled\030\016 \001(\0162\016."
  "config.Colour:\014kColourWhite\022D\n\033theme_lab"
  "el_border_disabled\030\017 \001(\0162\016.config.Colour"
  ":\017kColourDarkGrey\022Q\n*theme_label_line_en"
  "abled_selected_changing\030\020 \001(\0162\021.config.L"
  "ineStyle:\nkLineSolid\022H\n!theme_label_line"
  "_enabled_selected\030\021 \001(\0162\021.config.LineSty"
  "le:\nkLineSolid\022\?\n\030theme_label_line_enabl"
  "ed\030\022 \001(\0162\021.config.LineStyle:\nkLineSolid\022"
  "A\n\031theme_label_line_disabled\030\023 \001(\0162\021.con"
  "fig.LineStyle:\013kLineDashed\022D\n\020widget_ppi"
  "_style\030\024 \001(\0162\020.config.PpiStyle:\030kPpiClas"
  "sicTankWithSight\022\'\n\034theme_label_border_t"
  "hickness\030\025 \001(\005:\0011\022\'\n\034theme_table_border_"
  "thickness\030\026 \001(\005:\0011\022=\n\027theme_status_backg"
  "round\030\027 \001(\0162\016.config.Colour:\014kColourBlac"
  "k\0229\n\023theme_status_border\030\030 \001(\0162\016.config."
  "Colour:\014kColourBlack\0227\n\021theme_status_tex"
  "t\030\031 \001(\0162\016.config.Colour:\014kColourWhite\0221\n"
  "\013theme_alert\030\032 \001(\0162\016.config.Colour:\014kCol"
  "ourAmber\0222\n\016theme_critical\030\033 \001(\0162\016.confi"
  "g.Colour:\nkColourRed\022$\n\ntheme_font\030\034 \001(\t"
  ":\020Courier 10 Pitch\"\317\016\n\017ThemeModernBlue\0226"
  "\n\020theme_background\030\001 \001(\0162\016.config.Colour"
  ":\014kColourBlack\0226\n\020table_background\030\002 \001(\016"
  "2\016.config.Colour:\014kColourBlack\022<\n\021theme_"
  "label_style\030\003 \001(\0162\022.config.LabelStyle:\rk"
  "LabelRounded\022`\n0theme_label_background_e"
  "nabled_selected_changing\030\004 \001(\0162\016.config."
  "Colour:\026kColourModernBlueLight\022V\n\'theme_"
  "label_background_enabled_selected\030\005 \001(\0162"
  "\016.config.Colour:\025kColourModernBlueDark\022D"
  "\n\036theme_label_background_enabled\030\006 \001(\0162\016"
  ".config.Colour:\014kColourBlack\022E\n\037theme_la"
  "bel_background_disabled\030\007 \001(\0162\016.config.C"
  "olour:\014kColourBlack\022P\n*theme_label_text_"
  "enabled_selected_changing\030\010 \001(\0162\016.config"
  ".Colour:\014kColourWhite\022G\n!theme_label_tex"
  "t_enabled_selected\030\t \001(\0162\016.config.Colour"
  ":\014kColourWhite\022>\n\030theme_label_text_enabl"
  "ed\030\n \001(\0162\016.config.Colour:\014kColourWhite\022>"
  "\n\031theme_label_text_disabled\030\013 \001(\0162\016.conf"
  "ig.Colour:\013kColourGrey\022[\n,theme_label_bo"
  "rder_enabled_selected_changing\030\014 \001(\0162\016.c"
  "onfig.Colour:\025kColourModernBlueDark\022S\n#t"
  "heme_label_border_enabled_selected\030\r \001(\016"
  "2\016.config.Colour:\026kColourModernBlueLight"
  "\022\?\n\032theme_label_border_enabled\030\016 \001(\0162\016.c"
  "onfig.Colour:\013kColourGrey\022@\n\033theme_label"
  "_border_disabled\030\017 \001(\0162\016.config.Colour:\013"
  "kColourGrey\022Q\n*theme_label_line_enabled_"
  "selected_changing\030\020 \001(\0162\021.config.LineSty"
  "le:\nkLineSolid\022H\n!theme_label_line_enabl"
  "ed_selected\030\021 \001(\0162\021.config.LineStyle:\nkL"
  "ineSolid\022\?\n\030theme_label_line_enabled\030\022 \001"
  "(\0162\021.config.LineStyle:\nkLineSolid\022A\n\031the"
  "me_label_line_disabled\030\023 \001(\0162\021.config.Li"
  "neStyle:\013kLineDashed\022D\n\020widget_ppi_style"
  "\030\024 \001(\0162\020.config.PpiStyle:\030kPpiModernTank"
  "WithSights\022\'\n\034theme_label_border_thickne"
  "ss\030\025 \001(\005:\0011\022\'\n\034theme_table_border_thickn"
  "ess\030\026 \001(\005:\0011\022=\n\027theme_status_background\030"
  "\027 \001(\0162\016.config.Colour:\014kColourBlack\0229\n\023t"
  "heme_status_border\030\030 \001(\0162\016.config.Colour"
  ":\014kColourBlack\0227\n\021theme_status_text\030\031 \001("
  "\0162\016.config.Colour:\014kColourWhite\0221\n\013theme"
  "_alert\030\032 \001(\0162\016.config.Colour:\014kColourAmb"
  "er\0222\n\016theme_critical\030\033 \001(\0162\016.config.Colo"
  "ur:\nkColourRed\022$\n\ntheme_font\030\034 \001(\t:\020Cour"
  "ier 10 Pitch\"\217\001\n\004File\022\"\n\017config_filename"
  "\030\001 \002(\t:\tconfig.pb\022\035\n\014log_filename\030\002 \002(\t:"
  "\007gva.log\022\032\n\010log_path\030\003 \002(\t:\010/var/log\022(\n\013"
  "images_path\030\004 \002(\t:\023/opt/gva/hmi/images\"\327"
  "\001\n\010OsmScout\022\025\n\007enabled\030\001 \002(\010:\004true\0226\n\010ma"
  "p_path\030\002 \001(\t:$/opt/osmscout/maps/austral"
  "ia-latest/\022C\n\023map_stylesheet_path\030\003 \001(\t:"
  "&/opt/osmscout/stylesheets/standard.oss\022"
  "\033\n\010test_lon\030\004 \001(\001:\t153.02259\022\032\n\010test_lat"
  "\030\005 \001(\001:\010-27.4744\"4\n\nKeyBinding\022\030\n\003key\030\001 "
  "\001(\0162\013.config.Key\022\014\n\004Bind\030\002 \001(\005\"2\n\016KeyBin"
  "dingsApc\022 \n\004bind\030\002 \001(\0132\022.config.KeyBindi"
  "ng\"\204\003\n\003Gva\022\014\n\004name\030\001 \002(\t\022\023\n\006height\030\003 \001(\005"
  ":\003480\022\022\n\005width\030\004 \001(\005:\003640\022\031\n\nfullscreen\030"
  "\005 \001(\010:\005false\022\014\n\004live\030\006 \001(\010\022\023\n\004zoom\030\007 \001(\005"
  ":\00520000\022\016\n\006device\030\010 \001(\t\022 \n\ngps_device\030\t "
  "\001(\t:\014/dev/ttyUSB0\022 \n\nodb_device\030\n \001(\t:\014/"
  "dev/ttyUSB1\022\035\n\003osm\030\013 \001(\0132\020.config.OsmSco"
  "ut\022&\n\005theme\030\014 \001(\0132\027.config.ThemeModernBl"
  "ue\022\032\n\004file\030\r \001(\0132\014.config.File\022$\n\010bindin"
  "gs\030\016 \003(\0132\022.config.KeyBinding\022\024\n\014display_"
  "type\030\017 \001(\t\022\025\n\nbrightness\030\020 \001(\001:\0011*\237\003\n\006Co"
  "lour\022\023\n\014kColourAmber\020\200\262\376\007\022\023\n\014kColourWhit"
  "e\020\377\377\377\007\022\021\n\nkColourRed\020\200\200\374\007\022\022\n\013kColourGrey"
  "\020\377\376\375\003\022\030\n\021kColourMediumGrey\020\340\300\201\003\022\026\n\017kColo"
  "urDarkGrey\020\300\200\201\002\022\022\n\014kColourGreen\020\200\376\003\022\026\n\020k"
  "ColourDarkGreen\020\200\376\001\022\027\n\021kColourDarkGreen2"
  "\020\200\226\001\022\020\n\013kColourBlue\020\377\001\022\021\n\013kColourCyan\020\377\377"
  "\003\022\026\n\017kColourDarkBlue\020\231\315\315\001\022\027\n\020kColourLigh"
  "tBlue\020\377\345\310\001\022\020\n\014kColourBlack\020\000\022\024\n\rkColourY"
  "ellow\020\200\376\377\007\022\024\n\rkColourOrange\020\200\312\376\007\022\034\n\026kCol"
  "ourModernBlueLight\020\302\375\001\022\033\n\025kColourModernB"
  "lueDark\020\333\200Q*1\n\nLabelStyle\022\020\n\014kLabelSquar"
  "e\020\000\022\021\n\rkLabelRounded\020\001*=\n\tLineStyle\022\016\n\nk"
  "LineSolid\020\000\022\017\n\013kLineDashed\020\001\022\017\n\013kLineDot"
  "ted\020\002*\311\001\n\010PpiStyle\022\034\n\030kPpiClassicTankWit"
  "hSight\020\001\022\037\n\033kPpiClassicTankWithoutSight\020"
  "\002\022\035\n\031kPpiClassicArrowWithSight\020\003\022 \n\034kPpi"
  "ClassicArrowWithoutSight\020\004\022\034\n\030kPpiModern"
  "TankWithSights\020\005\022\037\n\033kPpiModernTankWithou"
  "tSights\020\006*\277\003\n\003Key\022\013\n\007kKeyBLK\020\000\022\n\n\006kKeySA"
  "\020\001\022\013\n\007kKeyWPN\020\002\022\013\n\007kKeyDEF\020\003\022\013\n\007kKeySYS\020"
  "\004\022\013\n\007kKeyDRV\020\005\022\013\n\007kKeySTR\020\006\022\013\n\007kKeyCOM\020\007"
  "\022\013\n\007kKeyBMS\020\010\022\n\n\006kKeyF1\020\t\022\n\n\006kKeyF2\020\n\022\n\n"
  "\006kKeyF3\020\013\022\n\n\006kKeyF4\020\014\022\n\n\006kKeyF5\020\r\022\n\n\006kKe"
  "yF6\020\016\022\n\n\006kKeyF7\020\017\022\n\n\006kKeyF8\020\020\022\n\n\006kKeyF9\020"
  "\021\022\013\n\007kKeyF10\020\022\022\013\n\007kKeyF11\020\023\022\013\n\007kKeyF12\020\024"
  "\022\013\n\007kKeyF13\020\025\022\013\n\007kKeyF14\020\026\022\013\n\007kKeyF15\020\027\022"
  "\013\n\007kKeyF16\020\030\022\013\n\007kKeyF17\020\031\022\013\n\007kKeyF18\020\032\022\013"
  "\n\007kKeyF19\020\033\022\013\n\007kKeyF20\020\034\022\017\n\013kKeyUpArrow\020"
  "\035\022\021\n\rkKeyDownArrow\020\036\022\022\n\016kKeyRightArrow\020\037"
  "\022\021\n\rkKeyLeftArrow\020 "
  ;
static ::_pbi::once_flag descriptor_table_config_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_config_2eproto = {
    false, false, 7659, descriptor_table_protodef_config_2eproto,
    "config.proto",
    &descriptor_table_config_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_config_2eproto::offsets,
    file_level_metadata_config_2eproto, file_level_enum_descriptors_config_2eproto,
    file_level_service_descriptors_config_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_config_2eproto_getter() {
  return &descriptor_table_config_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_config_2eproto(&descriptor_table_config_2eproto);
namespace config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Colour_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[0];
}
bool Colour_IsValid(int value) {
  switch (value) {
    case 0:
    case 255:
    case 19200:
    case 32450:
    case 32512:
    case 65280:
    case 65535:
    case 1327195:
    case 3289855:
    case 3368601:
    case 4210752:
    case 6316128:
    case 8355711:
    case 16711680:
    case 16750848:
    case 16753920:
    case 16776960:
    case 16777215:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LabelStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[1];
}
bool LabelStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LineStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[2];
}
bool LineStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PpiStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[3];
}
bool PpiStyle_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Key_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[4];
}
bool Key_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ThemeDefault::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeDefault>()._impl_._has_bits_);
  static void set_has_theme_background(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_table_background(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_theme_label_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_theme_label_background_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theme_label_background_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_theme_label_background_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_theme_label_background_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_theme_label_text_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_theme_label_text_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_theme_label_text_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_theme_label_text_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_theme_label_border_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_theme_label_border_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_theme_label_border_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_theme_label_border_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_theme_label_line_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_theme_label_line_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_theme_label_line_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theme_label_line_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_widget_ppi_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_theme_label_border_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_theme_table_border_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_theme_status_background(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_theme_status_border(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_theme_status_text(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_theme_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_theme_critical(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_theme_font(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ThemeDefault::Impl_::_i_give_permission_to_break_this_code_default_theme_font_{{{"DejaVu Sans Mono Book", 21}}, {nullptr}};
ThemeDefault::ThemeDefault(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.ThemeDefault)
}
ThemeDefault::ThemeDefault(const ThemeDefault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeDefault* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.theme_font_){}
    , decltype(_impl_.theme_label_line_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_line_enabled_selected_){}
    , decltype(_impl_.theme_label_line_enabled_){}
    , decltype(_impl_.theme_label_line_disabled_){}
    , decltype(_impl_.theme_critical_){}
    , decltype(_impl_.theme_background_){}
    , decltype(_impl_.table_background_){}
    , decltype(_impl_.theme_label_style_){}
    , decltype(_impl_.theme_label_background_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_background_enabled_selected_){}
    , decltype(_impl_.theme_label_background_enabled_){}
    , decltype(_impl_.theme_label_background_disabled_){}
    , decltype(_impl_.theme_label_text_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_text_enabled_selected_){}
    , decltype(_impl_.theme_label_text_enabled_){}
    , decltype(_impl_.theme_label_text_disabled_){}
    , decltype(_impl_.theme_label_border_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_border_enabled_selected_){}
    , decltype(_impl_.theme_label_border_enabled_){}
    , decltype(_impl_.theme_label_border_disabled_){}
    , decltype(_impl_.widget_ppi_style_){}
    , decltype(_impl_.theme_label_border_thickness_){}
    , decltype(_impl_.theme_table_border_thickness_){}
    , decltype(_impl_.theme_status_background_){}
    , decltype(_impl_.theme_status_border_){}
    , decltype(_impl_.theme_status_text_){}
    , decltype(_impl_.theme_alert_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.theme_font_.InitDefault();
  if (from._internal_has_theme_font()) {
    _this->_impl_.theme_font_.Set(from._internal_theme_font(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.theme_label_line_enabled_selected_changing_, &from._impl_.theme_label_line_enabled_selected_changing_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theme_alert_) -
    reinterpret_cast<char*>(&_impl_.theme_label_line_enabled_selected_changing_)) + sizeof(_impl_.theme_alert_));
  // @@protoc_insertion_point(copy_constructor:config.ThemeDefault)
}

inline void ThemeDefault::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.theme_font_){}
    , decltype(_impl_.theme_label_line_enabled_selected_changing_){0}
    , decltype(_impl_.theme_label_line_enabled_selected_){0}
    , decltype(_impl_.theme_label_line_enabled_){0}
    , decltype(_impl_.theme_label_line_disabled_){0}
    , decltype(_impl_.theme_critical_){16711680}
    , decltype(_impl_.theme_background_){65280}
    , decltype(_impl_.table_background_){32512}
    , decltype(_impl_.theme_label_style_){1}
    , decltype(_impl_.theme_label_background_enabled_selected_changing_){16776960}
    , decltype(_impl_.theme_label_background_enabled_selected_){32512}
    , decltype(_impl_.theme_label_background_enabled_){32512}
    , decltype(_impl_.theme_label_background_disabled_){8355711}
    , decltype(_impl_.theme_label_text_enabled_selected_changing_){16777215}
    , decltype(_impl_.theme_label_text_enabled_selected_){16777215}
    , decltype(_impl_.theme_label_text_enabled_){16777215}
    , decltype(_impl_.theme_label_text_disabled_){16777215}
    , decltype(_impl_.theme_label_border_enabled_selected_changing_){19200}
    , decltype(_impl_.theme_label_border_enabled_selected_){16776960}
    , decltype(_impl_.theme_label_border_enabled_){19200}
    , decltype(_impl_.theme_label_border_disabled_){4210752}
    , decltype(_impl_.widget_ppi_style_){3}
    , decltype(_impl_.theme_label_border_thickness_){1}
    , decltype(_impl_.theme_table_border_thickness_){1}
    , decltype(_impl_.theme_status_background_){32512}
    , decltype(_impl_.theme_status_border_){32512}
    , decltype(_impl_.theme_status_text_){16777215}
    , decltype(_impl_.theme_alert_){16750848}
  };
  _impl_.theme_font_.InitDefault();
}

ThemeDefault::~ThemeDefault() {
  // @@protoc_insertion_point(destructor:config.ThemeDefault)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeDefault::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.theme_font_.Destroy();
}

void ThemeDefault::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeDefault::Clear() {
// @@protoc_insertion_point(message_clear_start:config.ThemeDefault)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.theme_font_.ClearToDefault(::config::ThemeDefault::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
     }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.theme_label_line_enabled_selected_changing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.theme_label_line_disabled_) -
        reinterpret_cast<char*>(&_impl_.theme_label_line_enabled_selected_changing_)) + sizeof(_impl_.theme_label_line_disabled_));
    _impl_.theme_critical_ = 16711680;
    _impl_.theme_background_ = 65280;
    _impl_.table_background_ = 32512;
  }
  if (cached_has_bits & 0x0000ff00u) {
    _impl_.theme_label_style_ = 1;
    _impl_.theme_label_background_enabled_selected_changing_ = 16776960;
    _impl_.theme_label_background_enabled_selected_ = 32512;
    _impl_.theme_label_background_enabled_ = 32512;
    _impl_.theme_label_background_disabled_ = 8355711;
    _impl_.theme_label_text_enabled_selected_changing_ = 16777215;
    _impl_.theme_label_text_enabled_selected_ = 16777215;
    _impl_.theme_label_text_enabled_ = 16777215;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.theme_label_text_disabled_ = 16777215;
    _impl_.theme_label_border_enabled_selected_changing_ = 19200;
    _impl_.theme_label_border_enabled_selected_ = 16776960;
    _impl_.theme_label_border_enabled_ = 19200;
    _impl_.theme_label_border_disabled_ = 4210752;
    _impl_.widget_ppi_style_ = 3;
    _impl_.theme_label_border_thickness_ = 1;
    _impl_.theme_table_border_thickness_ = 1;
  }
  if (cached_has_bits & 0x0f000000u) {
    _impl_.theme_status_background_ = 32512;
    _impl_.theme_status_border_ = 32512;
    _impl_.theme_status_text_ = 16777215;
    _impl_.theme_alert_ = 16750848;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeDefault::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .config.Colour theme_background = 1 [default = kColourGreen];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour table_background = 2 [default = kColourDarkGreen];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_table_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LabelStyle_IsValid(val))) {
            _internal_set_theme_label_style(static_cast<::config::LabelStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourYellow];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourDarkGreen];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled = 6 [default = kColourDarkGreen];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_disabled = 11 [default = kColourWhite];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourDarkGreen2];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourYellow];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled = 14 [default = kColourDarkGreen2];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled_selected_changing(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled_selected(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineSolid];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_disabled(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicArrowWithSight];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::PpiStyle_IsValid(val))) {
            _internal_set_widget_ppi_style(static_cast<::config::PpiStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 theme_label_border_thickness = 21 [default = 1];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_theme_label_border_thickness(&has_bits);
          _impl_.theme_label_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 theme_table_border_thickness = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_theme_table_border_thickness(&has_bits);
          _impl_.theme_table_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_background = 23 [default = kColourDarkGreen];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_border = 24 [default = kColourDarkGreen];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_border(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_text(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_alert = 26 [default = kColourAmber];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_alert(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_critical = 27 [default = kColourRed];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_critical(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string theme_font = 28 [default = "DejaVu Sans Mono Book"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_theme_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.ThemeDefault.theme_font");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeDefault::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.ThemeDefault)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .config.Colour theme_background = 1 [default = kColourGreen];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_theme_background(), target);
  }

  // optional .config.Colour table_background = 2 [default = kColourDarkGreen];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_table_background(), target);
  }

  // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_theme_label_style(), target);
  }

  // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourYellow];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_theme_label_background_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourDarkGreen];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_theme_label_background_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_background_enabled = 6 [default = kColourDarkGreen];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_theme_label_background_enabled(), target);
  }

  // optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_theme_label_background_disabled(), target);
  }

  // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_theme_label_text_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_theme_label_text_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_theme_label_text_enabled(), target);
  }

  // optional .config.Colour theme_label_text_disabled = 11 [default = kColourWhite];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_theme_label_text_disabled(), target);
  }

  // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourDarkGreen2];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_theme_label_border_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourYellow];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_theme_label_border_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_border_enabled = 14 [default = kColourDarkGreen2];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_theme_label_border_enabled(), target);
  }

  // optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_theme_label_border_disabled(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_theme_label_line_enabled_selected_changing(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_theme_label_line_enabled_selected(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_theme_label_line_enabled(), target);
  }

  // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineSolid];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_theme_label_line_disabled(), target);
  }

  // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicArrowWithSight];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_widget_ppi_style(), target);
  }

  // optional int32 theme_label_border_thickness = 21 [default = 1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_theme_label_border_thickness(), target);
  }

  // optional int32 theme_table_border_thickness = 22 [default = 1];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_theme_table_border_thickness(), target);
  }

  // optional .config.Colour theme_status_background = 23 [default = kColourDarkGreen];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_theme_status_background(), target);
  }

  // optional .config.Colour theme_status_border = 24 [default = kColourDarkGreen];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_theme_status_border(), target);
  }

  // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_theme_status_text(), target);
  }

  // optional .config.Colour theme_alert = 26 [default = kColourAmber];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_theme_alert(), target);
  }

  // optional .config.Colour theme_critical = 27 [default = kColourRed];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_theme_critical(), target);
  }

  // optional string theme_font = 28 [default = "DejaVu Sans Mono Book"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_theme_font().data(), static_cast<int>(this->_internal_theme_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.ThemeDefault.theme_font");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_theme_font(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.ThemeDefault)
  return target;
}

size_t ThemeDefault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.ThemeDefault)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string theme_font = 28 [default = "DejaVu Sans Mono Book"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_theme_font());
    }

    // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled_selected_changing());
    }

    // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled_selected());
    }

    // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled());
    }

    // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineSolid];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_disabled());
    }

    // optional .config.Colour theme_critical = 27 [default = kColourRed];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_critical());
    }

    // optional .config.Colour theme_background = 1 [default = kColourGreen];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_background());
    }

    // optional .config.Colour table_background = 2 [default = kColourDarkGreen];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_table_background());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_style());
    }

    // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourYellow];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourDarkGreen];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled_selected());
    }

    // optional .config.Colour theme_label_background_enabled = 6 [default = kColourDarkGreen];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled());
    }

    // optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_disabled());
    }

    // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled_selected());
    }

    // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .config.Colour theme_label_text_disabled = 11 [default = kColourWhite];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_disabled());
    }

    // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourDarkGreen2];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourYellow];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled_selected());
    }

    // optional .config.Colour theme_label_border_enabled = 14 [default = kColourDarkGreen2];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled());
    }

    // optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_disabled());
    }

    // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicArrowWithSight];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_widget_ppi_style());
    }

    // optional int32 theme_label_border_thickness = 21 [default = 1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_theme_label_border_thickness());
    }

    // optional int32 theme_table_border_thickness = 22 [default = 1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_theme_table_border_thickness());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional .config.Colour theme_status_background = 23 [default = kColourDarkGreen];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_background());
    }

    // optional .config.Colour theme_status_border = 24 [default = kColourDarkGreen];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_border());
    }

    // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_text());
    }

    // optional .config.Colour theme_alert = 26 [default = kColourAmber];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_alert());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeDefault::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeDefault::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeDefault::GetClassData() const { return &_class_data_; }


void ThemeDefault::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeDefault*>(&to_msg);
  auto& from = static_cast<const ThemeDefault&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.ThemeDefault)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_theme_font(from._internal_theme_font());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.theme_label_line_enabled_selected_changing_ = from._impl_.theme_label_line_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.theme_label_line_enabled_selected_ = from._impl_.theme_label_line_enabled_selected_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.theme_label_line_enabled_ = from._impl_.theme_label_line_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.theme_label_line_disabled_ = from._impl_.theme_label_line_disabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.theme_critical_ = from._impl_.theme_critical_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.theme_background_ = from._impl_.theme_background_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.table_background_ = from._impl_.table_background_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.theme_label_style_ = from._impl_.theme_label_style_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.theme_label_background_enabled_selected_changing_ = from._impl_.theme_label_background_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.theme_label_background_enabled_selected_ = from._impl_.theme_label_background_enabled_selected_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.theme_label_background_enabled_ = from._impl_.theme_label_background_enabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.theme_label_background_disabled_ = from._impl_.theme_label_background_disabled_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.theme_label_text_enabled_selected_changing_ = from._impl_.theme_label_text_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.theme_label_text_enabled_selected_ = from._impl_.theme_label_text_enabled_selected_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.theme_label_text_enabled_ = from._impl_.theme_label_text_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.theme_label_text_disabled_ = from._impl_.theme_label_text_disabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.theme_label_border_enabled_selected_changing_ = from._impl_.theme_label_border_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.theme_label_border_enabled_selected_ = from._impl_.theme_label_border_enabled_selected_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.theme_label_border_enabled_ = from._impl_.theme_label_border_enabled_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.theme_label_border_disabled_ = from._impl_.theme_label_border_disabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.widget_ppi_style_ = from._impl_.widget_ppi_style_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.theme_label_border_thickness_ = from._impl_.theme_label_border_thickness_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.theme_table_border_thickness_ = from._impl_.theme_table_border_thickness_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.theme_status_background_ = from._impl_.theme_status_background_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.theme_status_border_ = from._impl_.theme_status_border_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.theme_status_text_ = from._impl_.theme_status_text_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.theme_alert_ = from._impl_.theme_alert_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeDefault::CopyFrom(const ThemeDefault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.ThemeDefault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeDefault::IsInitialized() const {
  return true;
}

void ThemeDefault::InternalSwap(ThemeDefault* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.theme_font_, lhs_arena,
      &other->_impl_.theme_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeDefault, _impl_.theme_label_line_disabled_)
      + sizeof(ThemeDefault::_impl_.theme_label_line_disabled_)
      - PROTOBUF_FIELD_OFFSET(ThemeDefault, _impl_.theme_label_line_enabled_selected_changing_)>(
          reinterpret_cast<char*>(&_impl_.theme_label_line_enabled_selected_changing_),
          reinterpret_cast<char*>(&other->_impl_.theme_label_line_enabled_selected_changing_));
  swap(_impl_.theme_critical_, other->_impl_.theme_critical_);
  swap(_impl_.theme_background_, other->_impl_.theme_background_);
  swap(_impl_.table_background_, other->_impl_.table_background_);
  swap(_impl_.theme_label_style_, other->_impl_.theme_label_style_);
  swap(_impl_.theme_label_background_enabled_selected_changing_, other->_impl_.theme_label_background_enabled_selected_changing_);
  swap(_impl_.theme_label_background_enabled_selected_, other->_impl_.theme_label_background_enabled_selected_);
  swap(_impl_.theme_label_background_enabled_, other->_impl_.theme_label_background_enabled_);
  swap(_impl_.theme_label_background_disabled_, other->_impl_.theme_label_background_disabled_);
  swap(_impl_.theme_label_text_enabled_selected_changing_, other->_impl_.theme_label_text_enabled_selected_changing_);
  swap(_impl_.theme_label_text_enabled_selected_, other->_impl_.theme_label_text_enabled_selected_);
  swap(_impl_.theme_label_text_enabled_, other->_impl_.theme_label_text_enabled_);
  swap(_impl_.theme_label_text_disabled_, other->_impl_.theme_label_text_disabled_);
  swap(_impl_.theme_label_border_enabled_selected_changing_, other->_impl_.theme_label_border_enabled_selected_changing_);
  swap(_impl_.theme_label_border_enabled_selected_, other->_impl_.theme_label_border_enabled_selected_);
  swap(_impl_.theme_label_border_enabled_, other->_impl_.theme_label_border_enabled_);
  swap(_impl_.theme_label_border_disabled_, other->_impl_.theme_label_border_disabled_);
  swap(_impl_.widget_ppi_style_, other->_impl_.widget_ppi_style_);
  swap(_impl_.theme_label_border_thickness_, other->_impl_.theme_label_border_thickness_);
  swap(_impl_.theme_table_border_thickness_, other->_impl_.theme_table_border_thickness_);
  swap(_impl_.theme_status_background_, other->_impl_.theme_status_background_);
  swap(_impl_.theme_status_border_, other->_impl_.theme_status_border_);
  swap(_impl_.theme_status_text_, other->_impl_.theme_status_text_);
  swap(_impl_.theme_alert_, other->_impl_.theme_alert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeDefault::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[0]);
}

// ===================================================================

class ThemeHighContrast::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeHighContrast>()._impl_._has_bits_);
  static void set_has_theme_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_table_background(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_theme_label_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_theme_label_background_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theme_label_background_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_theme_label_background_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_theme_label_background_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_theme_label_text_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_theme_label_text_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_theme_label_text_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_theme_label_text_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_theme_label_border_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_theme_label_border_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_theme_label_border_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_theme_label_border_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_theme_label_line_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_theme_label_line_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_theme_label_line_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theme_label_line_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_widget_ppi_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_theme_label_border_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_theme_table_border_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_theme_status_background(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_theme_status_border(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_theme_status_text(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_theme_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_theme_critical(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_theme_font(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ThemeHighContrast::Impl_::_i_give_permission_to_break_this_code_default_theme_font_{{{"Courier 10 Pitch", 16}}, {nullptr}};
ThemeHighContrast::ThemeHighContrast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.ThemeHighContrast)
}
ThemeHighContrast::ThemeHighContrast(const ThemeHighContrast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeHighContrast* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.theme_font_){}
    , decltype(_impl_.theme_background_){}
    , decltype(_impl_.table_background_){}
    , decltype(_impl_.theme_label_background_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_background_enabled_selected_){}
    , decltype(_impl_.theme_label_background_enabled_){}
    , decltype(_impl_.theme_label_text_disabled_){}
    , decltype(_impl_.theme_label_line_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_line_enabled_selected_){}
    , decltype(_impl_.theme_label_line_enabled_){}
    , decltype(_impl_.theme_status_background_){}
    , decltype(_impl_.theme_status_border_){}
    , decltype(_impl_.theme_label_style_){}
    , decltype(_impl_.theme_label_background_disabled_){}
    , decltype(_impl_.theme_label_text_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_text_enabled_selected_){}
    , decltype(_impl_.theme_label_text_enabled_){}
    , decltype(_impl_.theme_label_border_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_border_enabled_selected_){}
    , decltype(_impl_.theme_label_border_enabled_){}
    , decltype(_impl_.theme_label_border_disabled_){}
    , decltype(_impl_.theme_label_line_disabled_){}
    , decltype(_impl_.widget_ppi_style_){}
    , decltype(_impl_.theme_label_border_thickness_){}
    , decltype(_impl_.theme_table_border_thickness_){}
    , decltype(_impl_.theme_status_text_){}
    , decltype(_impl_.theme_alert_){}
    , decltype(_impl_.theme_critical_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.theme_font_.InitDefault();
  if (from._internal_has_theme_font()) {
    _this->_impl_.theme_font_.Set(from._internal_theme_font(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.theme_background_, &from._impl_.theme_background_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theme_critical_) -
    reinterpret_cast<char*>(&_impl_.theme_background_)) + sizeof(_impl_.theme_critical_));
  // @@protoc_insertion_point(copy_constructor:config.ThemeHighContrast)
}

inline void ThemeHighContrast::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.theme_font_){}
    , decltype(_impl_.theme_background_){0}
    , decltype(_impl_.table_background_){0}
    , decltype(_impl_.theme_label_background_enabled_selected_changing_){0}
    , decltype(_impl_.theme_label_background_enabled_selected_){0}
    , decltype(_impl_.theme_label_background_enabled_){0}
    , decltype(_impl_.theme_label_text_disabled_){0}
    , decltype(_impl_.theme_label_line_enabled_selected_changing_){0}
    , decltype(_impl_.theme_label_line_enabled_selected_){0}
    , decltype(_impl_.theme_label_line_enabled_){0}
    , decltype(_impl_.theme_status_background_){0}
    , decltype(_impl_.theme_status_border_){0}
    , decltype(_impl_.theme_label_style_){1}
    , decltype(_impl_.theme_label_background_disabled_){8355711}
    , decltype(_impl_.theme_label_text_enabled_selected_changing_){16777215}
    , decltype(_impl_.theme_label_text_enabled_selected_){16777215}
    , decltype(_impl_.theme_label_text_enabled_){16777215}
    , decltype(_impl_.theme_label_border_enabled_selected_changing_){8355711}
    , decltype(_impl_.theme_label_border_enabled_selected_){8355711}
    , decltype(_impl_.theme_label_border_enabled_){16777215}
    , decltype(_impl_.theme_label_border_disabled_){4210752}
    , decltype(_impl_.theme_label_line_disabled_){1}
    , decltype(_impl_.widget_ppi_style_){1}
    , decltype(_impl_.theme_label_border_thickness_){1}
    , decltype(_impl_.theme_table_border_thickness_){1}
    , decltype(_impl_.theme_status_text_){16777215}
    , decltype(_impl_.theme_alert_){16750848}
    , decltype(_impl_.theme_critical_){16711680}
  };
  _impl_.theme_font_.InitDefault();
}

ThemeHighContrast::~ThemeHighContrast() {
  // @@protoc_insertion_point(destructor:config.ThemeHighContrast)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeHighContrast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.theme_font_.Destroy();
}

void ThemeHighContrast::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeHighContrast::Clear() {
// @@protoc_insertion_point(message_clear_start:config.ThemeHighContrast)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.theme_font_.ClearToDefault(::config::ThemeHighContrast::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
     }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.theme_background_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.theme_label_line_enabled_selected_changing_) -
        reinterpret_cast<char*>(&_impl_.theme_background_)) + sizeof(_impl_.theme_label_line_enabled_selected_changing_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.theme_label_line_enabled_selected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.theme_status_border_) -
        reinterpret_cast<char*>(&_impl_.theme_label_line_enabled_selected_)) + sizeof(_impl_.theme_status_border_));
    _impl_.theme_label_style_ = 1;
    _impl_.theme_label_background_disabled_ = 8355711;
    _impl_.theme_label_text_enabled_selected_changing_ = 16777215;
    _impl_.theme_label_text_enabled_selected_ = 16777215;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.theme_label_text_enabled_ = 16777215;
    _impl_.theme_label_border_enabled_selected_changing_ = 8355711;
    _impl_.theme_label_border_enabled_selected_ = 8355711;
    _impl_.theme_label_border_enabled_ = 16777215;
    _impl_.theme_label_border_disabled_ = 4210752;
    _impl_.theme_label_line_disabled_ = 1;
    _impl_.widget_ppi_style_ = 1;
    _impl_.theme_label_border_thickness_ = 1;
  }
  if (cached_has_bits & 0x0f000000u) {
    _impl_.theme_table_border_thickness_ = 1;
    _impl_.theme_status_text_ = 16777215;
    _impl_.theme_alert_ = 16750848;
    _impl_.theme_critical_ = 16711680;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeHighContrast::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .config.Colour theme_background = 1 [default = kColourBlack];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour table_background = 2 [default = kColourBlack];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_table_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LabelStyle_IsValid(val))) {
            _internal_set_theme_label_style(static_cast<::config::LabelStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourBlack];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourBlack];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_disabled = 11 [default = kColourBlack];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourGrey];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourGrey];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled = 14 [default = kColourWhite];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled_selected_changing(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled_selected(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_disabled(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicTankWithSight];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::PpiStyle_IsValid(val))) {
            _internal_set_widget_ppi_style(static_cast<::config::PpiStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 theme_label_border_thickness = 21 [default = 1];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_theme_label_border_thickness(&has_bits);
          _impl_.theme_label_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 theme_table_border_thickness = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_theme_table_border_thickness(&has_bits);
          _impl_.theme_table_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_background = 23 [default = kColourBlack];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_border = 24 [default = kColourBlack];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_border(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_text(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_alert = 26 [default = kColourAmber];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_alert(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_critical = 27 [default = kColourRed];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_critical(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string theme_font = 28 [default = "Courier 10 Pitch"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_theme_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.ThemeHighContrast.theme_font");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeHighContrast::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.ThemeHighContrast)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .config.Colour theme_background = 1 [default = kColourBlack];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_theme_background(), target);
  }

  // optional .config.Colour table_background = 2 [default = kColourBlack];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_table_background(), target);
  }

  // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_theme_label_style(), target);
  }

  // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourBlack];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_theme_label_background_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourBlack];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_theme_label_background_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_theme_label_background_enabled(), target);
  }

  // optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_theme_label_background_disabled(), target);
  }

  // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_theme_label_text_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_theme_label_text_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_theme_label_text_enabled(), target);
  }

  // optional .config.Colour theme_label_text_disabled = 11 [default = kColourBlack];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_theme_label_text_disabled(), target);
  }

  // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourGrey];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_theme_label_border_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourGrey];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_theme_label_border_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_border_enabled = 14 [default = kColourWhite];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_theme_label_border_enabled(), target);
  }

  // optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_theme_label_border_disabled(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_theme_label_line_enabled_selected_changing(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_theme_label_line_enabled_selected(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_theme_label_line_enabled(), target);
  }

  // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_theme_label_line_disabled(), target);
  }

  // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicTankWithSight];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_widget_ppi_style(), target);
  }

  // optional int32 theme_label_border_thickness = 21 [default = 1];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_theme_label_border_thickness(), target);
  }

  // optional int32 theme_table_border_thickness = 22 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_theme_table_border_thickness(), target);
  }

  // optional .config.Colour theme_status_background = 23 [default = kColourBlack];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_theme_status_background(), target);
  }

  // optional .config.Colour theme_status_border = 24 [default = kColourBlack];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_theme_status_border(), target);
  }

  // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_theme_status_text(), target);
  }

  // optional .config.Colour theme_alert = 26 [default = kColourAmber];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_theme_alert(), target);
  }

  // optional .config.Colour theme_critical = 27 [default = kColourRed];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_theme_critical(), target);
  }

  // optional string theme_font = 28 [default = "Courier 10 Pitch"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_theme_font().data(), static_cast<int>(this->_internal_theme_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.ThemeHighContrast.theme_font");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_theme_font(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.ThemeHighContrast)
  return target;
}

size_t ThemeHighContrast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.ThemeHighContrast)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string theme_font = 28 [default = "Courier 10 Pitch"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_theme_font());
    }

    // optional .config.Colour theme_background = 1 [default = kColourBlack];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_background());
    }

    // optional .config.Colour table_background = 2 [default = kColourBlack];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_table_background());
    }

    // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourBlack];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourBlack];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled_selected());
    }

    // optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled());
    }

    // optional .config.Colour theme_label_text_disabled = 11 [default = kColourBlack];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_disabled());
    }

    // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled_selected_changing());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled_selected());
    }

    // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled());
    }

    // optional .config.Colour theme_status_background = 23 [default = kColourBlack];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_background());
    }

    // optional .config.Colour theme_status_border = 24 [default = kColourBlack];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_border());
    }

    // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_style());
    }

    // optional .config.Colour theme_label_background_disabled = 7 [default = kColourGrey];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_disabled());
    }

    // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled_selected());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled());
    }

    // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourGrey];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourGrey];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled_selected());
    }

    // optional .config.Colour theme_label_border_enabled = 14 [default = kColourWhite];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled());
    }

    // optional .config.Colour theme_label_border_disabled = 15 [default = kColourDarkGrey];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_disabled());
    }

    // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_disabled());
    }

    // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiClassicTankWithSight];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_widget_ppi_style());
    }

    // optional int32 theme_label_border_thickness = 21 [default = 1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_theme_label_border_thickness());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional int32 theme_table_border_thickness = 22 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_theme_table_border_thickness());
    }

    // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_text());
    }

    // optional .config.Colour theme_alert = 26 [default = kColourAmber];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_alert());
    }

    // optional .config.Colour theme_critical = 27 [default = kColourRed];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_critical());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeHighContrast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeHighContrast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeHighContrast::GetClassData() const { return &_class_data_; }


void ThemeHighContrast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeHighContrast*>(&to_msg);
  auto& from = static_cast<const ThemeHighContrast&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.ThemeHighContrast)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_theme_font(from._internal_theme_font());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.theme_background_ = from._impl_.theme_background_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.table_background_ = from._impl_.table_background_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.theme_label_background_enabled_selected_changing_ = from._impl_.theme_label_background_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.theme_label_background_enabled_selected_ = from._impl_.theme_label_background_enabled_selected_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.theme_label_background_enabled_ = from._impl_.theme_label_background_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.theme_label_text_disabled_ = from._impl_.theme_label_text_disabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.theme_label_line_enabled_selected_changing_ = from._impl_.theme_label_line_enabled_selected_changing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.theme_label_line_enabled_selected_ = from._impl_.theme_label_line_enabled_selected_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.theme_label_line_enabled_ = from._impl_.theme_label_line_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.theme_status_background_ = from._impl_.theme_status_background_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.theme_status_border_ = from._impl_.theme_status_border_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.theme_label_style_ = from._impl_.theme_label_style_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.theme_label_background_disabled_ = from._impl_.theme_label_background_disabled_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.theme_label_text_enabled_selected_changing_ = from._impl_.theme_label_text_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.theme_label_text_enabled_selected_ = from._impl_.theme_label_text_enabled_selected_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.theme_label_text_enabled_ = from._impl_.theme_label_text_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.theme_label_border_enabled_selected_changing_ = from._impl_.theme_label_border_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.theme_label_border_enabled_selected_ = from._impl_.theme_label_border_enabled_selected_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.theme_label_border_enabled_ = from._impl_.theme_label_border_enabled_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.theme_label_border_disabled_ = from._impl_.theme_label_border_disabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.theme_label_line_disabled_ = from._impl_.theme_label_line_disabled_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.widget_ppi_style_ = from._impl_.widget_ppi_style_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.theme_label_border_thickness_ = from._impl_.theme_label_border_thickness_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.theme_table_border_thickness_ = from._impl_.theme_table_border_thickness_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.theme_status_text_ = from._impl_.theme_status_text_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.theme_alert_ = from._impl_.theme_alert_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.theme_critical_ = from._impl_.theme_critical_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeHighContrast::CopyFrom(const ThemeHighContrast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.ThemeHighContrast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeHighContrast::IsInitialized() const {
  return true;
}

void ThemeHighContrast::InternalSwap(ThemeHighContrast* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.theme_font_, lhs_arena,
      &other->_impl_.theme_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeHighContrast, _impl_.theme_status_border_)
      + sizeof(ThemeHighContrast::_impl_.theme_status_border_)
      - PROTOBUF_FIELD_OFFSET(ThemeHighContrast, _impl_.theme_background_)>(
          reinterpret_cast<char*>(&_impl_.theme_background_),
          reinterpret_cast<char*>(&other->_impl_.theme_background_));
  swap(_impl_.theme_label_style_, other->_impl_.theme_label_style_);
  swap(_impl_.theme_label_background_disabled_, other->_impl_.theme_label_background_disabled_);
  swap(_impl_.theme_label_text_enabled_selected_changing_, other->_impl_.theme_label_text_enabled_selected_changing_);
  swap(_impl_.theme_label_text_enabled_selected_, other->_impl_.theme_label_text_enabled_selected_);
  swap(_impl_.theme_label_text_enabled_, other->_impl_.theme_label_text_enabled_);
  swap(_impl_.theme_label_border_enabled_selected_changing_, other->_impl_.theme_label_border_enabled_selected_changing_);
  swap(_impl_.theme_label_border_enabled_selected_, other->_impl_.theme_label_border_enabled_selected_);
  swap(_impl_.theme_label_border_enabled_, other->_impl_.theme_label_border_enabled_);
  swap(_impl_.theme_label_border_disabled_, other->_impl_.theme_label_border_disabled_);
  swap(_impl_.theme_label_line_disabled_, other->_impl_.theme_label_line_disabled_);
  swap(_impl_.widget_ppi_style_, other->_impl_.widget_ppi_style_);
  swap(_impl_.theme_label_border_thickness_, other->_impl_.theme_label_border_thickness_);
  swap(_impl_.theme_table_border_thickness_, other->_impl_.theme_table_border_thickness_);
  swap(_impl_.theme_status_text_, other->_impl_.theme_status_text_);
  swap(_impl_.theme_alert_, other->_impl_.theme_alert_);
  swap(_impl_.theme_critical_, other->_impl_.theme_critical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeHighContrast::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[1]);
}

// ===================================================================

class ThemeModernBlue::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeModernBlue>()._impl_._has_bits_);
  static void set_has_theme_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_table_background(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_theme_label_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_theme_label_background_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_theme_label_background_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_theme_label_background_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_theme_label_background_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_theme_label_text_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_theme_label_text_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_theme_label_text_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_theme_label_text_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_theme_label_border_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_theme_label_border_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_theme_label_border_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_theme_label_border_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_theme_label_line_enabled_selected_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_theme_label_line_enabled_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_theme_label_line_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_theme_label_line_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_widget_ppi_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_theme_label_border_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_theme_table_border_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_theme_status_background(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_theme_status_border(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_theme_status_text(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_theme_alert(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_theme_critical(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_theme_font(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString ThemeModernBlue::Impl_::_i_give_permission_to_break_this_code_default_theme_font_{{{"Courier 10 Pitch", 16}}, {nullptr}};
ThemeModernBlue::ThemeModernBlue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.ThemeModernBlue)
}
ThemeModernBlue::ThemeModernBlue(const ThemeModernBlue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeModernBlue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.theme_font_){}
    , decltype(_impl_.theme_background_){}
    , decltype(_impl_.table_background_){}
    , decltype(_impl_.theme_label_background_enabled_){}
    , decltype(_impl_.theme_label_background_disabled_){}
    , decltype(_impl_.theme_label_line_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_line_enabled_selected_){}
    , decltype(_impl_.theme_label_line_enabled_){}
    , decltype(_impl_.theme_status_background_){}
    , decltype(_impl_.theme_status_border_){}
    , decltype(_impl_.theme_label_style_){}
    , decltype(_impl_.theme_label_background_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_background_enabled_selected_){}
    , decltype(_impl_.theme_label_text_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_text_enabled_selected_){}
    , decltype(_impl_.theme_label_text_enabled_){}
    , decltype(_impl_.theme_label_text_disabled_){}
    , decltype(_impl_.theme_label_border_enabled_selected_changing_){}
    , decltype(_impl_.theme_label_border_enabled_selected_){}
    , decltype(_impl_.theme_label_border_enabled_){}
    , decltype(_impl_.theme_label_border_disabled_){}
    , decltype(_impl_.theme_label_line_disabled_){}
    , decltype(_impl_.widget_ppi_style_){}
    , decltype(_impl_.theme_label_border_thickness_){}
    , decltype(_impl_.theme_table_border_thickness_){}
    , decltype(_impl_.theme_status_text_){}
    , decltype(_impl_.theme_alert_){}
    , decltype(_impl_.theme_critical_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.theme_font_.InitDefault();
  if (from._internal_has_theme_font()) {
    _this->_impl_.theme_font_.Set(from._internal_theme_font(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.theme_background_, &from._impl_.theme_background_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.theme_critical_) -
    reinterpret_cast<char*>(&_impl_.theme_background_)) + sizeof(_impl_.theme_critical_));
  // @@protoc_insertion_point(copy_constructor:config.ThemeModernBlue)
}

inline void ThemeModernBlue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.theme_font_){}
    , decltype(_impl_.theme_background_){0}
    , decltype(_impl_.table_background_){0}
    , decltype(_impl_.theme_label_background_enabled_){0}
    , decltype(_impl_.theme_label_background_disabled_){0}
    , decltype(_impl_.theme_label_line_enabled_selected_changing_){0}
    , decltype(_impl_.theme_label_line_enabled_selected_){0}
    , decltype(_impl_.theme_label_line_enabled_){0}
    , decltype(_impl_.theme_status_background_){0}
    , decltype(_impl_.theme_status_border_){0}
    , decltype(_impl_.theme_label_style_){1}
    , decltype(_impl_.theme_label_background_enabled_selected_changing_){32450}
    , decltype(_impl_.theme_label_background_enabled_selected_){1327195}
    , decltype(_impl_.theme_label_text_enabled_selected_changing_){16777215}
    , decltype(_impl_.theme_label_text_enabled_selected_){16777215}
    , decltype(_impl_.theme_label_text_enabled_){16777215}
    , decltype(_impl_.theme_label_text_disabled_){8355711}
    , decltype(_impl_.theme_label_border_enabled_selected_changing_){1327195}
    , decltype(_impl_.theme_label_border_enabled_selected_){32450}
    , decltype(_impl_.theme_label_border_enabled_){8355711}
    , decltype(_impl_.theme_label_border_disabled_){8355711}
    , decltype(_impl_.theme_label_line_disabled_){1}
    , decltype(_impl_.widget_ppi_style_){5}
    , decltype(_impl_.theme_label_border_thickness_){1}
    , decltype(_impl_.theme_table_border_thickness_){1}
    , decltype(_impl_.theme_status_text_){16777215}
    , decltype(_impl_.theme_alert_){16750848}
    , decltype(_impl_.theme_critical_){16711680}
  };
  _impl_.theme_font_.InitDefault();
}

ThemeModernBlue::~ThemeModernBlue() {
  // @@protoc_insertion_point(destructor:config.ThemeModernBlue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeModernBlue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.theme_font_.Destroy();
}

void ThemeModernBlue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeModernBlue::Clear() {
// @@protoc_insertion_point(message_clear_start:config.ThemeModernBlue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.theme_font_.ClearToDefault(::config::ThemeModernBlue::Impl_::_i_give_permission_to_break_this_code_default_theme_font_, GetArenaForAllocation());
     }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.theme_background_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.theme_label_line_enabled_) -
        reinterpret_cast<char*>(&_impl_.theme_background_)) + sizeof(_impl_.theme_label_line_enabled_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.theme_status_background_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.theme_status_border_) -
        reinterpret_cast<char*>(&_impl_.theme_status_background_)) + sizeof(_impl_.theme_status_border_));
    _impl_.theme_label_style_ = 1;
    _impl_.theme_label_background_enabled_selected_changing_ = 32450;
    _impl_.theme_label_background_enabled_selected_ = 1327195;
    _impl_.theme_label_text_enabled_selected_changing_ = 16777215;
    _impl_.theme_label_text_enabled_selected_ = 16777215;
    _impl_.theme_label_text_enabled_ = 16777215;
  }
  if (cached_has_bits & 0x00ff0000u) {
    _impl_.theme_label_text_disabled_ = 8355711;
    _impl_.theme_label_border_enabled_selected_changing_ = 1327195;
    _impl_.theme_label_border_enabled_selected_ = 32450;
    _impl_.theme_label_border_enabled_ = 8355711;
    _impl_.theme_label_border_disabled_ = 8355711;
    _impl_.theme_label_line_disabled_ = 1;
    _impl_.widget_ppi_style_ = 5;
    _impl_.theme_label_border_thickness_ = 1;
  }
  if (cached_has_bits & 0x0f000000u) {
    _impl_.theme_table_border_thickness_ = 1;
    _impl_.theme_status_text_ = 16777215;
    _impl_.theme_alert_ = 16750848;
    _impl_.theme_critical_ = 16711680;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeModernBlue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .config.Colour theme_background = 1 [default = kColourBlack];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour table_background = 2 [default = kColourBlack];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_table_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LabelStyle_IsValid(val))) {
            _internal_set_theme_label_style(static_cast<::config::LabelStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourModernBlueLight];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourModernBlueDark];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_background_disabled = 7 [default = kColourBlack];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_background_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_text_disabled = 11 [default = kColourGrey];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_text_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourModernBlueDark];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled_selected_changing(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourModernBlueLight];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled_selected(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_enabled = 14 [default = kColourGrey];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_enabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_label_border_disabled = 15 [default = kColourGrey];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_label_border_disabled(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled_selected_changing(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled_selected(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_enabled(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::LineStyle_IsValid(val))) {
            _internal_set_theme_label_line_disabled(static_cast<::config::LineStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiModernTankWithSights];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::PpiStyle_IsValid(val))) {
            _internal_set_widget_ppi_style(static_cast<::config::PpiStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 theme_label_border_thickness = 21 [default = 1];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_theme_label_border_thickness(&has_bits);
          _impl_.theme_label_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 theme_table_border_thickness = 22 [default = 1];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_theme_table_border_thickness(&has_bits);
          _impl_.theme_table_border_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_background = 23 [default = kColourBlack];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_background(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_border = 24 [default = kColourBlack];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_border(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_status_text(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_alert = 26 [default = kColourAmber];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_alert(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(26, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .config.Colour theme_critical = 27 [default = kColourRed];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Colour_IsValid(val))) {
            _internal_set_theme_critical(static_cast<::config::Colour>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(27, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string theme_font = 28 [default = "Courier 10 Pitch"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_theme_font();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.ThemeModernBlue.theme_font");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeModernBlue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.ThemeModernBlue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .config.Colour theme_background = 1 [default = kColourBlack];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_theme_background(), target);
  }

  // optional .config.Colour table_background = 2 [default = kColourBlack];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_table_background(), target);
  }

  // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_theme_label_style(), target);
  }

  // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourModernBlueLight];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_theme_label_background_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourModernBlueDark];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_theme_label_background_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_theme_label_background_enabled(), target);
  }

  // optional .config.Colour theme_label_background_disabled = 7 [default = kColourBlack];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_theme_label_background_disabled(), target);
  }

  // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_theme_label_text_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_theme_label_text_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_theme_label_text_enabled(), target);
  }

  // optional .config.Colour theme_label_text_disabled = 11 [default = kColourGrey];
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_theme_label_text_disabled(), target);
  }

  // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourModernBlueDark];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_theme_label_border_enabled_selected_changing(), target);
  }

  // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourModernBlueLight];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_theme_label_border_enabled_selected(), target);
  }

  // optional .config.Colour theme_label_border_enabled = 14 [default = kColourGrey];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_theme_label_border_enabled(), target);
  }

  // optional .config.Colour theme_label_border_disabled = 15 [default = kColourGrey];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_theme_label_border_disabled(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_theme_label_line_enabled_selected_changing(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_theme_label_line_enabled_selected(), target);
  }

  // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_theme_label_line_enabled(), target);
  }

  // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_theme_label_line_disabled(), target);
  }

  // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiModernTankWithSights];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_widget_ppi_style(), target);
  }

  // optional int32 theme_label_border_thickness = 21 [default = 1];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_theme_label_border_thickness(), target);
  }

  // optional int32 theme_table_border_thickness = 22 [default = 1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_theme_table_border_thickness(), target);
  }

  // optional .config.Colour theme_status_background = 23 [default = kColourBlack];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_theme_status_background(), target);
  }

  // optional .config.Colour theme_status_border = 24 [default = kColourBlack];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_theme_status_border(), target);
  }

  // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_theme_status_text(), target);
  }

  // optional .config.Colour theme_alert = 26 [default = kColourAmber];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      26, this->_internal_theme_alert(), target);
  }

  // optional .config.Colour theme_critical = 27 [default = kColourRed];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      27, this->_internal_theme_critical(), target);
  }

  // optional string theme_font = 28 [default = "Courier 10 Pitch"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_theme_font().data(), static_cast<int>(this->_internal_theme_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.ThemeModernBlue.theme_font");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_theme_font(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.ThemeModernBlue)
  return target;
}

size_t ThemeModernBlue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.ThemeModernBlue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string theme_font = 28 [default = "Courier 10 Pitch"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_theme_font());
    }

    // optional .config.Colour theme_background = 1 [default = kColourBlack];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_background());
    }

    // optional .config.Colour table_background = 2 [default = kColourBlack];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_table_background());
    }

    // optional .config.Colour theme_label_background_enabled = 6 [default = kColourBlack];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled());
    }

    // optional .config.Colour theme_label_background_disabled = 7 [default = kColourBlack];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_disabled());
    }

    // optional .config.LineStyle theme_label_line_enabled_selected_changing = 16 [default = kLineSolid];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled_selected_changing());
    }

    // optional .config.LineStyle theme_label_line_enabled_selected = 17 [default = kLineSolid];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled_selected());
    }

    // optional .config.LineStyle theme_label_line_enabled = 18 [default = kLineSolid];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_enabled());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .config.Colour theme_status_background = 23 [default = kColourBlack];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_background());
    }

    // optional .config.Colour theme_status_border = 24 [default = kColourBlack];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_border());
    }

    // optional .config.LabelStyle theme_label_style = 3 [default = kLabelRounded];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_style());
    }

    // optional .config.Colour theme_label_background_enabled_selected_changing = 4 [default = kColourModernBlueLight];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_background_enabled_selected = 5 [default = kColourModernBlueDark];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_background_enabled_selected());
    }

    // optional .config.Colour theme_label_text_enabled_selected_changing = 8 [default = kColourWhite];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_text_enabled_selected = 9 [default = kColourWhite];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled_selected());
    }

    // optional .config.Colour theme_label_text_enabled = 10 [default = kColourWhite];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_enabled());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .config.Colour theme_label_text_disabled = 11 [default = kColourGrey];
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_text_disabled());
    }

    // optional .config.Colour theme_label_border_enabled_selected_changing = 12 [default = kColourModernBlueDark];
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled_selected_changing());
    }

    // optional .config.Colour theme_label_border_enabled_selected = 13 [default = kColourModernBlueLight];
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled_selected());
    }

    // optional .config.Colour theme_label_border_enabled = 14 [default = kColourGrey];
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_enabled());
    }

    // optional .config.Colour theme_label_border_disabled = 15 [default = kColourGrey];
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_border_disabled());
    }

    // optional .config.LineStyle theme_label_line_disabled = 19 [default = kLineDashed];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_label_line_disabled());
    }

    // optional .config.PpiStyle widget_ppi_style = 20 [default = kPpiModernTankWithSights];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_widget_ppi_style());
    }

    // optional int32 theme_label_border_thickness = 21 [default = 1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_theme_label_border_thickness());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional int32 theme_table_border_thickness = 22 [default = 1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_theme_table_border_thickness());
    }

    // optional .config.Colour theme_status_text = 25 [default = kColourWhite];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_status_text());
    }

    // optional .config.Colour theme_alert = 26 [default = kColourAmber];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_alert());
    }

    // optional .config.Colour theme_critical = 27 [default = kColourRed];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_theme_critical());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeModernBlue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeModernBlue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeModernBlue::GetClassData() const { return &_class_data_; }


void ThemeModernBlue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeModernBlue*>(&to_msg);
  auto& from = static_cast<const ThemeModernBlue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.ThemeModernBlue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_theme_font(from._internal_theme_font());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.theme_background_ = from._impl_.theme_background_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.table_background_ = from._impl_.table_background_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.theme_label_background_enabled_ = from._impl_.theme_label_background_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.theme_label_background_disabled_ = from._impl_.theme_label_background_disabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.theme_label_line_enabled_selected_changing_ = from._impl_.theme_label_line_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.theme_label_line_enabled_selected_ = from._impl_.theme_label_line_enabled_selected_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.theme_label_line_enabled_ = from._impl_.theme_label_line_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.theme_status_background_ = from._impl_.theme_status_background_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.theme_status_border_ = from._impl_.theme_status_border_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.theme_label_style_ = from._impl_.theme_label_style_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.theme_label_background_enabled_selected_changing_ = from._impl_.theme_label_background_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.theme_label_background_enabled_selected_ = from._impl_.theme_label_background_enabled_selected_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.theme_label_text_enabled_selected_changing_ = from._impl_.theme_label_text_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.theme_label_text_enabled_selected_ = from._impl_.theme_label_text_enabled_selected_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.theme_label_text_enabled_ = from._impl_.theme_label_text_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.theme_label_text_disabled_ = from._impl_.theme_label_text_disabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.theme_label_border_enabled_selected_changing_ = from._impl_.theme_label_border_enabled_selected_changing_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.theme_label_border_enabled_selected_ = from._impl_.theme_label_border_enabled_selected_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.theme_label_border_enabled_ = from._impl_.theme_label_border_enabled_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.theme_label_border_disabled_ = from._impl_.theme_label_border_disabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.theme_label_line_disabled_ = from._impl_.theme_label_line_disabled_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.widget_ppi_style_ = from._impl_.widget_ppi_style_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.theme_label_border_thickness_ = from._impl_.theme_label_border_thickness_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.theme_table_border_thickness_ = from._impl_.theme_table_border_thickness_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.theme_status_text_ = from._impl_.theme_status_text_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.theme_alert_ = from._impl_.theme_alert_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.theme_critical_ = from._impl_.theme_critical_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeModernBlue::CopyFrom(const ThemeModernBlue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.ThemeModernBlue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeModernBlue::IsInitialized() const {
  return true;
}

void ThemeModernBlue::InternalSwap(ThemeModernBlue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.theme_font_, lhs_arena,
      &other->_impl_.theme_font_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeModernBlue, _impl_.theme_status_border_)
      + sizeof(ThemeModernBlue::_impl_.theme_status_border_)
      - PROTOBUF_FIELD_OFFSET(ThemeModernBlue, _impl_.theme_background_)>(
          reinterpret_cast<char*>(&_impl_.theme_background_),
          reinterpret_cast<char*>(&other->_impl_.theme_background_));
  swap(_impl_.theme_label_style_, other->_impl_.theme_label_style_);
  swap(_impl_.theme_label_background_enabled_selected_changing_, other->_impl_.theme_label_background_enabled_selected_changing_);
  swap(_impl_.theme_label_background_enabled_selected_, other->_impl_.theme_label_background_enabled_selected_);
  swap(_impl_.theme_label_text_enabled_selected_changing_, other->_impl_.theme_label_text_enabled_selected_changing_);
  swap(_impl_.theme_label_text_enabled_selected_, other->_impl_.theme_label_text_enabled_selected_);
  swap(_impl_.theme_label_text_enabled_, other->_impl_.theme_label_text_enabled_);
  swap(_impl_.theme_label_text_disabled_, other->_impl_.theme_label_text_disabled_);
  swap(_impl_.theme_label_border_enabled_selected_changing_, other->_impl_.theme_label_border_enabled_selected_changing_);
  swap(_impl_.theme_label_border_enabled_selected_, other->_impl_.theme_label_border_enabled_selected_);
  swap(_impl_.theme_label_border_enabled_, other->_impl_.theme_label_border_enabled_);
  swap(_impl_.theme_label_border_disabled_, other->_impl_.theme_label_border_disabled_);
  swap(_impl_.theme_label_line_disabled_, other->_impl_.theme_label_line_disabled_);
  swap(_impl_.widget_ppi_style_, other->_impl_.widget_ppi_style_);
  swap(_impl_.theme_label_border_thickness_, other->_impl_.theme_label_border_thickness_);
  swap(_impl_.theme_table_border_thickness_, other->_impl_.theme_table_border_thickness_);
  swap(_impl_.theme_status_text_, other->_impl_.theme_status_text_);
  swap(_impl_.theme_alert_, other->_impl_.theme_alert_);
  swap(_impl_.theme_critical_, other->_impl_.theme_critical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeModernBlue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[2]);
}

// ===================================================================

class File::_Internal {
 public:
  using HasBits = decltype(std::declval<File>()._impl_._has_bits_);
  static void set_has_config_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_log_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_log_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_images_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString File::Impl_::_i_give_permission_to_break_this_code_default_config_filename_{{{"config.pb", 9}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString File::Impl_::_i_give_permission_to_break_this_code_default_log_filename_{{{"gva.log", 7}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString File::Impl_::_i_give_permission_to_break_this_code_default_log_path_{{{"/var/log", 8}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString File::Impl_::_i_give_permission_to_break_this_code_default_images_path_{{{"/opt/gva/hmi/images", 19}}, {nullptr}};
File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  File* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_filename_){}
    , decltype(_impl_.log_filename_){}
    , decltype(_impl_.log_path_){}
    , decltype(_impl_.images_path_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.config_filename_.InitDefault();
  if (from._internal_has_config_filename()) {
    _this->_impl_.config_filename_.Set(from._internal_config_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_filename_.InitDefault();
  if (from._internal_has_log_filename()) {
    _this->_impl_.log_filename_.Set(from._internal_log_filename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.log_path_.InitDefault();
  if (from._internal_has_log_path()) {
    _this->_impl_.log_path_.Set(from._internal_log_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.images_path_.InitDefault();
  if (from._internal_has_images_path()) {
    _this->_impl_.images_path_.Set(from._internal_images_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:config.File)
}

inline void File::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.config_filename_){}
    , decltype(_impl_.log_filename_){}
    , decltype(_impl_.log_path_){}
    , decltype(_impl_.images_path_){}
  };
  _impl_.config_filename_.InitDefault();
  _impl_.log_filename_.InitDefault();
  _impl_.log_path_.InitDefault();
  _impl_.images_path_.InitDefault();
}

File::~File() {
  // @@protoc_insertion_point(destructor:config.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.config_filename_.Destroy();
  _impl_.log_filename_.Destroy();
  _impl_.log_path_.Destroy();
  _impl_.images_path_.Destroy();
}

void File::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:config.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.config_filename_.ClearToDefault(::config::File::Impl_::_i_give_permission_to_break_this_code_default_config_filename_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.log_filename_.ClearToDefault(::config::File::Impl_::_i_give_permission_to_break_this_code_default_log_filename_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000004u) {
      _impl_.log_path_.ClearToDefault(::config::File::Impl_::_i_give_permission_to_break_this_code_default_log_path_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.images_path_.ClearToDefault(::config::File::Impl_::_i_give_permission_to_break_this_code_default_images_path_, GetArenaForAllocation());
       }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string config_filename = 1 [default = "config.pb"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_config_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.File.config_filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string log_filename = 2 [default = "gva.log"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_log_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.File.log_filename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string log_path = 3 [default = "/var/log"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_log_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.File.log_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string images_path = 4 [default = "/opt/gva/hmi/images"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_images_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.File.images_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string config_filename = 1 [default = "config.pb"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_config_filename().data(), static_cast<int>(this->_internal_config_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.File.config_filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_config_filename(), target);
  }

  // required string log_filename = 2 [default = "gva.log"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_log_filename().data(), static_cast<int>(this->_internal_log_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.File.log_filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_log_filename(), target);
  }

  // required string log_path = 3 [default = "/var/log"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_log_path().data(), static_cast<int>(this->_internal_log_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.File.log_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_log_path(), target);
  }

  // required string images_path = 4 [default = "/opt/gva/hmi/images"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_images_path().data(), static_cast<int>(this->_internal_images_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.File.images_path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_images_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.File)
  return target;
}

size_t File::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.File)
  size_t total_size = 0;

  if (_internal_has_config_filename()) {
    // required string config_filename = 1 [default = "config.pb"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_filename());
  }

  if (_internal_has_log_filename()) {
    // required string log_filename = 2 [default = "gva.log"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_filename());
  }

  if (_internal_has_log_path()) {
    // required string log_path = 3 [default = "/var/log"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_path());
  }

  if (_internal_has_images_path()) {
    // required string images_path = 4 [default = "/opt/gva/hmi/images"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_images_path());
  }

  return total_size;
}
size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.File)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string config_filename = 1 [default = "config.pb"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_config_filename());

    // required string log_filename = 2 [default = "gva.log"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_filename());

    // required string log_path = 3 [default = "/var/log"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_path());

    // required string images_path = 4 [default = "/opt/gva/hmi/images"];
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_images_path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }


void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<File*>(&to_msg);
  auto& from = static_cast<const File&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.File)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_config_filename(from._internal_config_filename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_log_filename(from._internal_log_filename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_log_path(from._internal_log_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_images_path(from._internal_images_path());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.config_filename_, lhs_arena,
      &other->_impl_.config_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_filename_, lhs_arena,
      &other->_impl_.log_filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.log_path_, lhs_arena,
      &other->_impl_.log_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.images_path_, lhs_arena,
      &other->_impl_.images_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[3]);
}

// ===================================================================

class OsmScout::_Internal {
 public:
  using HasBits = decltype(std::declval<OsmScout>()._impl_._has_bits_);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_map_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_stylesheet_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_test_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_test_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString OsmScout::Impl_::_i_give_permission_to_break_this_code_default_map_path_{{{"/opt/osmscout/maps/australia-latest/", 36}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString OsmScout::Impl_::_i_give_permission_to_break_this_code_default_map_stylesheet_path_{{{"/opt/osmscout/stylesheets/standard.oss", 38}}, {nullptr}};
OsmScout::OsmScout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.OsmScout)
}
OsmScout::OsmScout(const OsmScout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OsmScout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_path_){}
    , decltype(_impl_.map_stylesheet_path_){}
    , decltype(_impl_.enabled_){}
    , decltype(_impl_.test_lon_){}
    , decltype(_impl_.test_lat_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.map_path_.InitDefault();
  if (from._internal_has_map_path()) {
    _this->_impl_.map_path_.Set(from._internal_map_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.map_stylesheet_path_.InitDefault();
  if (from._internal_has_map_stylesheet_path()) {
    _this->_impl_.map_stylesheet_path_.Set(from._internal_map_stylesheet_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.test_lat_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.test_lat_));
  // @@protoc_insertion_point(copy_constructor:config.OsmScout)
}

inline void OsmScout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_path_){}
    , decltype(_impl_.map_stylesheet_path_){}
    , decltype(_impl_.enabled_){true}
    , decltype(_impl_.test_lon_){153.02259}
    , decltype(_impl_.test_lat_){-27.4744}
  };
  _impl_.map_path_.InitDefault();
  _impl_.map_stylesheet_path_.InitDefault();
}

OsmScout::~OsmScout() {
  // @@protoc_insertion_point(destructor:config.OsmScout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OsmScout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_path_.Destroy();
  _impl_.map_stylesheet_path_.Destroy();
}

void OsmScout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OsmScout::Clear() {
// @@protoc_insertion_point(message_clear_start:config.OsmScout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.map_path_.ClearToDefault(::config::OsmScout::Impl_::_i_give_permission_to_break_this_code_default_map_path_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000002u) {
      _impl_.map_stylesheet_path_.ClearToDefault(::config::OsmScout::Impl_::_i_give_permission_to_break_this_code_default_map_stylesheet_path_, GetArenaForAllocation());
       }
    _impl_.enabled_ = true;
    _impl_.test_lon_ = 153.02259;
    _impl_.test_lat_ = -27.4744;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OsmScout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool enabled = 1 [default = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enabled(&has_bits);
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string map_path = 2 [default = "/opt/osmscout/maps/australia-latest/"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_map_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.OsmScout.map_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string map_stylesheet_path = 3 [default = "/opt/osmscout/stylesheets/standard.oss"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map_stylesheet_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.OsmScout.map_stylesheet_path");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double test_lon = 4 [default = 153.02259];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_test_lon(&has_bits);
          _impl_.test_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double test_lat = 5 [default = -27.4744];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_test_lat(&has_bits);
          _impl_.test_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OsmScout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.OsmScout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // optional string map_path = 2 [default = "/opt/osmscout/maps/australia-latest/"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_path().data(), static_cast<int>(this->_internal_map_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.OsmScout.map_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_map_path(), target);
  }

  // optional string map_stylesheet_path = 3 [default = "/opt/osmscout/stylesheets/standard.oss"];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_stylesheet_path().data(), static_cast<int>(this->_internal_map_stylesheet_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.OsmScout.map_stylesheet_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_stylesheet_path(), target);
  }

  // optional double test_lon = 4 [default = 153.02259];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_test_lon(), target);
  }

  // optional double test_lat = 5 [default = -27.4744];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_test_lat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.OsmScout)
  return target;
}

size_t OsmScout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.OsmScout)
  size_t total_size = 0;

  // required bool enabled = 1 [default = true];
  if (_internal_has_enabled()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string map_path = 2 [default = "/opt/osmscout/maps/australia-latest/"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_path());
    }

    // optional string map_stylesheet_path = 3 [default = "/opt/osmscout/stylesheets/standard.oss"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_stylesheet_path());
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional double test_lon = 4 [default = 153.02259];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double test_lat = 5 [default = -27.4744];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OsmScout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OsmScout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OsmScout::GetClassData() const { return &_class_data_; }


void OsmScout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OsmScout*>(&to_msg);
  auto& from = static_cast<const OsmScout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.OsmScout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_map_path(from._internal_map_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_map_stylesheet_path(from._internal_map_stylesheet_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.enabled_ = from._impl_.enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.test_lon_ = from._impl_.test_lon_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.test_lat_ = from._impl_.test_lat_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OsmScout::CopyFrom(const OsmScout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.OsmScout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OsmScout::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void OsmScout::InternalSwap(OsmScout* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_path_, lhs_arena,
      &other->_impl_.map_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_stylesheet_path_, lhs_arena,
      &other->_impl_.map_stylesheet_path_, rhs_arena
  );
  swap(_impl_.enabled_, other->_impl_.enabled_);
  swap(_impl_.test_lon_, other->_impl_.test_lon_);
  swap(_impl_.test_lat_, other->_impl_.test_lat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OsmScout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[4]);
}

// ===================================================================

class KeyBinding::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyBinding>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

KeyBinding::KeyBinding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.KeyBinding)
}
KeyBinding::KeyBinding(const KeyBinding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyBinding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.bind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.key_, &from._impl_.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bind_) -
    reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.bind_));
  // @@protoc_insertion_point(copy_constructor:config.KeyBinding)
}

inline void KeyBinding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){0}
    , decltype(_impl_.bind_){0}
  };
}

KeyBinding::~KeyBinding() {
  // @@protoc_insertion_point(destructor:config.KeyBinding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyBinding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyBinding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyBinding::Clear() {
// @@protoc_insertion_point(message_clear_start:config.KeyBinding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bind_) -
        reinterpret_cast<char*>(&_impl_.key_)) + sizeof(_impl_.bind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyBinding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .config.Key key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::config::Key_IsValid(val))) {
            _internal_set_key(static_cast<::config::Key>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 Bind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bind(&has_bits);
          _impl_.bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyBinding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.KeyBinding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .config.Key key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_key(), target);
  }

  // optional int32 Bind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.KeyBinding)
  return target;
}

size_t KeyBinding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.KeyBinding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .config.Key key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_key());
    }

    // optional int32 Bind = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bind());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyBinding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyBinding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyBinding::GetClassData() const { return &_class_data_; }


void KeyBinding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyBinding*>(&to_msg);
  auto& from = static_cast<const KeyBinding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.KeyBinding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.key_ = from._impl_.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bind_ = from._impl_.bind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyBinding::CopyFrom(const KeyBinding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.KeyBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyBinding::IsInitialized() const {
  return true;
}

void KeyBinding::InternalSwap(KeyBinding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyBinding, _impl_.bind_)
      + sizeof(KeyBinding::_impl_.bind_)
      - PROTOBUF_FIELD_OFFSET(KeyBinding, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyBinding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[5]);
}

// ===================================================================

class KeyBindingsApc::_Internal {
 public:
  using HasBits = decltype(std::declval<KeyBindingsApc>()._impl_._has_bits_);
  static const ::config::KeyBinding& bind(const KeyBindingsApc* msg);
  static void set_has_bind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::config::KeyBinding&
KeyBindingsApc::_Internal::bind(const KeyBindingsApc* msg) {
  return *msg->_impl_.bind_;
}
KeyBindingsApc::KeyBindingsApc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.KeyBindingsApc)
}
KeyBindingsApc::KeyBindingsApc(const KeyBindingsApc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyBindingsApc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bind_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bind()) {
    _this->_impl_.bind_ = new ::config::KeyBinding(*from._impl_.bind_);
  }
  // @@protoc_insertion_point(copy_constructor:config.KeyBindingsApc)
}

inline void KeyBindingsApc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bind_){nullptr}
  };
}

KeyBindingsApc::~KeyBindingsApc() {
  // @@protoc_insertion_point(destructor:config.KeyBindingsApc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyBindingsApc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bind_;
}

void KeyBindingsApc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyBindingsApc::Clear() {
// @@protoc_insertion_point(message_clear_start:config.KeyBindingsApc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.bind_ != nullptr);
    _impl_.bind_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyBindingsApc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .config.KeyBinding bind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bind(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyBindingsApc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.KeyBindingsApc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .config.KeyBinding bind = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bind(this),
        _Internal::bind(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.KeyBindingsApc)
  return target;
}

size_t KeyBindingsApc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.KeyBindingsApc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .config.KeyBinding bind = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bind_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyBindingsApc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyBindingsApc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyBindingsApc::GetClassData() const { return &_class_data_; }


void KeyBindingsApc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyBindingsApc*>(&to_msg);
  auto& from = static_cast<const KeyBindingsApc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.KeyBindingsApc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bind()) {
    _this->_internal_mutable_bind()->::config::KeyBinding::MergeFrom(
        from._internal_bind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyBindingsApc::CopyFrom(const KeyBindingsApc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.KeyBindingsApc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyBindingsApc::IsInitialized() const {
  return true;
}

void KeyBindingsApc::InternalSwap(KeyBindingsApc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.bind_, other->_impl_.bind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyBindingsApc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[6]);
}

// ===================================================================

class Gva::_Internal {
 public:
  using HasBits = decltype(std::declval<Gva>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fullscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_live(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_zoom(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gps_device(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_odb_device(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::config::OsmScout& osm(const Gva* msg);
  static void set_has_osm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::config::ThemeModernBlue& theme(const Gva* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::config::File& file(const Gva* msg);
  static void set_has_file(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_display_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::config::OsmScout&
Gva::_Internal::osm(const Gva* msg) {
  return *msg->_impl_.osm_;
}
const ::config::ThemeModernBlue&
Gva::_Internal::theme(const Gva* msg) {
  return *msg->_impl_.theme_;
}
const ::config::File&
Gva::_Internal::file(const Gva* msg) {
  return *msg->_impl_.file_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString Gva::Impl_::_i_give_permission_to_break_this_code_default_gps_device_{{{"/dev/ttyUSB0", 12}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString Gva::Impl_::_i_give_permission_to_break_this_code_default_odb_device_{{{"/dev/ttyUSB1", 12}}, {nullptr}};
Gva::Gva(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.Gva)
}
Gva::Gva(const Gva& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Gva* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bindings_){from._impl_.bindings_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.gps_device_){}
    , decltype(_impl_.odb_device_){}
    , decltype(_impl_.display_type_){}
    , decltype(_impl_.osm_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.file_){nullptr}
    , decltype(_impl_.fullscreen_){}
    , decltype(_impl_.live_){}
    , decltype(_impl_.zoom_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.brightness_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_device()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gps_device_.InitDefault();
  if (from._internal_has_gps_device()) {
    _this->_impl_.gps_device_.Set(from._internal_gps_device(), 
      _this->GetArenaForAllocation());
  }
  _impl_.odb_device_.InitDefault();
  if (from._internal_has_odb_device()) {
    _this->_impl_.odb_device_.Set(from._internal_odb_device(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_display_type()) {
    _this->_impl_.display_type_.Set(from._internal_display_type(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_osm()) {
    _this->_impl_.osm_ = new ::config::OsmScout(*from._impl_.osm_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::config::ThemeModernBlue(*from._impl_.theme_);
  }
  if (from._internal_has_file()) {
    _this->_impl_.file_ = new ::config::File(*from._impl_.file_);
  }
  ::memcpy(&_impl_.fullscreen_, &from._impl_.fullscreen_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.brightness_) -
    reinterpret_cast<char*>(&_impl_.fullscreen_)) + sizeof(_impl_.brightness_));
  // @@protoc_insertion_point(copy_constructor:config.Gva)
}

inline void Gva::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bindings_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.gps_device_){}
    , decltype(_impl_.odb_device_){}
    , decltype(_impl_.display_type_){}
    , decltype(_impl_.osm_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.file_){nullptr}
    , decltype(_impl_.fullscreen_){false}
    , decltype(_impl_.live_){false}
    , decltype(_impl_.zoom_){20000}
    , decltype(_impl_.height_){480}
    , decltype(_impl_.width_){640}
    , decltype(_impl_.brightness_){1}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gps_device_.InitDefault();
  _impl_.odb_device_.InitDefault();
  _impl_.display_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Gva::~Gva() {
  // @@protoc_insertion_point(destructor:config.Gva)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Gva::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bindings_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.device_.Destroy();
  _impl_.gps_device_.Destroy();
  _impl_.odb_device_.Destroy();
  _impl_.display_type_.Destroy();
  if (this != internal_default_instance()) delete _impl_.osm_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.file_;
}

void Gva::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Gva::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Gva)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bindings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.device_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.gps_device_.ClearToDefault(::config::Gva::Impl_::_i_give_permission_to_break_this_code_default_gps_device_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000008u) {
      _impl_.odb_device_.ClearToDefault(::config::Gva::Impl_::_i_give_permission_to_break_this_code_default_odb_device_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      _impl_.display_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.osm_ != nullptr);
      _impl_.osm_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.file_ != nullptr);
      _impl_.file_->Clear();
    }
  }
  ::memset(&_impl_.fullscreen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.live_) -
      reinterpret_cast<char*>(&_impl_.fullscreen_)) + sizeof(_impl_.live_));
  if (cached_has_bits & 0x00003c00u) {
    _impl_.zoom_ = 20000;
    _impl_.height_ = 480;
    _impl_.width_ = 640;
    _impl_.brightness_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gva::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.Gva.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 3 [default = 480];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 4 [default = 640];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fullscreen = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_fullscreen(&has_bits);
          _impl_.fullscreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool live = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_live(&has_bits);
          _impl_.live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 zoom = 7 [default = 20000];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_zoom(&has_bits);
          _impl_.zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string device = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.Gva.device");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string gps_device = 9 [default = "/dev/ttyUSB0"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_gps_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.Gva.gps_device");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string odb_device = 10 [default = "/dev/ttyUSB1"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_odb_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.Gva.odb_device");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .config.OsmScout osm = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_osm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .config.ThemeModernBlue theme = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .config.File file = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .config.KeyBinding bindings = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bindings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string display_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_display_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "config.Gva.display_type");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double brightness = 16 [default = 1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_brightness(&has_bits);
          _impl_.brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Gva::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Gva)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Gva.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 height = 3 [default = 480];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // optional int32 width = 4 [default = 640];
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_width(), target);
  }

  // optional bool fullscreen = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_fullscreen(), target);
  }

  // optional bool live = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_live(), target);
  }

  // optional int32 zoom = 7 [default = 20000];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_zoom(), target);
  }

  // optional string device = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Gva.device");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_device(), target);
  }

  // optional string gps_device = 9 [default = "/dev/ttyUSB0"];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gps_device().data(), static_cast<int>(this->_internal_gps_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Gva.gps_device");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_gps_device(), target);
  }

  // optional string odb_device = 10 [default = "/dev/ttyUSB1"];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_odb_device().data(), static_cast<int>(this->_internal_odb_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Gva.odb_device");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_odb_device(), target);
  }

  // optional .config.OsmScout osm = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::osm(this),
        _Internal::osm(this).GetCachedSize(), target, stream);
  }

  // optional .config.ThemeModernBlue theme = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // optional .config.File file = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::file(this),
        _Internal::file(this).GetCachedSize(), target, stream);
  }

  // repeated .config.KeyBinding bindings = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bindings_size()); i < n; i++) {
    const auto& repfield = this->_internal_bindings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string display_type = 15;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_display_type().data(), static_cast<int>(this->_internal_display_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "config.Gva.display_type");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_display_type(), target);
  }

  // optional double brightness = 16 [default = 1];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_brightness(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Gva)
  return target;
}

size_t Gva::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Gva)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .config.KeyBinding bindings = 14;
  total_size += 1UL * this->_internal_bindings_size();
  for (const auto& msg : this->_impl_.bindings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string device = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_device());
    }

    // optional string gps_device = 9 [default = "/dev/ttyUSB0"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gps_device());
    }

    // optional string odb_device = 10 [default = "/dev/ttyUSB1"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_odb_device());
    }

    // optional string display_type = 15;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_display_type());
    }

    // optional .config.OsmScout osm = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.osm_);
    }

    // optional .config.ThemeModernBlue theme = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.theme_);
    }

    // optional .config.File file = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.file_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool fullscreen = 5 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool live = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 zoom = 7 [default = 20000];
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_zoom());
    }

    // optional int32 height = 3 [default = 480];
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

    // optional int32 width = 4 [default = 640];
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional double brightness = 16 [default = 1];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Gva::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Gva::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Gva::GetClassData() const { return &_class_data_; }


void Gva::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Gva*>(&to_msg);
  auto& from = static_cast<const Gva&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.Gva)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bindings_.MergeFrom(from._impl_.bindings_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_device(from._internal_device());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_gps_device(from._internal_gps_device());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_odb_device(from._internal_odb_device());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_display_type(from._internal_display_type());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_osm()->::config::OsmScout::MergeFrom(
          from._internal_osm());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_theme()->::config::ThemeModernBlue::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_file()->::config::File::MergeFrom(
          from._internal_file());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.fullscreen_ = from._impl_.fullscreen_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.live_ = from._impl_.live_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.zoom_ = from._impl_.zoom_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.brightness_ = from._impl_.brightness_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Gva::CopyFrom(const Gva& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Gva)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gva::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_osm()) {
    if (!_impl_.osm_->IsInitialized()) return false;
  }
  if (_internal_has_file()) {
    if (!_impl_.file_->IsInitialized()) return false;
  }
  return true;
}

void Gva::InternalSwap(Gva* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bindings_.InternalSwap(&other->_impl_.bindings_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gps_device_, lhs_arena,
      &other->_impl_.gps_device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.odb_device_, lhs_arena,
      &other->_impl_.odb_device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_type_, lhs_arena,
      &other->_impl_.display_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gva, _impl_.live_)
      + sizeof(Gva::_impl_.live_)
      - PROTOBUF_FIELD_OFFSET(Gva, _impl_.osm_)>(
          reinterpret_cast<char*>(&_impl_.osm_),
          reinterpret_cast<char*>(&other->_impl_.osm_));
  swap(_impl_.zoom_, other->_impl_.zoom_);
  swap(_impl_.height_, other->_impl_.height_);
  swap(_impl_.width_, other->_impl_.width_);
  swap(_impl_.brightness_, other->_impl_.brightness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Gva::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_config_2eproto_getter, &descriptor_table_config_2eproto_once,
      file_level_metadata_config_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::config::ThemeDefault*
Arena::CreateMaybeMessage< ::config::ThemeDefault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::ThemeDefault >(arena);
}
template<> PROTOBUF_NOINLINE ::config::ThemeHighContrast*
Arena::CreateMaybeMessage< ::config::ThemeHighContrast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::ThemeHighContrast >(arena);
}
template<> PROTOBUF_NOINLINE ::config::ThemeModernBlue*
Arena::CreateMaybeMessage< ::config::ThemeModernBlue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::ThemeModernBlue >(arena);
}
template<> PROTOBUF_NOINLINE ::config::File*
Arena::CreateMaybeMessage< ::config::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::File >(arena);
}
template<> PROTOBUF_NOINLINE ::config::OsmScout*
Arena::CreateMaybeMessage< ::config::OsmScout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::OsmScout >(arena);
}
template<> PROTOBUF_NOINLINE ::config::KeyBinding*
Arena::CreateMaybeMessage< ::config::KeyBinding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::KeyBinding >(arena);
}
template<> PROTOBUF_NOINLINE ::config::KeyBindingsApc*
Arena::CreateMaybeMessage< ::config::KeyBindingsApc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::KeyBindingsApc >(arena);
}
template<> PROTOBUF_NOINLINE ::config::Gva*
Arena::CreateMaybeMessage< ::config::Gva >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Gva >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
