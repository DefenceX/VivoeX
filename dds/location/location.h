// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file location.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _LOCATION_H_
#define _LOCATION_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(location_SOURCE)
#define location_DllAPI __declspec( dllexport )
#else
#define location_DllAPI __declspec( dllimport )
#endif // location_SOURCE
#else
#define location_DllAPI
#endif
#else
#define location_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the enumeration locationFormat defined by the user in the IDL file.
 * @ingroup LOCATION
 */
enum locationFormat : uint32_t
{
    LONLAT,
    MGRS
};
/*!
 * @brief This class represents the structure dateTime defined by the user in the IDL file.
 * @ingroup LOCATION
 */
class dateTime
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport dateTime();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport virtual ~dateTime();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object dateTime that will be copied.
     */
    eProsima_user_DllExport dateTime(const dateTime &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object dateTime that will be copied.
     */
    eProsima_user_DllExport dateTime(dateTime &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object dateTime that will be copied.
     */
    eProsima_user_DllExport dateTime& operator=(const dateTime &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object dateTime that will be copied.
     */
    eProsima_user_DllExport dateTime& operator=(dateTime &&x);

    /*!
     * @brief This function sets a value in member year
     * @param _year New value for member year
     */
    eProsima_user_DllExport void year(uint16_t _year);

    /*!
     * @brief This function returns the value of member year
     * @return Value of member year
     */
    eProsima_user_DllExport uint16_t year() const;

    /*!
     * @brief This function returns a reference to member year
     * @return Reference to member year
     */
    eProsima_user_DllExport uint16_t& year();
    /*!
     * @brief This function sets a value in member month
     * @param _month New value for member month
     */
    eProsima_user_DllExport void month(uint8_t _month);

    /*!
     * @brief This function returns the value of member month
     * @return Value of member month
     */
    eProsima_user_DllExport uint8_t month() const;

    /*!
     * @brief This function returns a reference to member month
     * @return Reference to member month
     */
    eProsima_user_DllExport uint8_t& month();
    /*!
     * @brief This function sets a value in member day
     * @param _day New value for member day
     */
    eProsima_user_DllExport void day(uint8_t _day);

    /*!
     * @brief This function returns the value of member day
     * @return Value of member day
     */
    eProsima_user_DllExport uint8_t day() const;

    /*!
     * @brief This function returns a reference to member day
     * @return Reference to member day
     */
    eProsima_user_DllExport uint8_t& day();
    /*!
     * @brief This function sets a value in member hour
     * @param _hour New value for member hour
     */
    eProsima_user_DllExport void hour(uint8_t _hour);

    /*!
     * @brief This function returns the value of member hour
     * @return Value of member hour
     */
    eProsima_user_DllExport uint8_t hour() const;

    /*!
     * @brief This function returns a reference to member hour
     * @return Reference to member hour
     */
    eProsima_user_DllExport uint8_t& hour();
    /*!
     * @brief This function sets a value in member minute
     * @param _minute New value for member minute
     */
    eProsima_user_DllExport void minute(uint8_t _minute);

    /*!
     * @brief This function returns the value of member minute
     * @return Value of member minute
     */
    eProsima_user_DllExport uint8_t minute() const;

    /*!
     * @brief This function returns a reference to member minute
     * @return Reference to member minute
     */
    eProsima_user_DllExport uint8_t& minute();
    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(uint8_t _second);

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     */
    eProsima_user_DllExport uint8_t second() const;

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     */
    eProsima_user_DllExport uint8_t& second();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const dateTime& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint16_t m_year;
    uint8_t m_month;
    uint8_t m_day;
    uint8_t m_hour;
    uint8_t m_minute;
    uint8_t m_second;
};
/*!
 * @brief This class represents the structure geoLocation defined by the user in the IDL file.
 * @ingroup LOCATION
 */
class geoLocation
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport geoLocation();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport virtual ~geoLocation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object geoLocation that will be copied.
     */
    eProsima_user_DllExport geoLocation(const geoLocation &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object geoLocation that will be copied.
     */
    eProsima_user_DllExport geoLocation(geoLocation &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object geoLocation that will be copied.
     */
    eProsima_user_DllExport geoLocation& operator=(const geoLocation &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object geoLocation that will be copied.
     */
    eProsima_user_DllExport geoLocation& operator=(geoLocation &&x);

    /*!
     * @brief This function sets a value in member lon
     * @param _lon New value for member lon
     */
    eProsima_user_DllExport void lon(float _lon);

    /*!
     * @brief This function returns the value of member lon
     * @return Value of member lon
     */
    eProsima_user_DllExport float lon() const;

    /*!
     * @brief This function returns a reference to member lon
     * @return Reference to member lon
     */
    eProsima_user_DllExport float& lon();
    /*!
     * @brief This function sets a value in member lat
     * @param _lat New value for member lat
     */
    eProsima_user_DllExport void lat(float _lat);

    /*!
     * @brief This function returns the value of member lat
     * @return Value of member lat
     */
    eProsima_user_DllExport float lat() const;

    /*!
     * @brief This function returns a reference to member lat
     * @return Reference to member lat
     */
    eProsima_user_DllExport float& lat();
    /*!
     * @brief This function sets a value in member gpsLoc
     * @param _gpsLoc New value for member gpsLoc
     */
    eProsima_user_DllExport void gpsLoc(bool _gpsLoc);

    /*!
     * @brief This function returns the value of member gpsLoc
     * @return Value of member gpsLoc
     */
    eProsima_user_DllExport bool gpsLoc() const;

    /*!
     * @brief This function returns a reference to member gpsLoc
     * @return Reference to member gpsLoc
     */
    eProsima_user_DllExport bool& gpsLoc();
    /*!
     * @brief This function sets a value in member bearing
     * @param _bearing New value for member bearing
     */
    eProsima_user_DllExport void bearing(uint16_t _bearing);

    /*!
     * @brief This function returns the value of member bearing
     * @return Value of member bearing
     */
    eProsima_user_DllExport uint16_t bearing() const;

    /*!
     * @brief This function returns a reference to member bearing
     * @return Reference to member bearing
     */
    eProsima_user_DllExport uint16_t& bearing();
    /*!
     * @brief This function sets a value in member siteAzimuth
     * @param _siteAzimuth New value for member siteAzimuth
     */
    eProsima_user_DllExport void siteAzimuth(uint16_t _siteAzimuth);

    /*!
     * @brief This function returns the value of member siteAzimuth
     * @return Value of member siteAzimuth
     */
    eProsima_user_DllExport uint16_t siteAzimuth() const;

    /*!
     * @brief This function returns a reference to member siteAzimuth
     * @return Reference to member siteAzimuth
     */
    eProsima_user_DllExport uint16_t& siteAzimuth();
    /*!
     * @brief This function sets a value in member cameraAzimuth
     * @param _cameraAzimuth New value for member cameraAzimuth
     */
    eProsima_user_DllExport void cameraAzimuth(uint16_t _cameraAzimuth);

    /*!
     * @brief This function returns the value of member cameraAzimuth
     * @return Value of member cameraAzimuth
     */
    eProsima_user_DllExport uint16_t cameraAzimuth() const;

    /*!
     * @brief This function returns a reference to member cameraAzimuth
     * @return Reference to member cameraAzimuth
     */
    eProsima_user_DllExport uint16_t& cameraAzimuth();
    /*!
     * @brief This function sets a value in member satilites
     * @param _satilites New value for member satilites
     */
    eProsima_user_DllExport void satilites(uint16_t _satilites);

    /*!
     * @brief This function returns the value of member satilites
     * @return Value of member satilites
     */
    eProsima_user_DllExport uint16_t satilites() const;

    /*!
     * @brief This function returns a reference to member satilites
     * @return Reference to member satilites
     */
    eProsima_user_DllExport uint16_t& satilites();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const geoLocation& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    float m_lon;
    float m_lat;
    bool m_gpsLoc;
    uint16_t m_bearing;
    uint16_t m_siteAzimuth;
    uint16_t m_cameraAzimuth;
    uint16_t m_satilites;
};

#endif // _LOCATION_H_