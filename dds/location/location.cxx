// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file location.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "location.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


dateTime::dateTime()
{
    m_year = 0;
    m_month = 0;
    m_day = 0;
    m_hour = 0;
    m_minute = 0;
    m_second = 0;

}

dateTime::~dateTime()
{






}

dateTime::dateTime(const dateTime &x)
{
    m_year = x.m_year;
    m_month = x.m_month;
    m_day = x.m_day;
    m_hour = x.m_hour;
    m_minute = x.m_minute;
    m_second = x.m_second;
}

dateTime::dateTime(dateTime &&x)
{
    m_year = x.m_year;
    m_month = x.m_month;
    m_day = x.m_day;
    m_hour = x.m_hour;
    m_minute = x.m_minute;
    m_second = x.m_second;
}

dateTime& dateTime::operator=(const dateTime &x)
{

    m_year = x.m_year;
    m_month = x.m_month;
    m_day = x.m_day;
    m_hour = x.m_hour;
    m_minute = x.m_minute;
    m_second = x.m_second;

    return *this;
}

dateTime& dateTime::operator=(dateTime &&x)
{

    m_year = x.m_year;
    m_month = x.m_month;
    m_day = x.m_day;
    m_hour = x.m_hour;
    m_minute = x.m_minute;
    m_second = x.m_second;

    return *this;
}

size_t dateTime::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t dateTime::getCdrSerializedSize(const dateTime& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void dateTime::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_year;
    scdr << m_month;
    scdr << m_day;
    scdr << m_hour;
    scdr << m_minute;
    scdr << m_second;
}

void dateTime::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_year;
    dcdr >> m_month;
    dcdr >> m_day;
    dcdr >> m_hour;
    dcdr >> m_minute;
    dcdr >> m_second;
}

/*!
 * @brief This function sets a value in member year
 * @param _year New value for member year
 */
void dateTime::year(uint16_t _year)
{
m_year = _year;
}

/*!
 * @brief This function returns the value of member year
 * @return Value of member year
 */
uint16_t dateTime::year() const
{
    return m_year;
}

/*!
 * @brief This function returns a reference to member year
 * @return Reference to member year
 */
uint16_t& dateTime::year()
{
    return m_year;
}
/*!
 * @brief This function sets a value in member month
 * @param _month New value for member month
 */
void dateTime::month(uint8_t _month)
{
m_month = _month;
}

/*!
 * @brief This function returns the value of member month
 * @return Value of member month
 */
uint8_t dateTime::month() const
{
    return m_month;
}

/*!
 * @brief This function returns a reference to member month
 * @return Reference to member month
 */
uint8_t& dateTime::month()
{
    return m_month;
}
/*!
 * @brief This function sets a value in member day
 * @param _day New value for member day
 */
void dateTime::day(uint8_t _day)
{
m_day = _day;
}

/*!
 * @brief This function returns the value of member day
 * @return Value of member day
 */
uint8_t dateTime::day() const
{
    return m_day;
}

/*!
 * @brief This function returns a reference to member day
 * @return Reference to member day
 */
uint8_t& dateTime::day()
{
    return m_day;
}
/*!
 * @brief This function sets a value in member hour
 * @param _hour New value for member hour
 */
void dateTime::hour(uint8_t _hour)
{
m_hour = _hour;
}

/*!
 * @brief This function returns the value of member hour
 * @return Value of member hour
 */
uint8_t dateTime::hour() const
{
    return m_hour;
}

/*!
 * @brief This function returns a reference to member hour
 * @return Reference to member hour
 */
uint8_t& dateTime::hour()
{
    return m_hour;
}
/*!
 * @brief This function sets a value in member minute
 * @param _minute New value for member minute
 */
void dateTime::minute(uint8_t _minute)
{
m_minute = _minute;
}

/*!
 * @brief This function returns the value of member minute
 * @return Value of member minute
 */
uint8_t dateTime::minute() const
{
    return m_minute;
}

/*!
 * @brief This function returns a reference to member minute
 * @return Reference to member minute
 */
uint8_t& dateTime::minute()
{
    return m_minute;
}
/*!
 * @brief This function sets a value in member second
 * @param _second New value for member second
 */
void dateTime::second(uint8_t _second)
{
m_second = _second;
}

/*!
 * @brief This function returns the value of member second
 * @return Value of member second
 */
uint8_t dateTime::second() const
{
    return m_second;
}

/*!
 * @brief This function returns a reference to member second
 * @return Reference to member second
 */
uint8_t& dateTime::second()
{
    return m_second;
}

size_t dateTime::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;









    return current_align;
}

bool dateTime::isKeyDefined()
{
   return false;
}

void dateTime::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
}

geoLocation::geoLocation()
{
    m_lon = 0.0;
    m_lat = 0.0;
    m_gpsLoc = false;
    m_bearing = 0;
    m_siteAzimuth = 0;
    m_cameraAzimuth = 0;
    m_satilites = 0;

}

geoLocation::~geoLocation()
{







}

geoLocation::geoLocation(const geoLocation &x)
{
    m_lon = x.m_lon;
    m_lat = x.m_lat;
    m_gpsLoc = x.m_gpsLoc;
    m_bearing = x.m_bearing;
    m_siteAzimuth = x.m_siteAzimuth;
    m_cameraAzimuth = x.m_cameraAzimuth;
    m_satilites = x.m_satilites;
}

geoLocation::geoLocation(geoLocation &&x)
{
    m_lon = x.m_lon;
    m_lat = x.m_lat;
    m_gpsLoc = x.m_gpsLoc;
    m_bearing = x.m_bearing;
    m_siteAzimuth = x.m_siteAzimuth;
    m_cameraAzimuth = x.m_cameraAzimuth;
    m_satilites = x.m_satilites;
}

geoLocation& geoLocation::operator=(const geoLocation &x)
{

    m_lon = x.m_lon;
    m_lat = x.m_lat;
    m_gpsLoc = x.m_gpsLoc;
    m_bearing = x.m_bearing;
    m_siteAzimuth = x.m_siteAzimuth;
    m_cameraAzimuth = x.m_cameraAzimuth;
    m_satilites = x.m_satilites;

    return *this;
}

geoLocation& geoLocation::operator=(geoLocation &&x)
{

    m_lon = x.m_lon;
    m_lat = x.m_lat;
    m_gpsLoc = x.m_gpsLoc;
    m_bearing = x.m_bearing;
    m_siteAzimuth = x.m_siteAzimuth;
    m_cameraAzimuth = x.m_cameraAzimuth;
    m_satilites = x.m_satilites;

    return *this;
}

size_t geoLocation::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

size_t geoLocation::getCdrSerializedSize(const geoLocation& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

void geoLocation::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_lon;
    scdr << m_lat;
    scdr << m_gpsLoc;
    scdr << m_bearing;
    scdr << m_siteAzimuth;
    scdr << m_cameraAzimuth;
    scdr << m_satilites;
}

void geoLocation::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_lon;
    dcdr >> m_lat;
    dcdr >> m_gpsLoc;
    dcdr >> m_bearing;
    dcdr >> m_siteAzimuth;
    dcdr >> m_cameraAzimuth;
    dcdr >> m_satilites;
}

/*!
 * @brief This function sets a value in member lon
 * @param _lon New value for member lon
 */
void geoLocation::lon(float _lon)
{
m_lon = _lon;
}

/*!
 * @brief This function returns the value of member lon
 * @return Value of member lon
 */
float geoLocation::lon() const
{
    return m_lon;
}

/*!
 * @brief This function returns a reference to member lon
 * @return Reference to member lon
 */
float& geoLocation::lon()
{
    return m_lon;
}
/*!
 * @brief This function sets a value in member lat
 * @param _lat New value for member lat
 */
void geoLocation::lat(float _lat)
{
m_lat = _lat;
}

/*!
 * @brief This function returns the value of member lat
 * @return Value of member lat
 */
float geoLocation::lat() const
{
    return m_lat;
}

/*!
 * @brief This function returns a reference to member lat
 * @return Reference to member lat
 */
float& geoLocation::lat()
{
    return m_lat;
}
/*!
 * @brief This function sets a value in member gpsLoc
 * @param _gpsLoc New value for member gpsLoc
 */
void geoLocation::gpsLoc(bool _gpsLoc)
{
m_gpsLoc = _gpsLoc;
}

/*!
 * @brief This function returns the value of member gpsLoc
 * @return Value of member gpsLoc
 */
bool geoLocation::gpsLoc() const
{
    return m_gpsLoc;
}

/*!
 * @brief This function returns a reference to member gpsLoc
 * @return Reference to member gpsLoc
 */
bool& geoLocation::gpsLoc()
{
    return m_gpsLoc;
}
/*!
 * @brief This function sets a value in member bearing
 * @param _bearing New value for member bearing
 */
void geoLocation::bearing(uint16_t _bearing)
{
m_bearing = _bearing;
}

/*!
 * @brief This function returns the value of member bearing
 * @return Value of member bearing
 */
uint16_t geoLocation::bearing() const
{
    return m_bearing;
}

/*!
 * @brief This function returns a reference to member bearing
 * @return Reference to member bearing
 */
uint16_t& geoLocation::bearing()
{
    return m_bearing;
}
/*!
 * @brief This function sets a value in member siteAzimuth
 * @param _siteAzimuth New value for member siteAzimuth
 */
void geoLocation::siteAzimuth(uint16_t _siteAzimuth)
{
m_siteAzimuth = _siteAzimuth;
}

/*!
 * @brief This function returns the value of member siteAzimuth
 * @return Value of member siteAzimuth
 */
uint16_t geoLocation::siteAzimuth() const
{
    return m_siteAzimuth;
}

/*!
 * @brief This function returns a reference to member siteAzimuth
 * @return Reference to member siteAzimuth
 */
uint16_t& geoLocation::siteAzimuth()
{
    return m_siteAzimuth;
}
/*!
 * @brief This function sets a value in member cameraAzimuth
 * @param _cameraAzimuth New value for member cameraAzimuth
 */
void geoLocation::cameraAzimuth(uint16_t _cameraAzimuth)
{
m_cameraAzimuth = _cameraAzimuth;
}

/*!
 * @brief This function returns the value of member cameraAzimuth
 * @return Value of member cameraAzimuth
 */
uint16_t geoLocation::cameraAzimuth() const
{
    return m_cameraAzimuth;
}

/*!
 * @brief This function returns a reference to member cameraAzimuth
 * @return Reference to member cameraAzimuth
 */
uint16_t& geoLocation::cameraAzimuth()
{
    return m_cameraAzimuth;
}
/*!
 * @brief This function sets a value in member satilites
 * @param _satilites New value for member satilites
 */
void geoLocation::satilites(uint16_t _satilites)
{
m_satilites = _satilites;
}

/*!
 * @brief This function returns the value of member satilites
 * @return Value of member satilites
 */
uint16_t geoLocation::satilites() const
{
    return m_satilites;
}

/*!
 * @brief This function returns a reference to member satilites
 * @return Reference to member satilites
 */
uint16_t& geoLocation::satilites()
{
    return m_satilites;
}

size_t geoLocation::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;










    return current_align;
}

bool geoLocation::isKeyDefined()
{
   return false;
}

void geoLocation::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
}
